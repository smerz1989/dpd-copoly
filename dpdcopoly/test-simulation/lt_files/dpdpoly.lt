import copolyff.lt
import a_bead.lt
import b_bead.lt


DPDPoly {

# Definitions of individual polymers to follow

DPDPoly_sub1 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9997037097441258,-2.3896165316259826e-06,-0.024341173310304328))
push(move(8.0,40.0,28.0))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997037097441258,-2.3896165316259826e-06,-0.024341173310304328,-0.9998087135846552,-1.920096221345349e-06,-0.019558533598154265))
push(move(7.747805707621215,39.99999939717374,27.993859475643806))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998087135846552,-1.920096221345349e-06,-0.019558533598154265,-0.9999871791555048,-4.971170152791091e-07,-0.00506374608064178))
push(move(7.496830154760849,39.99999903368064,27.99015685281597))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999871791555048,-4.971170152791091e-07,-0.00506374608064178,-0.9998084104077022,1.9216170808178167e-06,0.019574025501444443))
push(move(7.248292080937321,39.99999914885383,27.991330033044868))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998084104077022,1.9216170808178167e-06,0.019574025501444443,-0.9987435099513479,4.919769586916851e-06,0.05011388336436963))
push(move(7.003410225669053,39.999999982026495,27.99981691785886))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9987435099513479,4.919769586916851e-06,0.05011388336436963,-0.9981346013810511,5.9935605772834665e-06,0.061051760744202224))
push(move(6.762235262584645,40.00000154314979,28.0157188720818))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9981346013810511,5.9935605772834665e-06,0.061051760744202224,-0.9996552213598706,2.5777122829825313e-06,0.02625715904859935))
push(move(6.519944341857732,40.00000288512399,28.029388524158843))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9996552213598706,2.5777122829825313e-06,0.02625715904859935,-0.9984974494467267,-5.379637947461363e-06,-0.05479820635240903))
push(move(6.270443769280891,40.00000281128399,28.0286363732187))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9984974494467267,-5.379637947461363e-06,-0.05479820635240903,-0.9879791415365434,-1.517610619198359e-05,-0.1545872428708154))
push(move(6.007639847262021,40.00000012496401,28.001272911619544))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9879791415365434,-1.517610619198359e-05,-0.1545872428708154,-0.9794337903185708,-1.9807712447236587e-05,-0.2017658295892845))
push(move(5.729914145112657,39.99999450834051,27.944060716934892))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub1 inherits .../COPOLYFF



DPDPoly_sub2 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999940616625482,3.3832452080959844e-07,0.0034462500671372585))
push(move(5.455125273004027,39.99998946844467,27.89272320042113))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999940616625482,3.3832452080959844e-07,0.0034462500671372585,-0.9758903504835744,2.14271086529244e-05,0.21826136482191535))
push(move(5.206429173476505,39.999989552585156,27.89358027446042))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9758903504835744,2.14271086529244e-05,0.21826136482191535,-0.7113505624317767,6.611454377446851e-05,0.7028373730507378))
push(move(5.006981897380063,39.999999308091915,27.992952068091682))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7113505624317767,6.611454377446851e-05,0.7028373730507378,-0.32594355094097405,7.214749484690057e-05,0.9453892301029918))
push(move(4.877461706401697,40.00002012757188,28.218610776422224))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.32594355094097405,7.214749484690057e-05,0.9453892301029918,-0.025370638358133274,3.280113084157528e-05,0.9996781130110766))
push(move(4.827297658535517,40.00003908113746,28.514120668398334))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.025370638358133274,3.280113084157528e-05,0.9996781130110766,0.3214337591220735,-7.045444532058957e-05,0.9469320638423985))
push(move(4.862728036705074,40.00003917640387,28.79916089550612))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3214337591220735,-7.045444532058957e-05,0.9469320638423985,0.8195913410704685,-0.00026866953487145634,0.5729484806324143))
push(move(4.989990912403681,40.00000342071713,28.993409026532824))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8195913410704685,-0.00026866953487145634,0.5729484806324143,0.9999856476869294,-0.00030422961703785467,0.005349005934986592))
push(move(5.207710142004022,39.999926088115686,29.04032617284817))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999856476869294,-0.00030422961703785467,0.005349005934986592,0.9865866619556365,-0.0001319268287425921,-0.1632382952819178))
push(move(5.47844561522956,39.99985481619713,28.996021811136714))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9865866619556365,-0.0001319268287425921,-0.1632382952819178,0.9863023101122393,-6.406096804600337e-06,-0.16494772816326314))
push(move(5.754090605182132,39.99985302586523,28.94992335389282))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub2 inherits .../COPOLYFF



DPDPoly_sub3 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.6050358158500471,0.0011768980491792037,0.7961973853572051))
push(move(5.986536775038506,39.99998414040595,28.991463242326343))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6050358158500471,0.0011768980491792037,0.7961973853572051,0.38222422829650193,0.001054357080652714,0.9240690058833756))
push(move(6.134207468096489,40.00027138513763,29.185790613742306))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.38222422829650193,0.001054357080652714,0.9240690058833756,0.02331933754344871,0.0004738301135755675,0.9997279549865344))
push(move(6.187804585464016,40.00053933320986,29.4780502552039))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02331933754344871,0.0004738301135755675,0.9997279549865344,-0.3197534002949656,-0.0008693749568599259,0.9475003995708877))
push(move(6.147983426799403,40.000551301497374,29.776382477528443))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3197534002949656,-0.0008693749568599259,0.9475003995708877,-0.7919805424666674,-0.0034864120352780213,0.6105363750713985))
push(move(6.015402113300031,40.0000705895103,29.988917101691527))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7919805424666674,-0.0034864120352780213,0.6105363750713985,-0.9994390733406294,-0.0042448149315994855,0.03321927492014922))
push(move(5.7964533923473915,39.99900381582423,30.04737634853265))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9994390733406294,-0.0042448149315994855,0.03321927492014922,-0.9857828977998166,-0.0019427035812823097,-0.16801280995266885))
push(move(5.527103161996219,39.99799668752381,30.00514714266077))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9857828977998166,-0.0019427035812823097,-0.16801280995266885,-0.9994651762869696,0.003340354447557462,-0.032530038761448374))
push(move(5.252822793450335,39.99793247129824,29.954722170111822))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9994651762869696,0.003340354447557462,-0.032530038761448374,-0.8671511474980735,0.012835945336813766,0.4978796299308547))
push(move(5.019088138743447,39.999694545821036,29.988612551171347))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8671511474980735,0.012835945336813766,0.4978796299308547,-0.6306892451442423,0.016338554364760997,0.7758634723330231))
push(move(4.866183572223862,40.003655671830295,30.17671321854253))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub3 inherits .../COPOLYFF



DPDPoly_sub4 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.12042432005771468,0.00103146982222764,0.9927219747787609))
push(move(4.806451198608426,40.007440293516254,30.46719121746434))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12042432005771468,0.00103146982222764,0.9927219747787609,0.3152704664289132,-0.01126623411768302,0.9489349845835072))
push(move(4.842873390625445,40.007752260334144,30.767438795092993))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3152704664289132,-0.01126623411768302,0.9489349845835072,0.7926762714117219,-0.045813032058599865,0.607918987065224))
push(move(4.978425773544935,40.001294758079744,30.98481880391297))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7926762714117219,-0.045813032058599865,0.607918987065224,0.9974026256938237,-0.056264457654043865,0.04497013524509727))
push(move(5.209051088991108,39.98658887846011,31.048267657397496))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9974026256938237,-0.056264457654043865,0.04497013524509727,0.9863248113726342,-0.027644943601590016,-0.1624780710249922))
push(move(5.491176357128517,39.97236999614917,31.007937314428936))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9863248113726342,-0.027644943601590016,-0.1624780710249922,0.9979516608372215,0.04533625644749262,-0.04513431603069107))
push(move(5.7674375279608565,39.97093829212666,30.956284214981544))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9979516608372215,0.04533625644749262,-0.04513431603069107,0.8134230056317687,0.20119658257421166,0.5457682191823173))
push(move(5.98045624837436,39.99459764453598,30.985808674229645))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8134230056317687,0.20119658257421166,0.5457682191823173,0.23098606612456168,0.21763971221667713,0.9483029014626821))
push(move(6.083781917316967,40.04918467760422,31.168536281657612))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.23098606612456168,0.21763971221667713,0.9483029014626821,-0.048047678230436396,0.10079201560108933,0.9937466428661453))
push(move(6.095075076894764,40.10259380756142,31.45637111754836))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.048047678230436396,0.10079201560108933,0.9937466428661453,-0.13088981135042727,0.020839257041886262,0.9911778763928258))
push(move(6.055303163770507,40.10892598202246,31.75754842068497))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub4 inherits .../COPOLYFF



DPDPoly_sub5 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.10955934337780752,-0.9419824468637256,0.31727877344576977))
push(move(6.005466810527026,40.022262502618005,31.980241232487895))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10955934337780752,-0.9419824468637256,0.31727877344576977,-0.048844487183253855,-0.9961580254789276,0.07268703010667707))
push(move(5.9807627753457995,39.809859189582696,32.05178297178467))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.048844487183253855,-0.9961580254789276,0.07268703010667707,0.018868715810956754,-0.9887507752274897,-0.14837747824613914))
push(move(5.980824657064056,39.51969854191709,32.01691200239354))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.018868715810956754,-0.9887507752274897,-0.14837747824613914,0.038093115980239955,-0.9972095312692656,-0.06420331191338519))
push(move(5.991822246824578,39.23032526115825,31.964814865147368))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.038093115980239955,-0.9972095312692656,-0.06420331191338519,0.006674662169028082,-0.833829296342519,0.5519820227560578))
push(move(5.999899944710923,39.020341685338956,31.984761924587758))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.006674662169028082,-0.833829296342519,0.5519820227560578,-0.04202728693030252,-0.0835558499903433,0.995616455813015))
push(move(5.994049534393006,38.95208232108068,32.14900736300669))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04202728693030252,-0.0835558499903433,0.995616455813015,-0.0301612417309965,0.13916017031453604,0.9898104598837465))
push(move(5.981490616987422,38.983741487276234,32.420874530485165))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0301612417309965,0.13916017031453604,0.9898104598837465,0.022567238764299904,0.057474197856433526,0.9980918977305219))
push(move(5.976627538625871,39.03246521512055,32.72075019097649))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.022567238764299904,0.057474197856433526,0.9980918977305219,0.1566336451410118,-0.40372212187108925,0.9013735904283778))
push(move(5.993882066391294,39.015300005454044,32.968916999495946))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1566336451410118,-0.40372212187108925,0.9013735904283778,0.2357222683121007,-0.7410794860440191,0.6286781430800107))
push(move(6.042097925152691,38.863715752994885,33.097510096661416))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub5 inherits .../COPOLYFF



DPDPoly_sub6 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.031320755783628175,-0.9888430432099259,-0.14563119910402098))
push(move(6.092800942879373,38.60567691184767,33.11795943993833))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.031320755783628175,-0.9888430432099259,-0.14563119910402098,-0.11452712878194383,-0.9758929484961828,-0.1857861400869039))
push(move(6.10220624393684,38.30873750897308,33.074227887596635))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11452712878194383,-0.9758929484961828,-0.1857861400869039,-0.5072068673669242,-0.8375942227300399,-0.20292144229994977))
push(move(6.0264823599097666,38.040572048374464,33.01037730043132))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5072068673669242,-0.8375942227300399,-0.20292144229994977,-0.8780573100802386,-0.4654108995928823,-0.11139144830192231))
push(move(5.831984533308721,37.86249721090037,32.966118587842715))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8780573100802386,-0.4654108995928823,-0.11139144830192231,-0.9977553506657659,-0.06622483837500846,-0.009926278257142884))
push(move(5.556315610557011,37.79136197146624,32.9507313587))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977553506657659,-0.06622483837500846,-0.009926278257142884,-0.9483686147178447,0.3083479299894207,0.07428677331393338))
push(move(5.26749725994822,37.82503003177865,32.9605027244507))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9483686147178447,0.3083479299894207,0.07428677331393338,-0.6854942613850604,0.7123384746669881,0.15057063165590848))
push(move(5.033665010759584,37.96129402958608,32.991671164200724))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6854942613850604,0.7123384746669881,0.15057063165590848,-0.2565708476652352,0.9531401983770759,0.16029710654297932))
push(move(4.913341123875131,38.193055055437526,33.03829405855406))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2565708476652352,0.9531401983770759,0.16029710654297932,0.037983298978333545,0.9961063157211756,0.07955800889356375))
push(move(4.894728184991562,38.477433235889045,33.07847436637878))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.037983298978333545,0.9961063157211756,0.07955800889356375,0.1425160386429087,0.9896480295081548,0.0169102460112028))
push(move(4.934794073944137,38.755655451647925,33.0832283859635))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub6 inherits .../COPOLYFF



DPDPoly_sub7 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.1788941364941929,0.5435456747376826,-0.82009449906822))
push(move(4.9903652966414604,38.96887664771686,33.023540340089625))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1788941364941929,0.5435456747376826,-0.82009449906822,0.09581665365615573,0.2608923692864765,-0.9606010308813046))
push(move(5.022770423122707,39.06733524833612,32.87498731040582))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09581665365615573,0.2608923692864765,-0.9606010308813046,-0.01112722936642443,-0.07159364935980679,-0.9973718133865483))
push(move(5.027794460168234,39.07078986196825,32.64829771057901))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01112722936642443,-0.07159364935980679,-0.9973718133865483,-0.04309263641180142,-0.12045325509758749,-0.9917832616169099))
push(move(5.017141415382817,39.03111767852585,32.37043999928075))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04309263641180142,-0.12045325509758749,-0.9917832616169099,-0.037180515875423904,-0.014861724725444678,-0.9991980476249054))
push(move(5.002601158553677,39.00036912564733,32.068470228978434))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.037180515875423904,-0.014861724725444678,-0.9991980476249054,-0.014165634928946359,0.12338562018771222,-0.9922576900775087))
push(move(4.994739181413005,39.02216310039117,31.768397022790786))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.014165634928946359,0.12338562018771222,-0.9922576900775087,0.004922970710824473,0.137029492026348,-0.9905547348200308))
push(move(4.994311950977913,39.0725698439865,31.487837592110637))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.004922970710824473,0.137029492026348,-0.9905547348200308,0.012434717717365899,-0.08685112533376488,-0.9961436943651995))
push(move(4.9973633915902225,39.09520724561914,31.240377668442306))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.012434717717365899,-0.08685112533376488,-0.9961436943651995,0.002801857363104656,-0.5971195855706742,-0.8021473369171171))
push(move(4.999907518192437,39.03348722703385,31.039577396436062))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.002801857363104656,-0.5971195855706742,-0.8021473369171171,-0.005665816701153969,-0.8072836605960424,-0.5901364163104686))
push(move(4.998556351969125,38.84096874781673,30.898843511998404))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub7 inherits .../COPOLYFF



DPDPoly_sub8 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.005904997247433198,-0.998677043772782,0.05108124165253291))
push(move(4.99493935441851,38.55634726471441,30.83029560859281))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.005904997247433198,-0.998677043772782,0.05108124165253291,0.0047253339947239395,-0.9721736290376852,0.23421380450847737))
push(move(4.993192085022111,38.260841989715466,30.84541038113709))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0047253339947239395,-0.9721736290376852,0.23421380450847737,0.039315110349844695,-0.6916901720975889,0.721123448462042))
push(move(4.997468614222687,38.03598623090143,30.95565977586398))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.039315110349844695,-0.6916901720975889,0.721123448462042,0.05744421137865933,-0.1191115154921433,0.99121774068882))
push(move(5.010757023305145,37.95181334714614,31.167589023241163))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05744421137865933,-0.1191115154921433,0.99121774068882,0.0340549247413342,0.13617465832373338,0.990099350838731))
push(move(5.025794343571494,37.977252366005686,31.444429049123045))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0340549247413342,0.13617465832373338,0.990099350838731,-0.02934172081512793,0.08769536962190158,0.9957151126534565))
push(move(5.029995586562322,38.028742155478106,31.7269233672951))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02934172081512793,0.08769536962190158,0.9957151126534565,-0.1832971254696104,-0.3752757332617195,0.908608985108257))
push(move(5.010730455564077,38.02227471609472,31.955624048176112))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1832971254696104,-0.3752757332617195,0.908608985108257,-0.2517291181814881,-0.9070508168136705,0.3374778019029154))
push(move(4.959240091645629,37.88387998063969,32.07766033745968))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2517291181814881,-0.9070508168136705,0.3374778019029154,-0.13137341713368522,-0.9910881445668769,-0.022029865401409627))
push(move(4.902451140869264,37.63211388945906,32.10078748965138))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13137341713368522,-0.9910881445668769,-0.022029865401409627,-0.05317114816479147,-0.9915833217699501,-0.11804806220565163))
push(move(4.886543414972943,37.335452330878596,32.06546991083327))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub8 inherits .../COPOLYFF



DPDPoly_sub9 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.7251837579398931,-0.6777293738654594,-0.12161995321536251))
push(move(4.9578840303681035,37.06285684008927,32.012490218495266))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7251837579398931,-0.6777293738654594,-0.12161995321536251,0.877554023611695,-0.4740538602452633,-0.0719157370085926))
push(move(5.155011523697976,36.878628923835805,31.97943013371848))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.877554023611695,-0.4740538602452633,-0.0719157370085926,0.9960523222614202,-0.0886377750832588,0.004807925324057276))
push(move(5.44076115362304,36.80200707113599,31.972918336572206))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9960523222614202,-0.0886377750832588,0.004807925324057276,0.9620311670127283,0.26942233418409123,0.04367653304606538))
push(move(5.735531514065065,36.82696898671456,31.982232292501134))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9620311670127283,0.26942233418409123,0.04367653304606538,0.6822202855424618,0.7293081562605266,0.05181790430182715))
push(move(5.959253013392971,36.94721368387852,31.996458038427892))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6822202855424618,0.7293081562605266,0.05181790430182715,0.11223242852595472,0.9934142766795194,0.023064190349410138))
push(move(6.041685681812347,37.154254375822724,32.005486170613715))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11223242852595472,0.9934142766795194,0.023064190349410138,-0.15172441603262324,0.9884223237864693,-0.0010056938476510687))
push(move(6.012374713980348,37.417415179632414,32.00737474966834))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15172441603262324,0.9884223237864693,-0.0010056938476510687,-0.08147547654542817,0.9966016435987587,-0.012120672338942933))
push(move(5.958972155087457,37.69309906827098,32.0049379102406))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08147547654542817,0.9966016435987587,-0.012120672338942933,0.3680779244235906,0.9296798763685743,-0.014627680176092965))
push(move(5.969852100644342,37.937548453319366,32.00104888715001))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3680779244235906,0.9296798763685743,-0.014627680176092965,0.6674492093728112,0.744566067467626,-0.011529270722985372))
push(move(6.123705889704988,38.10917845763613,31.99839127371527))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub9 inherits .../COPOLYFF



DPDPoly_sub10 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9987413680144518,-0.05012203381050192,0.0018605223245559434))
push(move(6.395965169148156,38.189574620346676,31.997626271895285))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987413680144518,-0.05012203381050192,0.0018605223245559434,0.9731268906588686,-0.23024549241441705,0.0033268452692162575))
push(move(6.69960903521274,38.17433619265293,31.998191920029647))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9731268906588686,-0.23024549241441705,0.0033268452692162575,0.7347943308417587,-0.6782655406939623,0.005757401318219476))
push(move(6.946747852089372,38.05925736032186,31.999509241917693))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7347943308417587,-0.6782655406939623,0.005757401318219476,0.20396030483700717,-0.9789657832758915,0.005117540993043121))
push(move(7.058041574547083,37.843478386747684,32.001000379332936))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20396030483700717,-0.9789657832758915,0.005117540993043121,-0.10360252566318241,-0.994616331092581,0.002206943620238138))
push(move(7.050003198006764,37.56365381298345,32.00210000812539))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10360252566318241,-0.994616331092581,0.002206943620238138,-0.12873954070368748,-0.9916756793645953,-0.00234043076638456))
push(move(6.999347763765694,37.27999962632617,32.00225067637369))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12873954070368748,-0.9916756793645953,-0.00234043076638456,0.21655224975486914,-0.9761822652146966,-0.013164657474024398))
push(move(6.983722564948416,37.05309667212696,32.00089505406095))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.21655224975486914,-0.9761822652146966,-0.013164657474024398,0.9179787522616895,-0.39605689456627335,-0.021306024091592615))
push(move(7.075207127978103,36.93803797005873,31.997639029313067))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9179787522616895,-0.39605689456627335,-0.021306024091592615,0.9986745205814685,0.05050756414989634,-0.009908981028246264))
push(move(7.280203184954043,36.925181735785344,31.99401382373076))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9986745205814685,0.05050756414989634,-0.009908981028246264,0.9912744717303061,0.13174563336642933,-0.004243793666150413))
push(move(7.562282981075173,36.9626716363726,31.992806198107115))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub10 inherits .../COPOLYFF



DPDPoly_sub11 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9983831919055448,-0.04471711357230731,0.03509105119909326))
push(move(7.884284134254917,36.99792725925119,31.9968244487103))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9983831919055448,-0.04471711357230731,0.03509105119909326,0.9939365323763675,-0.1026303951130806,0.039461013755038195))
push(move(8.209744390201452,36.983350047468754,32.008263686266865))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9939365323763675,-0.1026303951130806,0.039461013755038195,0.9893822197516394,-0.1416443774160954,0.03255293513226282))
push(move(8.510898372396888,36.93322527401453,32.021702126776226))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9893822197516394,-0.1416443774160954,0.03255293513226282,0.9988817715041438,0.042079967241259016,-0.02155186566676173))
push(move(8.765868390383057,36.90373285180938,32.026561436258724))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9988817715041438,0.042079967241259016,-0.02155186566676173,0.7774224481575414,0.6099726544643749,-0.15345259172271802))
push(move(8.952888102080607,36.95184500847826,32.01216575965854))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7774224481575414,0.6099726544643749,-0.15345259172271802,0.25367501153160366,0.9479508316880499,-0.19245313514301365))
push(move(9.052457592972027,37.12859332124697,31.969992635086015))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.25367501153160366,0.9479508316880499,-0.19245313514301365,-0.002859567873123378,0.9929032488057772,-0.11889054370517267))
push(move(9.07475072033389,37.40722991070972,31.91971344124538))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.002859567873123378,0.9929032488057772,-0.11889054370517267,-0.11593304286740931,0.9913275477435103,0.06188071312082335))
push(move(9.050793650426723,37.70634983284695,31.900811890762796))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11593304286740931,0.9913275477435103,0.06188071312082335,-0.15536181917817224,0.8355779916168561,0.5269460362002831))
push(move(9.012045556353355,37.94341316702924,31.953183107593322))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15536181917817224,0.8355779916168561,0.5269460362002831,-0.1254772041225239,0.5236095177006365,0.8426675170070941))
push(move(8.988263125545021,38.042655951504585,32.11289882693691))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub11 inherits .../COPOLYFF



DPDPoly_sub12 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.02652131395485707,-0.1877692569363138,0.9818550433010428))
push(move(8.98568604537101,38.02191279512799,32.363217045181294))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02652131395485707,-0.1877692569363138,0.9818550433010428,0.02605866554906596,-0.10026070753565766,0.9946198954747745))
push(move(8.993402119917814,37.96728346618204,32.648876598895804))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02605866554906596,-0.10026070753565766,0.9946198954747745,0.004294470847040376,0.28134555634439246,0.9595969130032714))
push(move(9.000109576154571,37.966418264957234,32.91374142461705))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.004294470847040376,0.28134555634439246,0.9595969130032714,-0.03624703693696346,0.8126547598037894,0.5816170507142442))
push(move(8.99543771449769,38.10064226869006,33.10372897641785))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03624703693696346,0.8126547598037894,0.5816170507142442,-0.03593453974320668,0.9889330503819682,0.14394488777188105))
push(move(8.982598991092612,38.35900374228322,33.194714869639036))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03593453974320668,0.9889330503819682,0.14394488777188105,0.0070202004345630824,0.978003691612502,-0.20846941257214827))
push(move(8.975086799443927,38.66070767222669,33.18524971397016))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0070202004345630824,0.978003691612502,-0.20846941257214827,0.10326287715832967,0.7811537980324965,-0.6157398168223244))
push(move(8.986649058572269,38.92322993259009,33.07444548470741))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10326287715832967,0.7811537980324965,-0.6157398168223244,0.1836361224574274,0.32522216377712027,-0.927635876148033))
push(move(9.02904381736655,39.068876906327525,32.86351275247708))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1836361224574274,0.32522216377712027,-0.927635876148033,0.13634554710176747,-0.023858265653193562,-0.9903740076080053))
push(move(9.083336046643012,39.09446395261112,32.58603221562463))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13634554710176747,-0.023858265653193562,-0.9903740076080053,0.08020073470478349,-0.13559955239519064,-0.9875123308308797))
push(move(9.106484249012736,39.055326083218254,32.301008202305866))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub12 inherits .../COPOLYFF



DPDPoly_sub13 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.8006590978920952,-0.006643568608992396,-0.5990833597745424))
push(move(9.05479852142404,39.008372346977666,32.06812887479935))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8006590978920952,-0.006643568608992396,-0.5990833597745424,-0.9446570368505964,0.08513843717896978,-0.3168193953080738))
push(move(8.888197209010388,39.00698995183311,31.94347148409913))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9446570368505964,0.08513843717896978,-0.3168193953080738,-0.9915951735844035,0.12626539276969143,0.028214576247610885))
push(move(8.625513377116718,39.047062225806414,31.92415507845987))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9915951735844035,0.12626539276969143,0.028214576247610885,-0.9913137821072183,-0.001399720106070266,0.13151055542391743))
push(move(8.33359127334696,39.07761104617125,31.95925208880154))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9913137821072183,-0.001399720106070266,0.13151055542391743,-0.9163307888220926,-0.3955221569999245,0.0624508509054011))
push(move(8.080674013586087,39.046292920844174,31.99643504531599))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9163307888220926,-0.3955221569999245,0.0624508509054011,-0.4323344819156948,-0.891355624235327,-0.136279297366615))
push(move(7.931651562086036,38.904119045770166,31.986645555535517))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4323344819156948,-0.891355624235327,-0.136279297366615,-0.014826050369827985,-0.9880315537920441,-0.15353773784223249))
push(move(7.893385640733081,38.66015544747705,31.937398514747695))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.014826050369827985,-0.9880315537920441,-0.15353773784223249,0.1509542361265523,-0.9884832866713669,0.010658825771228893))
push(move(7.923675078795781,38.372553525454286,31.904041546391284))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1509542361265523,-0.9884832866713669,0.010658825771228893,0.178580119302976,-0.9019161715844656,0.3932637288438329))
push(move(7.978774470388142,38.10100962190582,31.943427790119202))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.178580119302976,-0.9019161715844656,0.3932637288438329,0.14516212887187513,-0.7590255256840298,0.6346717322375932))
push(move(8.016540561342689,37.90353782080605,32.10854709880005))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub13 inherits .../COPOLYFF



DPDPoly_sub14 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.030736265672743002,0.016366344081242965,0.9993935284730979))
push(move(8.024256197177458,37.807254821201994,32.38143383418666))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.030736265672743002,0.016366344081242965,0.9993935284730979,-0.03850145583248133,0.19754075149943556,0.9795383042004114))
push(move(8.01501592948685,37.812175048077876,32.681882295612525))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03850145583248133,0.19754075149943556,0.9795383042004114,-0.029876997129966908,0.651705482077468,0.7578834538850092))
push(move(8.00278968862873,37.9173937793036,32.927575971575244))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.029876997129966908,0.651705482077468,0.7578834538850092,0.013814941260906155,0.9783711971651607,0.2063951258038035))
push(move(8.000876894346504,38.12058913240388,33.040544203305345))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.013814941260906155,0.9783711971651607,0.2063951258038035,0.028678193606278712,0.9922632903560344,-0.1207937242711607))
push(move(8.009488119710236,38.39177524156038,33.02765048507807))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.028678193606278712,0.9922632903560344,-0.1207937242711607,0.002950356009421138,0.9925698407426553,-0.1216404811216948))
push(move(8.016923267164676,38.67579239622985,32.97295622477499))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.002950356009421138,0.9925698407426553,-0.1216404811216948,-0.08994843135937576,0.9583411784281898,0.27109309365023687))
push(move(8.011048021164349,38.916563142728755,32.963337174150546))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08994843135937576,0.9583411784281898,0.27109309365023687,-0.1750888409252211,0.4421497955232298,0.8796859985825788))
push(move(7.980835742723798,39.06028115469471,33.08171941825159))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1750888409252211,0.4421497955232298,0.8796859985825788,-0.11577783134051753,0.026100263047817436,0.9929321578229409))
push(move(7.938276444086531,39.100332352433,33.32895806187731))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11577783134051753,0.026100263047817436,0.9929321578229409,-0.07031924504724237,-0.08522580136300163,0.9938771385629213))
push(move(7.91708783890445,39.074652101525956,33.628433266344565))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub14 inherits .../COPOLYFF



DPDPoly_sub15 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.5834884705384721,-0.18477019489543864,0.7908231027397823))
push(move(7.951837259001603,39.02291778423567,33.90049569074029))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5834884705384721,-0.18477019489543864,0.7908231027397823,0.8357798204294812,-0.127166977521646,0.5341354243924226))
push(move(8.075607441256652,38.98372413799892,34.068245911181286))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8357798204294812,-0.127166977521646,0.5341354243924226,0.9992089195825008,-0.012036396345028554,0.03790330051323803))
push(move(8.288589606535233,38.97167967443402,34.11570949905238))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992089195825008,-0.012036396345028554,0.03790330051323803,0.9872111773410583,0.03649089586244677,-0.15518539187706282))
push(move(8.558765490413567,38.977904052065966,34.08657369466448))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9872111773410583,0.03649089586244677,-0.15518539187706282,0.983000883241687,0.047507216671422284,-0.1773480417433405))
push(move(8.852768658442036,38.99253377283104,34.02702295531328))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.983000883241687,0.047507216671422284,-0.1773480417433405,0.9937424954177887,0.03695705142910562,-0.10540412302416187))
push(move(9.138026130712298,39.005899002240525,33.98206642313773))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9937424954177887,0.03695705142910562,-0.10540412302416187,0.9998377632874713,0.014253736207261591,-0.011012634037334523))
push(move(9.400741160242367,39.01291274225637,33.96890069400318))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998377632874713,0.014253736207261591,-0.011012634037334523,0.9987045492197555,-0.01362467256334787,0.049026438431791296))
push(move(9.646190635962133,39.01314342035883,33.97646928534942))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987045492197555,-0.01362467256334787,0.049026438431791296,0.9971587633813785,-0.04425681145136089,0.06095683105180744))
push(move(9.880504386544866,39.00636764654071,33.992452286207836))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9971587633813785,-0.04425681145136089,0.06095683105180744,0.9967525304002575,-0.05998702894459848,0.053721034047044876))
push(move(10.10986230063413,38.99256432082894,34.00481377407564))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub15 inherits .../COPOLYFF



DPDPoly_sub16 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9995386407966478,-0.029419139190868675,-0.007551145850676258))
push(move(10.341711936720136,38.976834938707334,34.0087092732785))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9995386407966478,-0.029419139190868675,-0.007551145850676258,0.9998732516305392,0.009910377365574933,-0.012460541490822893))
push(move(10.584836706235865,38.96967911586748,34.00687255529723))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998732516305392,0.009910377365574933,-0.012460541490822893,0.9952567158182214,0.09606806953204186,-0.015329567349237119))
push(move(10.848083728937896,38.98185391040197,34.00239880671044))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9952567158182214,0.09606806953204186,-0.015329567349237119,0.9868880812663651,0.16108588648833508,-0.010161310381021136))
push(move(11.139451418724017,39.02321381090242,33.99833003209408))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9868880812663651,0.16108588648833508,-0.010161310381021136,0.9895176376733668,0.14436747814351095,-0.003588312667891873))
push(move(11.443892990091799,39.07910552872913,33.99626416698239))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9895176376733668,0.14436747814351095,-0.003588312667891873,0.9996998114195088,-0.024195400805467872,0.0038561156182439758))
push(move(11.721169334471883,39.10808460581304,33.99622053380244))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996998114195088,-0.024195400805467872,0.0038561156182439758,0.8486132784056027,-0.5287820218098432,0.015654939296899043))
push(move(11.929762144164716,39.06734619979106,33.99813829720833))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8486132784056027,-0.5287820218098432,0.015654939296899043,0.2373851172141877,-0.9712241113168871,0.01928812385716018))
push(move(12.029782089208798,38.9157839659825,34.001913720633944))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2373851172141877,-0.9712241113168871,0.01928812385716018,-0.07530052725925307,-0.9970947894347364,0.011480917932684954))
push(move(12.02887228447566,38.661852548480404,34.00619123955051))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07530052725925307,-0.9970947894347364,0.011480917932684954,-0.13685239072328645,-0.9905680562404794,0.006808018014049961))
push(move(11.988580514649737,38.37021175281718,34.00819564074031))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub16 inherits .../COPOLYFF



DPDPoly_sub17 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.40273814534130137,-0.91333795849905,-0.06013118867806143))
push(move(11.973364313471551,38.10855531305152,34.005075079008364))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.40273814534130137,-0.91333795849905,-0.06013118867806143,0.7596707081561044,-0.6457199088874621,-0.07711170103149297))
push(move(12.046349797832654,37.94303731070301,33.994177914233575))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7596707081561044,-0.6457199088874621,-0.07711170103149297,0.99663404737718,-0.06362550529511586,-0.051694977362623705))
push(move(12.228816823180907,37.891420744713386,33.97914492618693))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.99663404737718,-0.06362550529511586,-0.051694977362623705,0.9909134930660547,0.13445143760024147,0.003641453948397206))
push(move(12.492811818030994,37.914535001650904,33.97102012217523))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9909134930660547,0.13445143760024147,0.003641453948397206,0.9852343966888661,0.153746844527993,0.07533320236662776))
push(move(12.807560109722605,37.969947142246085,33.98127171832432))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9852343966888661,0.153746844527993,0.07533320236662776,0.9852395341655619,0.09424719931168214,0.14290040496489445))
push(move(13.142244523634702,38.015879645682226,34.02067718408778))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9852395341655619,0.09424719931168214,0.14290040496489445,0.9893875014180324,0.02058097082146784,0.14383600271777788))
push(move(13.464605390828142,38.03279955063792,34.07657040812951))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9893875014180324,0.02058097082146784,0.14383600271777788,0.9989326586600286,-0.04462997535055003,-0.011904148966481726))
push(move(13.74062224742894,38.028326937017496,34.107668640703686))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9989326586600286,-0.04462997535055003,-0.011904148966481726,0.8301564138566682,-0.10787274037875069,-0.5469952471601697))
push(move(13.936167673036692,38.01173125053904,34.07095086250177))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8301564138566682,-0.10787274037875069,-0.5469952471601697,0.4865634649293693,-0.11540335116682772,-0.8659896426259337))
push(move(14.018358915932742,37.992237092941025,33.92466621477783))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub17 inherits .../COPOLYFF



DPDPoly_sub18 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.16248285646849875,-0.015731800788595058,-0.9865859474966108))
push(move(14.000054006758177,37.97742107823443,33.673741431553694))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16248285646849875,-0.015731800788595058,-0.9865859474966108,-0.0917492025974172,0.011153687957214404,-0.9957196789597419))
push(move(13.952043045043059,37.97277259468492,33.382221814140294))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0917492025974172,0.011153687957214404,-0.9957196789597419,0.24710497326142886,0.09377365963952261,-0.9644405803092689))
push(move(13.94884180774813,37.98364679868965,33.11795464634471))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.24710497326142886,0.09377365963952261,-0.9644405803092689,0.8328085669833402,0.17133376676154666,-0.5263787905362974))
push(move(14.063388433215778,38.015026962920125,32.94764532882429))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8328085669833402,0.17133376676154666,-0.5263787905362974,0.9907966382955653,0.1199984550151977,-0.06262900554992175))
push(move(14.305658731032372,38.0570547701422,32.89242759491009))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9907966382955653,0.1199984550151977,-0.06262900554992175,0.9913067666095077,-0.004830210089459487,0.13148217957082564))
push(move(14.602881575493221,38.08036665127025,32.913543558899065))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9913067666095077,-0.004830210089459487,0.13148217957082564,0.9376560673105286,-0.27645690618876056,0.21064823392635476))
push(move(14.876658433757967,38.05427253499756,32.968162259473544))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9376560673105286,-0.27645690618876056,0.21064823392635476,0.5875419464212401,-0.7923488001118688,0.16424932315483762))
push(move(15.049812002028826,37.94859445109023,33.01394828971653))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5875419464212401,-0.7923488001118688,0.16424932315483762,0.04544041612033042,-0.9986539570079705,0.025008853135114927))
push(move(15.098263187713245,37.755420236936,33.030112612238575))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04544041612033042,-0.9986539570079705,0.025008853135114927,-0.10745180896568148,-0.9940342146548168,-0.01871066128131279))
push(move(15.070350973530905,37.49720498517713,33.0252522381769))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub18 inherits .../COPOLYFF



DPDPoly_sub19 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.06598664525681686,-0.9967055776085725,-0.047156698481901495))
push(move(15.019616559280266,37.1985852473422,33.010075151693904))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06598664525681686,-0.9967055776085725,-0.047156698481901495,0.004974930134427056,-0.9992976128716129,-0.037142037898501304))
push(move(14.998802752558012,36.884199856622644,32.995200772127525))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.004974930134427056,-0.9992976128716129,-0.037142037898501304,0.09247268422615906,-0.9955897139445682,-0.015808989840646884))
push(move(15.022702134248519,36.578796101204425,32.9870387392594))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09247268422615906,-0.9955897139445682,-0.015808989840646884,0.04571786146459347,-0.998897593078286,0.010652496679712058))
push(move(15.052388892560455,36.30727478688044,32.98603976690758))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04571786146459347,-0.998897593078286,0.010652496679712058,-0.26647506913624674,-0.9622949295438433,0.054584852322250604))
push(move(15.044865338441436,36.09454835614414,32.99220287974002))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.26647506913624674,-0.9622949295438433,0.054584852322250604,-0.8391149522129936,-0.5362493680227912,0.09122890039753012))
push(move(14.957639049437548,35.96511409654723,33.005448360031075))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8391149522129936,-0.5362493680227912,0.09122890039753012,-0.9961644351191644,-0.06674881462231193,0.05657750392366438))
push(move(14.774573261968968,35.92181403076039,33.02158913827077))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9961644351191644,-0.06674881462231193,0.05657750392366438,-0.9954943153379461,0.09481854884129469,-0.0007147905041934064))
push(move(14.518254742184183,35.93567279083619,33.03040334385827))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9954943153379461,0.09481854884129469,-0.0007147905041934064,-0.9905781014854302,0.11545244362003691,-0.07365974558524517))
push(move(14.214364469193114,35.975172632573305,33.0211868939593))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9905781014854302,0.11545244362003691,-0.07365974558524517,-0.9881409675334759,0.10278753066341391,-0.11407081932783628))
push(move(13.888631371102973,36.00905575442342,32.98358432246175))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub19 inherits .../COPOLYFF



DPDPoly_sub20 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9922900874723939,-0.01245673409535647,-0.12330941602208022))
push(move(13.569540372585545,36.02100525244711,32.927277839595654))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9922900874723939,-0.01245673409535647,-0.12330941602208022,-0.9995253797960378,-0.028920972085838315,-0.010610962123978787))
push(move(13.289780064870673,36.017493275649564,32.89251272342045))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9995253797960378,-0.028920972085838315,-0.010610962123978787,-0.8804250638708209,-0.05655568022548185,0.47080055431391965))
push(move(13.082392797872167,36.00690978104163,32.9221062806052))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8804250638708209,-0.05655568022548185,0.47080055431391965,-0.2623874272828229,-0.03260747535180494,0.9644115255196212))
push(move(12.97985795613629,35.99758487413345,33.05824119546642))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2623874272828229,-0.03260747535180494,0.9644115255196212,0.07345042710673477,-0.005246360286164012,0.9972850698078188))
push(move(12.978838051027079,35.9940407998931,33.30272433236887))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07345042710673477,-0.005246360286164012,0.9972850698078188,0.10172761516326853,0.006553682888270948,0.9947907023860817))
push(move(13.019274180332776,35.99476948256392,33.59342136320365))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10172761516326853,0.006553682888270948,0.9947907023860817,-0.1204871644116293,0.013509689673901914,0.9926229553546301))
push(move(13.036084542589407,35.99772883830394,33.862535721430014))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1204871644116293,0.013509689673901914,0.9926229553546301,-0.7259186593243444,0.014455172918305616,0.687628641070635))
push(move(12.964724178997214,36.00088593150977,34.04282677335436))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7259186593243444,0.014455172918305616,0.687628641070635,-0.9945452858508145,0.005359557131180502,0.10416789111467747))
push(move(12.778642063708128,36.00285527430465,34.10639888658375))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9945452858508145,0.005359557131180502,0.10416789111467747,-0.9981012413409955,0.0017365308427586402,-0.061570256570813865))
push(move(12.51376842623692,36.00331611056239,34.090059524260106))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub20 inherits .../COPOLYFF



DPDPoly_sub21 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9872228386537326,-0.010645244334319723,-0.1589897657509082))
push(move(12.211850967923462,36.00204681864,34.03664049127527))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9872228386537326,-0.010645244334319723,-0.1589897657509082,-0.9931462964093717,-0.013095117889915554,-0.11614194684005281))
push(move(11.914414771049008,35.99883955796325,33.98873913667189))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9931462964093717,-0.013095117889915554,-0.11614194684005281,-0.9995013602503608,-0.013237646707630736,-0.02866697694773868))
push(move(11.645362481576193,35.99457739189107,33.97039337752706))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9995013602503608,-0.013237646707630736,-0.02866697694773868,-0.999281062386124,-0.0010842621540835705,0.03789700162335217))
push(move(11.398497967960369,35.99200662642216,33.973941983121854))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999281062386124,-0.0010842621540835705,0.03789700162335217,-0.9976346786959203,0.02493998087379544,0.06405501711265521))
push(move(11.164680803607123,35.99405583197044,33.98862287773075))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9976346786959203,0.02493998087379544,0.06405501711265521,-0.9973112802372711,0.05290235696694463,0.050710461828277285))
push(move(10.934785520907182,36.00359902573166,34.003715515824396))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9973112802372711,0.05290235696694463,0.050710461828277285,-0.9984133321579577,0.05235614389446131,0.02072805745230699))
push(move(10.70101916293838,36.018650754451116,34.01219876260871))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9984133321579577,0.05235614389446131,0.02072805745230699,-0.9999458751441666,0.006621042388339408,-0.008025495614521259))
push(move(10.457952934314328,36.02860381554478,34.013615036325255))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999458751441666,0.006621042388339408,-0.008025495614521259,-0.9965178095862997,-0.0767588255234969,-0.03256282975382975))
push(move(10.200400840072806,36.021965548999965,34.00818083498425))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9965178095862997,-0.0767588255234969,-0.03256282975382975,-0.9913985447436124,-0.12359003189020787,-0.04306308741399087))
push(move(9.923290756964397,35.987420366146864,33.99614408569158))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub21 inherits .../COPOLYFF



DPDPoly_sub22 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9902236556348935,-0.1355762645888647,-0.03280530903981701))
push(move(9.63304190513747,35.93152180100584,33.980924377081784))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9902236556348935,-0.1355762645888647,-0.03280530903981701,-0.9995905645930352,-0.028253630823870297,-0.004520566540371399))
push(move(9.357256218244714,35.893762661398114,33.971787820268794))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9995905645930352,-0.028253630823870297,-0.004520566540371399,-0.9282161126078442,0.35993875419298604,0.09412195028357163))
push(move(9.125818102729433,35.91718501696052,33.97863049893721))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9282161126078442,0.35993875419298604,0.09412195028357163,-0.517553377503143,0.8335528216011362,0.1932050595504003))
push(move(8.968469697888832,36.04452425008758,34.01121112378919))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.517553377503143,0.8335528216011362,0.1932050595504003,-0.13031021630307096,0.9780615901621253,0.16252622365815705))
push(move(8.89856581724026,36.28318935973704,34.063464823780606))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13031021630307096,0.9780615901621253,0.16252622365815705,0.08292767674681249,0.9962203221887125,0.025847051816295378))
push(move(8.898070031574754,36.57291881143102,34.09901538225355))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08292767674681249,0.9962203221887125,0.025847051816295378,0.24347665834907484,0.9292224268706083,-0.27796546231477204))
push(move(8.94539928738251,36.84580556393597,34.078061966459515))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.24347665834907484,0.9292224268706083,-0.27796546231477204,0.32549614336174704,0.5729822334170168,-0.7521593054965658))
push(move(9.018936164705629,37.034201311017966,33.96102839491058))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.32549614336174704,0.5729822334170168,-0.7521593054965658,0.21617297931033894,0.11250806531155837,-0.9698511113856301))
push(move(9.09250656616181,37.1047636464383,33.73812519333113))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.21617297931033894,0.11250806531155837,-0.9698511113856301,0.13594822671541099,-0.04362672093492006,-0.9897549135383982))
push(move(9.130863875451897,37.092454522085276,33.45886936000974))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub22 inherits .../COPOLYFF



DPDPoly_sub23 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.5258204518747764,-0.18301330965794174,-0.8306738113593399))
push(move(9.097687322870696,37.040322878653996,33.17979956495478))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5258204518747764,-0.18301330965794174,-0.8306738113593399,-0.7407706638698842,-0.12904629675251938,-0.6592464462128192))
push(move(8.956871138092012,36.991311403467236,32.95734279954344))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7407706638698842,-0.12904629675251938,-0.6592464462128192,-0.9623846119311069,-0.028575341614541366,-0.2701838421701511))
push(move(8.705437545152392,36.97199082436865,32.8307181493414))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9623846119311069,-0.028575341614541366,-0.2701838421701511,-0.996489400980502,0.029970252734694763,0.07817069581716067))
push(move(8.408980866392337,36.97504332157253,32.80352581529384))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.996489400980502,0.029970252734694763,0.07817069581716067,-0.8722778617034653,0.054876068319857266,0.4859217520422239))
push(move(8.141598656841333,36.988948750833,32.87494910471803))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8722778617034653,0.054876068319857266,0.4859217520422239,-0.4215268413875674,0.04017061998008815,0.9059257382811441))
push(move(7.977149589015875,37.00221035597792,33.04408701729387))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4215268413875674,0.04017061998008815,0.9059257382811441,0.017427640078262162,0.00870853471455624,0.9998102013804558))
push(move(7.946252413562431,37.00756483629381,33.29477809847877))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.017427640078262162,0.00870853471455624,0.9998102013804558,0.13966215847401034,-0.008045607745960503,0.990166526240096))
push(move(7.98645644889773,37.00686096340387,33.57801435403659))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13966215847401034,-0.008045607745960503,0.990166526240096,-0.009462317594052489,-0.016535618899147307,0.9998185024560065))
push(move(8.023229399211253,37.00313037359637,33.8405238846898))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.009462317594052489,-0.016535618899147307,0.9998185024560065,-0.21258071792581545,-0.019321912435023837,0.9769524564000023))
push(move(7.982186963888994,36.9993999395798,34.02914168782805))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub23 inherits .../COPOLYFF



DPDPoly_sub24 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999717537952019,-8.707394723778728e-05,0.007515585797258004))
push(move(7.820806622214177,36.99767098638959,34.1137164677758))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999717537952019,-8.707394723778728e-05,0.007515585797258004,-0.9959395892188704,0.001882743648676373,-0.09000438824246983))
push(move(7.567894254560468,36.99764896368938,34.11561730606556))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9959395892188704,0.001882743648676373,-0.09000438824246983,-0.9788993450994902,0.004142583987608746,-0.2043010307406569))
push(move(7.26194433453824,36.998727470571964,34.06321133788784))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9788993450994902,0.004142583987608746,-0.2043010307406569,-0.9711859169136445,0.004720598410759409,-0.23827637469805543))
push(move(6.941424885298888,37.00030010651711,33.98487011687975))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9711859169136445,0.004720598410759409,-0.23827637469805543,-0.980944250181607,0.0037619681489901254,-0.1942529938798648))
push(move(6.637933421914699,37.00176057151703,33.9101128884123))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.980944250181607,0.0037619681489901254,-0.1942529938798648,-0.9998119899598732,0.0003230349817039862,-0.019387634741737714))
push(move(6.367066176361099,37.0025027996556,33.87113185015207))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998119899598732,0.0003230349817039862,-0.019387634741737714,-0.9256965572526679,-0.007326720675908295,0.3781959849796076))
push(move(6.142146127308237,37.00192075827339,33.90049893791566))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9256965572526679,-0.007326720675908295,0.3781959849796076,-0.5802028109213546,-0.01459017097590203,0.8143413443451418))
push(move(5.976486026139117,36.99941142847159,34.0307044913911))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5802028109213546,-0.01459017097590203,0.8143413443451418,-0.22461208095486604,-0.013050928341825545,0.9743608604405974))
push(move(5.880139568369685,36.995332164733746,34.2682372001527))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22461208095486604,-0.013050928341825545,0.9743608604405974,-0.08595639871985737,-0.010242455459257784,0.9962462494911978))
push(move(5.8552620937705395,36.99236779641079,34.55657048464715))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub24 inherits .../COPOLYFF



DPDPoly_sub25 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.5321017466324035,0.03671071197481511,0.845884185250586))
push(move(5.902835791351879,36.993548855047706,34.829818043718774))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5321017466324035,0.03671071197481511,0.845884185250586,0.759001520817745,0.05641281637276632,0.6486403360455183))
push(move(6.023831173301816,37.0018965566765,35.022164865971384))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.759001520817745,0.05641281637276632,0.6486403360455183,0.9876201339233499,0.05905004160157088,0.14532571574252467))
push(move(6.2145631810523145,37.016718004925806,35.09621930019061))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9876201339233499,0.05905004160157088,0.14532571574252467,0.9938204450812319,0.013881299414126436,-0.11012825461759353))
push(move(6.459603088529216,37.027951462646016,35.08628756183962))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9938204450812319,0.013881299414126436,-0.11012825461759353,0.9866398603440959,-0.05800816842427058,-0.1522394113764391))
push(move(6.741699161021603,37.02408083631666,35.037805765122506))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9866398603440959,-0.05800816842427058,-0.1522394113764391,0.9870978212085184,-0.13970924580629937,-0.0782254306580097))
push(move(7.043596045232411,36.99361637934702,34.99617692719987))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9870978212085184,-0.13970924580629937,-0.0782254306580097,0.9861824794038052,-0.1652481146809866,0.011712297440851614))
push(move(7.346190343405048,36.938523959001344,34.98990110759523))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9861824794038052,-0.1652481146809866,0.011712297440851614,0.9973915531363856,-0.05688778318459852,0.04442825515964766))
push(move(7.625525359933173,36.89610630982111,35.00308815242002))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9973915531363856,-0.05688778318459852,0.04442825515964766,0.9519020339462133,0.3058446290012468,-0.01848190142143848))
push(move(7.8568572673491825,36.90939727434322,35.01264848331466))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9519020339462133,0.3058446290012468,-0.01848190142143848,0.8137099402863139,0.5745878156763494,-0.0878918378208408))
push(move(8.015459289911936,37.021391469319035,34.99551728882509))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub25 inherits .../COPOLYFF



DPDPoly_sub26 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.016481211962139728,0.9882611267028036,-0.1518825701006013))
push(move(8.088082599940568,37.248679643824126,34.94530098759188))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.016481211962139728,0.9882611267028036,-0.1518825701006013,-0.061290858656791083,0.9961970218183641,-0.06192676614627327))
push(move(8.092868285619497,37.53564319553186,34.90119851246571))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.061290858656791083,0.9961970218183641,-0.06192676614627327,-0.1979265767737979,0.9521467484678287,0.23289834604124465))
push(move(8.053274814228956,37.81443142511619,34.91013206268086))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1979265767737979,0.9521467484678287,0.23289834604124465,-0.2583023782883508,0.6263074282705904,0.7355398606898615))
push(move(7.992760708046673,38.01722129401981,35.01899415983626))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2583023782883508,0.6263074282705904,0.7355398606898615,-0.16841728974168502,0.15112135526583473,0.9740626019402874))
push(move(7.934835038206491,38.10161310736445,35.247400255614224))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16841728974168502,0.15112135526583473,0.9740626019402874,-0.023510116309399535,-0.09355220153019049,0.9953367570927806))
push(move(7.903150870053188,38.097628478956096,35.53726394133707))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.023510116309399535,-0.09355220153019049,0.9953367570927806,0.22020769734820345,-0.20363816571565851,0.9539602022582306))
push(move(7.921386739234554,38.048099208959876,35.81675457572835))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.22020769734820345,-0.20363816571565851,0.9539602022582306,0.6951131667977137,-0.19628504703077648,0.6915850386297983))
push(move(8.01321290201462,37.99584806631174,36.014062888582124))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6951131667977137,-0.19628504703077648,0.6915850386297983,0.9897217041828472,-0.05603912697486134,0.13156961851923069))
push(move(8.191432652437278,37.971844035981846,36.08542983931817))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9897217041828472,-0.05603912697486134,0.13156961851923069,0.998112650972213,0.00012836486478952686,-0.06140944138878569))
push(move(8.436597510223312,37.9718755660439,36.07034593375887))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub26 inherits .../COPOLYFF



DPDPoly_sub27 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9956492954667385,0.05253694142958408,-0.07695680750792545))
push(move(8.723303442802441,37.98523473246455,36.023674383173514))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9956492954667385,0.05253694142958408,-0.07695680750792545,0.9989599901747682,0.04364670541849961,0.013187233831922029))
push(move(9.026147552004788,38.00121476007055,36.00026662712637))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9989599901747682,0.04364670541849961,0.013187233831922029,0.9908201511358712,0.022991313573628294,0.13321721961987))
push(move(9.321981592275353,38.01139226538633,36.03157751125153))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9908201511358712,0.022991313573628294,0.13321721961987,0.9953266044563697,-0.0022295641103717875,0.0965400409427666))
push(move(9.594630593558396,38.01440602576561,36.07670000417265))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9953266044563697,-0.0022295641103717875,0.0965400409427666,0.9778762375724455,-0.03631278172834737,-0.20600836360281044))
push(move(9.829263573186129,38.01025593717666,36.080780479390214))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9778762375724455,-0.03631278172834737,-0.20600836360281044,0.6926329534959623,-0.06428390235050863,-0.7184199131636388))
push(move(10.011049976015817,37.99894256979682,35.988973283493245))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6926329534959623,-0.06428390235050863,-0.7184199131636388,0.29545769936747085,-0.05355833083666102,-0.9538533708502958))
push(move(10.126552869730723,37.98266424375164,35.772423001551424))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.29545769936747085,-0.05355833083666102,-0.9538533708502958,-0.0047615225965378614,-0.015579331975523705,-0.9998672973538835))
push(move(10.166828032414912,37.97070430523449,35.486060600835486))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0047615225965378614,-0.015579331975523705,-0.9998672973538835,-0.33655466170192655,0.060492615953589735,-0.9397188957884125))
push(move(10.123834850008716,37.973771094405684,35.20166879877317))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.33655466170192655,0.060492615953589735,-0.9397188957884125,-0.5340649338540512,0.11452779545259402,-0.837650303226971))
push(move(9.989534519735033,38.002571189262696,34.99102641196562))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub27 inherits .../COPOLYFF



DPDPoly_sub28 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9864124795541636,0.16382789574583323,0.012281724443219136))
push(move(9.766750856536913,38.05724313098784,34.902518233428545))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9864124795541636,0.16382789574583323,0.012281724443219136,-0.9931297124715172,0.06909251982500471,0.09444362292115321))
push(move(9.494815853284592,38.10240733996318,34.90590406931935))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9931297124715172,0.06909251982500471,0.09444362292115321,-0.9607660247136509,-0.20905709024959848,0.18227391138695506))
push(move(9.220722948884589,38.09523055957921,34.95444383102889))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9607660247136509,-0.20905709024959848,0.18227391138695506,-0.7532771923175057,-0.6470200738237076,0.11806140607082248))
push(move(8.991464987515716,37.99288112373002,35.001398423557205))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7532771923175057,-0.6470200738237076,0.11806140607082248,-0.3607852317895181,-0.9326481918669016,0.001169072274475161))
push(move(8.846183748211182,37.77352377787774,35.0131454950526))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3607852317895181,-0.9326481918669016,0.001169072274475161,0.003271306598215398,-0.9991943227511811,-0.04000004918683235))
push(move(8.796507050075398,37.488904930076146,35.002030156508745))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.003271306598215398,-0.9991943227511811,-0.04000004918683235,0.3912923471178601,-0.920263789894697,-0.0022036550649262056))
push(move(8.848038906144213,37.20688068930186,34.99046146763338))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3912923471178601,-0.920263789894697,-0.0022036550649262056,0.8017765628723599,-0.5887242196525966,0.10275279277482469))
push(move(9.006382987809344,36.99530665939857,35.00084819070594))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8017765628723599,-0.5887242196525966,0.10275279277482469,0.9745534400451803,-0.16689144505703632,0.14964236720554475))
push(move(9.26347799151241,36.90183429274672,35.043702642576775))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9745534400451803,-0.16689144505703632,0.14964236720554475,0.9900257503279923,-0.005186197775242453,0.1407910403403998))
push(move(9.561320641547722,36.90027405970382,35.08605868891428))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub28 inherits .../COPOLYFF



DPDPoly_sub29 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.8585074391633676,0.2664284542869601,-0.438156200055891))
push(move(9.830501446865398,36.94757193557507,35.085020179496595))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8585074391633676,0.2664284542869601,-0.438156200055891,0.5623163003034695,0.21855038933841744,-0.7975187181082614))
push(move(10.00161102413505,37.00067393342156,34.997691032712844))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5623163003034695,0.21855038933841744,-0.7975187181082614,-0.03551170963720197,0.0553235513165473,-0.997836771796053))
push(move(10.03249642409048,37.02607949598746,34.798535908608635))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03551170963720197,0.0553235513165473,-0.997836771796053,-0.15500292886039818,-0.02123026720516543,-0.98768586493839))
push(move(9.98490231246646,37.02670436892789,34.52819612293269))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15500292886039818,-0.02123026720516543,-0.98768586493839,0.029009100280149934,-0.05047494356913702,-0.998303937772775))
push(move(9.94532548582444,37.01413996474428,34.243078639563564))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.029009100280149934,-0.05047494356913702,-0.998303937772775,0.5480982501380227,-0.04372284993915995,-0.8352703877121678))
push(move(10.000262740486313,36.999977695917956,33.9995904223075))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5480982501380227,-0.04372284993915995,-0.8352703877121678,0.9236660907753624,-0.01229738006226868,-0.38300094934003))
push(move(10.206442709029243,36.99331014241984,33.845150924578746))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9236660907753624,-0.01229738006226868,-0.38300094934003,0.9999627644300397,0.0056071739062361434,-0.00655967638060215))
push(move(10.502236514406349,36.993294585710885,33.7914454726604))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999627644300397,0.0056071739062361434,-0.00655967638060215,0.9235101709765291,0.012427883379103258,0.38337254964018663))
push(move(10.796603616023905,36.99661940048013,33.84127951586227))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9235101709765291,0.012427883379103258,0.38337254964018663,0.7909030146630706,0.013136915946836738,0.611800492674101))
push(move(10.998503473288183,36.99997296141666,33.997458503494194))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub29 inherits .../COPOLYFF



DPDPoly_sub30 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.15257606641785534,-0.002730056181026027,0.9882879594276673))
push(move(11.046333485591623,37.000841867954676,34.25146806071963))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15257606641785534,-0.002730056181026027,0.9882879594276673,-0.16166932018002048,-0.0029039779283719573,0.9868407155284593))
push(move(11.000577125118625,37.00002314561071,34.54784783498155))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16166932018002048,-0.0029039779283719573,0.9868407155284593,-0.008365370799969065,-0.00017798370859920123,0.9999649938338735))
push(move(10.953362549689677,36.999171881679366,34.81896908569249))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.008365370799969065,-0.00017798370859920123,0.9999649938338735,0.7405162608965145,0.012443619784393817,0.6719232275152474))
push(move(10.996817970515995,36.99994316490294,34.99720305173456))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7405162608965145,0.012443619784393817,0.6719232275152474,0.9999069935509519,0.013565200154495454,-0.0014105292145879735))
push(move(11.194734637003354,37.00322789319417,35.037983198554166))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999069935509519,0.013565200154495454,-0.0014105292145879735,0.9902544297409253,0.005959531416448261,-0.13914254692139028))
push(move(11.48831868245282,37.00661109059653,34.996509711136234))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9902544297409253,0.005959531416448261,-0.13914254692139028,0.9999236924121423,-0.012188428526835448,-0.0020128494513349253))
push(move(11.785635502920682,37.00678404216829,34.95495458591438))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999236924121423,-0.012188428526835448,-0.0020128494513349253,0.7650056283257528,-0.05869429213571946,0.641343409337468))
push(move(11.994749948758043,37.00043801825115,34.99549026344812))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7650056283257528,-0.05869429213571946,0.641343409337468,0.030998017615850092,-0.05837348412873382,0.9978134391030018))
push(move(12.05055192236808,36.98645859469593,35.177047591961546))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.030998017615850092,-0.05837348412873382,0.9978134391030018,-0.14844245014281682,-0.04579928852911781,0.987859941573614))
push(move(12.008983915497062,36.97363352249836,35.45367579905074))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub30 inherits .../COPOLYFF



DPDPoly_sub31 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.1391104263747086,0.09935907487752842,0.9852796879634373))
push(move(11.960119195998168,36.97354247081692,35.74985274063923))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1391104263747086,0.09935907487752842,0.9852796879634373,0.5022815971300518,0.1779729324534711,0.8461907778381873))
push(move(11.994032996653617,36.99776526954252,35.99005457020914))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5022815971300518,0.1779729324534711,0.8461907778381873,0.9345069501560748,0.20269671394040542,0.2925932368797218))
push(move(12.176420862960738,37.05018442263013,36.114254854633785))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9345069501560748,0.20269671394040542,0.2925932368797218,0.9953763374503973,0.08467849101437135,-0.045337622383202825))
push(move(12.458203568391209,37.09844493766413,36.13538593454659))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9953763374503973,0.08467849101437135,-0.045337622383202825,0.959131088097602,-0.15910424623810535,-0.2339944329972711))
push(move(12.756557078646994,37.099537674740716,36.08783068149644))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.959131088097602,-0.15910424623810535,-0.2339944329972711,0.7017732497945107,-0.6232583496516569,-0.34505555416822975))
push(move(12.98865276685038,37.01045204395462,36.0059748863931))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7017732497945107,-0.6232583496516569,-0.34505555416822975,0.1949952513798476,-0.9460389969296191,-0.2588186010079454))
push(move(13.090337015953704,36.803101278891305,35.923714107843445))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1949952513798476,-0.9460389969296191,-0.2588186010079454,-0.08677697369369107,-0.9936854788204116,-0.07112612753421864))
push(move(13.089186361335715,36.52270323873185,35.87253592264978))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08677697369369107,-0.9936854788204116,-0.07112612753421864,-0.16634668233211292,-0.9622899032923522,0.2152369004113715))
push(move(13.040895575554291,36.2369460042181,35.883189783870854))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16634668233211292,-0.9622899032923522,0.2152369004113715,-0.1593575657775592,-0.896177705759917,0.41409019057246754))
push(move(13.001166778735902,36.01352352777914,35.986424951686516))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub31 inherits .../COPOLYFF



DPDPoly_sub32 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.12981841463003643,-0.03778969621306902,0.9908173989606096))
push(move(13.012447045196884,35.90597201922219,36.20070805061423))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12981841463003643,-0.03778969621306902,0.9908173989606096,0.09154755976460242,0.058554023502991714,0.9940776984887839))
push(move(13.049243362495648,35.895260737186874,36.48154980562404))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09154755976460242,0.058554023502991714,0.9940776984887839,-0.07520440944450206,0.19487025180919468,0.9779416556011532))
push(move(13.06435402589771,35.93917183990273,36.764344831793956))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07520440944450206,0.19487025180919468,0.9779416556011532,-0.5329251558064743,0.22279377197527103,0.8163049145250053))
push(move(13.010567759076043,35.99547726216089,36.9844788747959))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5329251558064743,0.22279377197527103,0.8163049145250053,-0.956327674083849,0.09303021253239196,0.2770970215241465))
push(move(12.851443674713572,36.02818077430199,37.09046898662363))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.956327674083849,0.09303021253239196,0.2770970215241465,-0.9981407944175568,-0.009285523247868386,-0.06023897058800151))
push(move(12.608156869285551,36.034623228148355,37.10107788370427))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9981407944175568,-0.009285523247868386,-0.06023897058800151,-0.9849065254773717,-0.054773225901066605,-0.16419205156304614))
push(move(12.32106867940929,36.02324679166494,37.058460232025645))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9849065254773717,-0.054773225901066605,-0.16419205156304614,-0.9861380482666543,-0.07586026310076498,-0.14757022139685463))
push(move(12.030553512965332,36.00250119595692,37.00478663411797))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9861380482666543,-0.07586026310076498,-0.14757022139685463,-0.9954119165874161,-0.07140181548473284,-0.0636937756868833))
push(move(11.769724589178997,35.98083375647434,36.9759545731028))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9954119165874161,-0.07140181548473284,-0.0636937756868833,-0.9981592003173477,-0.059223477305417514,-0.013068686150017102))
push(move(11.531146905342371,35.96667829906856,36.97283092622215))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub32 inherits .../COPOLYFF



DPDPoly_sub33 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.993396577576108,0.10047619759296579,0.05538748394118295))
push(move(11.293316579395206,35.968463969150534,36.98412811993672))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.993396577576108,0.10047619759296579,0.05538748394118295,-0.9890108158027979,0.14236097468128295,0.03988682881452711))
push(move(11.034715833443487,35.99461990750834,36.998546575754766))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9890108158027979,0.14236097468128295,0.03988682881452711,-0.984935818668713,0.17230499456148962,0.01457470248604968))
push(move(10.741344555867252,36.04791636139,37.006389164266146))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.984935818668713,0.17230499456148962,0.01457470248604968,-0.995100512774632,0.09879824725995698,-0.0037250253724123283))
push(move(10.443035333259225,36.09812868791211,37.00730203686556))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.995100512774632,0.09879824725995698,-0.0037250253724123283,-0.9839503738308627,-0.17774505922057623,-0.015759307116088618))
push(move(10.18546325215462,36.10310686504903,37.004308297123785))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9839503738308627,-0.17774505922057623,-0.015759307116088618,-0.6180237685790473,-0.7859821213970511,-0.01669509854848135))
push(move(10.014325016249007,36.020684598543276,37.0004356564776))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6180237685790473,-0.7859821213970511,-0.01669509854848135,-0.04796613232948169,-0.9988363864390147,-0.005012312320850751))
push(move(9.963150205806926,35.82037650957363,36.99830280282715))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04796613232948169,-0.9988363864390147,-0.005012312320850751,0.11847982588230375,-0.9929560260416699,0.0009280120871792133))
push(move(9.99137735840072,35.5428275246192,36.99803769728052))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11847982588230375,-0.9929560260416699,0.0009280120871792133,0.04021157172278043,-0.999184909548662,0.0035420375232117743))
push(move(10.030556639242095,35.25545650082955,36.998830774441856))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04021157172278043,-0.999184909548662,0.0035420375232117743,-0.07970561596328395,-0.9968082316560005,0.004512658501478673))
push(move(10.01218758874403,35.02573089714549,36.99987076705583))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub33 inherits .../COPOLYFF



DPDPoly_sub34 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9976224491267918,-0.0689154681590262,0.00032748539483059246))
push(move(9.879053929055736,34.9099997615282,37.00045072486543))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9976224491267918,-0.0689154681590262,0.00032748539483059246,-0.9988393958325745,0.048164267699683495,-0.0002542631911237475))
push(move(9.645724646130361,34.89388144263703,37.000527318904))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9988393958325745,0.048164267699683495,-0.0002542631911237475,-0.9867306703134083,0.16236356995511297,-0.0008095766074568622))
push(move(9.354901806651352,34.93527449863225,37.0003172974177))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9867306703134083,0.16236356995511297,-0.0008095766074568622,-0.9881037990155852,0.15378668095432257,-0.0007342561006926608))
push(move(9.04935339066901,34.992012542610404,37.00003801799109))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9881037990155852,0.15378668095432257,-0.0007342561006926608,-0.9968515709370704,0.07928956131135156,-0.0003331476371798076))
push(move(8.766776886011069,35.02680919328873,36.999880264070214))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9968515709370704,0.07928956131135156,-0.0003331476371798076,-0.9999884646824709,-0.004802698321619711,6.775563397892188e-05))
push(move(8.51116114820982,35.03482034675084,36.99985815422887))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999884646824709,-0.004802698321619711,6.775563397892188e-05,-0.9978637927482026,-0.06532820171332934,0.00027781842046564726))
push(move(8.272743857889955,35.02443647432368,36.99991373797737))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9978637927482026,-0.06532820171332934,0.00027781842046564726,-0.9958811063214913,-0.090668393270979,0.00025403452840118987))
push(move(8.041722131738393,35.00408708737915,36.99998885223295))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9958811063214913,-0.090668393270979,0.00025403452840118987,-0.9969750727720503,-0.0777218965609832,0.00010519566945571535))
push(move(7.808865583871556,34.982203423097396,37.00003206645838))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9969750727720503,-0.0777218965609832,0.00010519566945571535,-0.9980582011781062,-0.06228825162621193,2.775738660823653e-05))
push(move(7.568922540974464,34.96722871259024,37.0000387396081))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub34 inherits .../COPOLYFF



DPDPoly_sub35 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.995853887726703,0.09096718230849059,-7.773329241086319e-05))
push(move(7.31833041126761,34.96761127874931,37.00002409416396))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.995853887726703,0.09096718230849059,-7.773329241086319e-05,-0.9903599033003142,0.1385180789387925,-6.117269641926518e-05))
push(move(7.053532747952989,34.991799462990464,37.00000342487257))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9903599033003142,0.1385180789387925,-6.117269641926518e-05,-0.9831832284831626,0.1826218454081283,-2.8445646925986654e-05))
push(move(6.773373421637752,35.043832453552774,36.999990433180336))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9831832284831626,0.1826218454081283,-2.8445646925986654e-05,-0.9934389658960346,0.11436354768371398,7.823871582344371e-07))
push(move(6.494141754964833,35.095703814168004,36.99998724046439))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9934389658960346,0.11436354768371398,7.823871582344371e-07,-0.9900158242018128,-0.1409562601204203,2.3724875859917276e-05))
push(move(6.239832444120431,35.105253075370726,36.99999085337284))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9900158242018128,-0.1409562601204203,2.3724875859917276e-05,-0.7854421508831974,-0.6189350743990967,3.598001242589083e-05))
push(move(6.0344741596096165,35.03025736012566,36.999998256002094))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7854421508831974,-0.6189350743990967,3.598001242589083e-05,-0.3776276757097423,-0.9259575248243377,2.7554372592070814e-05))
push(move(5.9001296753618595,34.83756441336202,37.00000641468417))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3776276757097423,-0.9259575248243377,2.7554372592070814e-05,-0.06032993854779467,-0.9981784902548714,1.0359770276917037e-05))
push(move(5.843913183475121,34.56299454773255,37.00001216067189))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06032993854779467,-0.9981784902548714,1.0359770276917037e-05,0.22811061204983246,-0.9736352234853252,-1.6091352887871928e-05))
push(move(5.866071181332263,34.27405553254516,37.00001226315978))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.22811061204983246,-0.9736352234853252,-1.6091352887871928e-05,0.39311809369547634,-0.9194879897190067,-3.423061055182722e-05))
push(move(5.966814011012057,34.03842195722407,37.000003491015676))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub35 inherits .../COPOLYFF



DPDPoly_sub36 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9961675814040761,-0.08746509503148242,-8.313054073293805e-05))
push(move(6.144390336490549,33.915116750955264,36.999984112623636))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9961675814040761,-0.08746509503148242,-8.313054073293805e-05,0.9993654433129456,0.03561893426054193,-4.7265874280361746e-05))
push(move(6.381435714924928,33.89430379042676,36.99996433110208))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9993654433129456,0.03561893426054193,-4.7265874280361746e-05,0.9856569247555516,0.16876144411219116,4.077495350406448e-05))
push(move(6.653126395001475,33.93324889305135,36.999960051500906))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9856569247555516,0.16876144411219116,4.077495350406448e-05,0.9870450352791779,0.1604433502450024,0.0001723162377742431))
push(move(6.934592337900034,33.989013732769685,36.99998721425241))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9870450352791779,0.1604433502450024,0.0001723162377742431,0.9971019049589679,0.07607704517622983,0.00027262511169370406))
push(move(7.20328647520668,34.02267695690278,37.00005609728586))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9971019049589679,0.07607704517622983,0.00027262511169370406,0.9999656399577457,-0.008287619402803915,0.00018511761300367497))
push(move(7.456023274855145,34.02879795617727,37.000129782596446))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999656399577457,-0.008287619402803915,0.00018511761300367497,0.998610979255409,-0.052688565264397025,-0.0001649270524595548))
push(move(7.699234416055891,34.01856658789296,37.0001479091395))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.998610979255409,-0.052688565264397025,-0.0001649270524595548,0.9986397165144303,-0.05213622744954739,-0.0007282769440561397))
push(move(7.939421134709728,34.003292989561935,37.00004994631801))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9986397165144303,-0.05213622744954739,-0.0007282769440561397,0.999671130381424,-0.025621502543042674,-0.0010815217810885376))
push(move(8.182549903980046,33.99333401823686,36.999795442157925))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999671130381424,-0.025621502543042674,-0.0010815217810885376,0.9999436158705134,-0.010560253141489496,-0.0011163034492494123))
push(move(8.42991715746582,33.990721610122776,36.99951928966901))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub36 inherits .../COPOLYFF



DPDPoly_sub37 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9997832232565887,0.020772613650277386,0.0014159861589636204))
push(move(8.68040811671825,33.99318941890105,36.99944691512776))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997832232565887,0.020772613650277386,0.0014159861589636204,0.999761089807366,0.02170609363704294,0.0025707598503427395))
push(move(8.932887876954274,33.998435220582756,36.999804500489866))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999761089807366,0.02170609363704294,0.0025707598503427395,0.9998049275381201,0.019359991724457435,0.003911213484724801))
push(move(9.186166837057756,34.00417008843637,37.00074741004146))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998049275381201,0.019359991724457435,0.003911213484724801,0.9999592631571628,0.00863341437177423,0.002633663317386054))
push(move(9.438554639188908,34.00822683498928,37.00178265703296))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999592631571628,0.00863341437177423,0.002633663317386054,0.9999397845399168,-0.01077843921282599,-0.0020621693432373127))
push(move(9.688092232461543,34.00850359489198,37.00206936639573))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999397845399168,-0.01077843921282599,-0.0020621693432373127,0.9992277134253865,-0.0380201668154106,-0.009921876737897291))
push(move(9.932818000107128,34.00289912658808,37.000763340904))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992277134253865,-0.0380201668154106,-0.009921876737897291,0.9983518132789199,-0.05527140715659268,-0.015450840547457191))
push(move(10.171453575946323,33.99011191233104,36.99726980809137))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9983518132789199,-0.05527140715659268,-0.015450840547457191,0.9993058364490685,-0.035786712090842804,-0.010351641249336812))
push(move(10.409282371873012,33.97652079388291,36.993389412258026))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9993058364490685,-0.035786712090842804,-0.010351641249336812,0.9996437498616184,0.025716624687421103,0.00714342895872736))
push(move(10.655246100807432,33.972786541891466,36.992258282616575))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996437498616184,0.025716624687421103,0.00714342895872736,0.997796795759378,0.06383124154289148,0.018086651857409305))
push(move(10.918326134606863,33.98961634657107,36.99702702611444))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub37 inherits .../COPOLYFF



DPDPoly_sub38 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9841132647444915,0.17060387764821663,0.04914670981185818))
push(move(11.20497627175684,34.03469017103169,37.0099687792625))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9841132647444915,0.17060387764821663,0.04914670981185818,0.9924105457480532,0.11815499965973608,0.034069117151148735))
push(move(11.49617022971419,34.085170964406785,37.02451103315074))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9924105457480532,0.11815499965973608,0.034069117151148735,0.9948571133683188,-0.09734583995712814,-0.027984128063910707))
push(move(11.758124495377132,34.10054721825238,37.0289581700073))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9948571133683188,-0.09734583995712814,-0.027984128063910707,0.7837961448790068,-0.5977477781656629,-0.16840782930380796))
push(move(11.956875198085065,34.04009141326738,37.01155195926834))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7837961448790068,-0.5977477781656629,-0.16840782930380796,0.2760763953821229,-0.9350178794781914,-0.22253851120406118))
push(move(12.062230452164414,33.86862637865116,36.96361742497364))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2760763953821229,-0.9350178794781914,-0.22253851120406118,-0.0117071717981344,-0.9913749274618621,-0.13053235356982107))
push(move(12.08393991011819,33.60974756790793,36.909128165291726))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0117071717981344,-0.9913749274618621,-0.13053235356982107,-0.13096443911943317,-0.9878457764090924,0.08371999592002992))
push(move(12.055780112199088,33.32240518829939,36.89169757349135))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13096443911943317,-0.9878457764090924,0.08371999592002992,-0.144413694317994,-0.8570454004770968,0.4945885829803209))
push(move(12.011856591891,33.0660335495144,36.95520796488052))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.144413694317994,-0.8570454004770968,0.4945885829803209,-0.06463504850284647,-0.4626968102849888,0.8841572101482471))
push(move(11.983992767659085,32.89637209122345,37.137555150777466))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06463504850284647,-0.4626968102849888,0.8841572101482471,-0.019161034443142464,-0.2432569714211087,0.9697726025280867))
push(move(11.978609748216964,32.82803251329111,37.40999893711559))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub38 inherits .../COPOLYFF



DPDPoly_sub39 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.042069833561393793,0.3852381623379395,0.9218577370628314))
push(move(11.986259921161402,32.84993418132066,37.70217188426939))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.042069833561393793,0.3852381623379395,0.9218577370628314,0.03600002173954114,0.5915210691580326,0.8054854580790959))
push(move(11.99725360051849,32.950604530459955,37.94307153887179))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03600002173954114,0.5915210691580326,0.8054854580790959,0.010335191125128877,0.9407842826797725,0.33884822160830774))
push(move(12.002603010530786,33.118469621856384,38.06784168642584))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.010335191125128877,0.9407842826797725,0.33884822160830774,-0.008179241998120815,0.9987776094055566,-0.04874819945862122))
push(move(12.001539831045976,33.340768414550716,38.08359933115523))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.008179241998120815,0.9987776094055566,-0.04874819945862122,-0.00540122758003372,0.9898296441926075,-0.14215520468194157))
push(move(11.998627126364731,33.603969877694006,38.04414545706916))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00540122758003372,0.9898296441926075,-0.14215520468194157,0.011115758343697055,0.9985638323542654,-0.052409089196506276))
push(move(11.998518106898771,33.894529961005915,38.00407040772564))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.011115758343697055,0.9985638323542654,-0.052409089196506276,0.02764564891554774,0.9955012314024682,0.09062569377504388))
push(move(12.005242852153517,34.19828151106993,38.01295332853925))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02764564891554774,0.9955012314024682,0.09062569377504388,0.025311833639165327,0.9908474417529706,0.1325920746101238))
push(move(12.015148372582324,34.493374647817234,38.058586377665044))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.025311833639165327,0.9908474417529706,0.1325920746101238,-0.013258412787358327,0.9994058718722882,-0.031813798225793846))
push(move(12.01940802688802,34.752786069994826,38.08715537695807))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.013258412787358327,0.9994058718722882,-0.031813798225793846,-0.051153139777573346,0.9755412750037422,-0.21378161065669116))
push(move(12.009098659397607,34.949395966275105,38.044069982854495))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub39 inherits .../COPOLYFF



DPDPoly_sub40 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.14447370281411304,0.10593497613178268,-0.983821696257578))
push(move(11.977014990768154,35.05850790488306,37.88013872639171))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14447370281411304,0.10593497613178268,-0.983821696257578,-0.09537748164265031,0.00877056923652267,-0.9954025382280143))
push(move(11.938273788081297,35.08691479348637,37.616322993839454))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09537748164265031,0.00877056923652267,-0.9954025382280143,0.046694639433910654,-0.12630932715689844,-0.9908912980349099))
push(move(11.923594684695614,35.063420243571144,37.32262024989478))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.046694639433910654,-0.12630932715689844,-0.9908912980349099,0.3753627186044326,-0.1975141355420178,-0.9055887564137372))
push(move(11.964017092891364,35.017278973427054,37.070032947954))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3753627186044326,-0.1975141355420178,-0.9055887564137372,0.8680662632924602,-0.16196653784300685,-0.46928435212844555))
push(move(12.088429412929921,34.97668496795414,36.924944963679664))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8680662632924602,-0.16196653784300685,-0.46928435212844555,0.9990761938188042,-0.042887411896582635,-0.002725590824778201))
push(move(12.296235771338214,34.95529256590244,36.89043257195439))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9990761938188042,-0.042887411896582635,-0.002725590824778201,0.9869457829104538,0.04616666503001159,0.15429407193822472))
push(move(12.565450019997709,34.956207871827694,36.923643598480595))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9869457829104538,0.04616666503001159,0.15429407193822472,0.9812565709180469,0.12195923326711282,0.1492028399563971))
push(move(12.873606242761486,34.98230040119995,36.98069572783929))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9812565709180469,0.12195923326711282,0.1492028399563971,0.9828112842053585,0.16855119155108722,0.07531583807754388))
push(move(13.197807629631663,35.03480286064843,37.019795363494666))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9828112842053585,0.16855119155108722,0.07531583807754388,0.9834806500791072,0.17845855684299258,0.030304362878851906))
push(move(13.508920453114674,35.09125617825022,37.02938180111124))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub40 inherits .../COPOLYFF



DPDPoly_sub41 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9519443399071729,-0.295817621402434,-0.07933415775378941))
push(move(13.773115242248624,35.111363862481184,37.020656527159616))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9519443399071729,-0.295817621402434,-0.07933415775378941,0.743827149135168,-0.6641082127600205,-0.07537542009262617))
push(move(13.956447672039829,35.05439313317147,37.005377772618296))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.743827149135168,-0.6641082127600205,-0.07537542009262617,0.1263680882910299,-0.9915234421541002,-0.03020546176695982))
push(move(14.028452823325523,34.883391833204485,36.994781997759226))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1263680882910299,-0.9915234421541002,-0.03020546176695982,-0.10260310914616179,-0.9947221543569092,-0.0006615323800466741))
push(move(14.011905180480607,34.61925622158148,36.99212189707604))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10260310914616179,-0.9947221543569092,-0.0006615323800466741,-0.07389681388141592,-0.9971967952557325,0.011739353895006221))
push(move(13.97117356328883,34.32807777481173,36.99441269038117))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07389681388141592,-0.9971967952557325,0.011739353895006221,0.25367900398775,-0.9671404339425738,0.016921701130597978))
push(move(13.971732610570776,34.07714952080334,36.998503769179486))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.25367900398775,-0.9671404339425738,0.016921701130597978,0.8635789817607765,-0.5041171032898012,0.009863489834755771))
push(move(14.075542632730958,33.93017512806641,37.00137464691922))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8635789817607765,-0.5041171032898012,0.009863489834755771,0.9999013134172988,-0.01404586718579355,0.00027756325353037203))
push(move(14.287651546723607,33.892730790922904,37.002112082120355))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999013134172988,-0.01404586718579355,0.00027756325353037203,0.9892654250905254,0.14610149249893437,-0.002876214534037291))
push(move(14.566971468726031,33.92327190264903,37.00151106296825))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9892654250905254,0.14610149249893437,-0.002876214534037291,0.9836747828243863,0.17992045680367375,-0.0035427191469001684))
push(move(14.871085323051831,33.97889628638439,37.00041579246486))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub41 inherits .../COPOLYFF



DPDPoly_sub42 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9992108742209451,0.03971157721299431,-0.000787066624297987))
push(move(15.15920544462192,34.01834954888481,36.999638080193))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992108742209451,0.03971157721299431,-0.000787066624297987,0.9999897139712022,0.004534672276701626,-9.326915882173363e-05))
push(move(15.418506507283421,34.028654935302185,36.999433831803266))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999897139712022,0.004534672276701626,-9.326915882173363e-05,0.9988460413486098,-0.048017597816220906,0.0009465633476610038))
push(move(15.659681372803533,34.02061906654581,36.99959140074402))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9988460413486098,-0.048017597816220906,0.0009465633476610038,0.9985709202601877,-0.0534320793323618,0.0010630658220774014))
push(move(15.894155127806169,34.00578904484797,36.99988458350264))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9985709202601877,-0.0534320793323618,0.0010630658220774014,0.9996358488335692,-0.026979009909027102,0.0005502282419852879))
push(move(16.132940074798388,33.99529568089872,37.00009522590144))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996358488335692,-0.026979009909027102,0.0005502282419852879,0.9999996926985882,-0.0007833679304714991,3.061722970457686e-05))
push(move(16.379531889739,33.9926892900872,37.00015174879361))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999996926985882,-0.0007833679304714991,3.061722970457686e-05,0.9999298808897285,0.011839632278923073,-0.00023751074359954527))
push(move(16.630867411672817,33.99490562047144,37.000110471061774))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999298808897285,0.011839632278923073,-0.00023751074359954527,0.999931823918487,0.01167369718277057,-0.0002689035746992829))
push(move(16.883663369790632,33.99865843998272,37.0000320037545))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999931823918487,0.01167369718277057,-0.0002689035746992829,0.9999925166738707,0.0038659359546033235,-0.00014538037496062878))
push(move(17.134766144304653,34.00078838275065,36.99997496165278))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999925166738707,0.0038659359546033235,-0.00014538037496062878,0.9999996829566619,-0.0007938130977913355,-6.28278718540526e-05))
push(move(17.38353082812995,34.00059091002375,36.99995933229215))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub42 inherits .../COPOLYFF



DPDPoly_sub43 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9999996090883294,-0.0008801788028561968,8.431170429764862e-05))
push(move(17.631583466726372,33.99958365695125,36.999970136812316))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999996090883294,-0.0008801788028561968,8.431170429764862e-05,0.9999932838895661,0.0036642704678470674,7.278530141929942e-05))
push(move(17.88063205670685,33.99936444957578,36.9999911345316))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999932838895661,0.0036642704678470674,7.278530141929942e-05,0.9999397412939096,0.010977807096609653,3.914612366723332e-05))
push(move(18.132258471058158,34.00141827790513,37.00000657883817))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999397412939096,0.010977807096609653,3.914612366723332e-05,0.9999429210681282,0.01068431546633083,2.9588616596154055e-06))
push(move(18.385447373957604,34.004906548707694,37.000010897285314))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999429210681282,0.01068431546633083,2.9588616596154055e-06,0.9999984083629011,-0.0017840917026528359,-1.6984140695816036e-05))
push(move(18.636744481931608,34.006808673271664,37.00000807162769))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999984083629011,-0.0017840917026528359,-1.6984140695816036e-05,0.999634393217046,-0.027038481585224716,-2.0276932501109055e-05))
push(move(18.882601079337736,34.00401957949525,37.000002453543395))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999634393217046,-0.027038481585224716,-2.0276932501109055e-05,0.9986923839236462,-0.05112261889583975,-1.1407679704608862e-05))
push(move(19.119823056948043,33.993742184920094,36.999998272693475))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9986923839236462,-0.05112261889583975,-1.1407679704608862e-05,0.9990607305746062,-0.043331935368966214,-9.560023775810137e-07))
push(move(19.35300023437131,33.9799400559915,36.99999708035443))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9990607305746062,-0.043331935368966214,-9.560023775810137e-07,0.9999636248152034,0.008529303993002944,4.4535731086777715e-06))
push(move(19.594305126513554,33.9731626288001,36.99999781866103))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999636248152034,0.008529303993002944,4.4535731086777715e-06,0.999108076315937,0.0422261981168161,5.732987016296339e-06))
push(move(19.85622459933159,33.98423236571049,36.99999932158246))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub43 inherits .../COPOLYFF



DPDPoly_sub44 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9862301222892824,0.1653787951587639,1.05015482842853e-06))
push(move(20.15004805940315,34.02293447918341,37.00000045315325))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9862301222892824,0.1653787951587639,1.05015482842853e-06,0.9913953656076525,0.13090160064573766,2.2976489732784295e-07))
push(move(20.4589969306504,34.07474144688577,37.00000078212733))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9913953656076525,0.13090160064573766,2.2976489732784295e-07,0.999543948957108,-0.030197584368717546,-1.2346895874172974e-06))
push(move(20.737929047641572,34.100556954554214,37.00000058940002))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999543948957108,-0.030197584368717546,-1.2346895874172974e-06,0.8380563979878967,-0.545583608429728,-2.0854563619781348e-06))
push(move(20.940445662191795,34.06019622483215,37.000000187416376))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8380563979878967,-0.545583608429728,-2.0854563619781348e-06,0.15048005248791183,-0.9886130455351115,-1.0132832556351869e-06))
push(move(21.02251232466636,33.915290221252356,36.99999988123049))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15048005248791183,-0.9886130455351115,-1.0132832556351869e-06,-0.13913840128462632,-0.9902729448429624,-7.589525878378922e-08))
push(move(20.999381846701244,33.673001511002646,36.999999790559464))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13913840128462632,-0.9902729448429624,-7.589525878378922e-08,-0.0885062859169229,-0.9960756182906556,2.8316960865634256e-07))
push(move(20.948456617077582,33.38822247461101,36.99999984083562))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0885062859169229,-0.9960756182906556,2.8316960865634256e-07,0.2730040378602433,-0.9620128872899005,3.8977619441379746e-07))
push(move(20.950076185276956,33.11810118183815,36.999999948309444))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2730040378602433,-0.9620128872899005,3.8977619441379746e-07,0.7953545428770086,-0.6061444969022298,2.1785580121559507e-07))
push(move(21.0816822997005,32.91876119995085,37.00000003104599))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7953545428770086,-0.6061444969022298,2.1785580121559507e-07,0.9339007473599362,-0.35753236787813336,8.883632691839833e-08))
push(move(21.342822357695464,32.818786953708184,37.000000055886666))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub44 inherits .../COPOLYFF



DPDPoly_sub45 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.941585451802467,0.33677416313300124,-1.0350202180928305e-07))
push(move(21.64833729083814,32.81681533764867,37.00000004271482))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.941585451802467,0.33677416313300124,-1.0350202180928305e-07,0.813878338788802,0.5810353256475624,-1.0583329018404149e-07))
push(move(21.90880480398927,32.90997600468838,37.00000001408341))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.813878338788802,0.5810353256475624,-1.0583329018404149e-07,0.26593463593200545,0.9639910629314505,-6.221602379679432e-08))
push(move(22.037625710470714,33.09473196583741,36.9999999920934))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.26593463593200545,0.9639910629314505,-6.221602379679432e-08,-0.12257886955264226,0.9924587753348731,-4.8216214672264674e-09))
push(move(22.029723341840455,33.34829570465061,36.99999998579424))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12257886955264226,0.9924587753348731,-4.8216214672264674e-09,-0.13624305851037527,0.9906754408017482,2.037243709996405e-08))
push(move(21.9719885446028,33.62616272132944,36.99999998951157))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13624305851037527,0.9906754408017482,2.037243709996405e-08,0.21781264157342736,0.9759906009643766,2.5727947190781208e-08))
push(move(21.95623379523081,33.882666334448885,36.99999999678314))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.21781264157342736,0.9759906009643766,2.5727947190781208e-08,0.7882094178571712,0.6154071120821234,8.967498037941307e-09))
push(move(22.071662091400487,34.072787141916756,37.000000001284974))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7882094178571712,0.6154071120821234,8.967498037941307e-09,0.9829498425702738,0.1838738888234926,-4.138737539948044e-09))
push(move(22.32633893109823,34.171631839898104,37.00000000099384))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9829498425702738,0.1838738888234926,-4.138737539948044e-09,0.9903945049125454,-0.13827047638246617,-4.5447882579508475e-09))
push(move(22.633369387254923,34.17786198947888,36.99999999891989))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9903945049125454,-0.13827047638246617,-4.5447882579508475e-09,0.9514738938601875,-0.3077294742180745,-1.9971288233240375e-09))
push(move(22.900463003719768,34.091477508840875,36.999999998359264))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub45 inherits .../COPOLYFF



DPDPoly_sub46 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.012389254137808746,-0.9999232502456915,3.055785146806627e-08))
push(move(23.037696488319057,33.91306549669692,37.000000002479275))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.012389254137808746,-0.9999232502456915,3.055785146806627e-08,-0.11393985099507119,-0.9934876498252105,2.3354798668012158e-08))
push(move(23.034597146174775,33.66292095723867,37.00000001012374))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11393985099507119,-0.9934876498252105,2.3354798668012158e-08,-0.14259381273384514,-0.9897812912810715,-1.4381346946936174e-10))
push(move(22.977165261090782,33.38526924143716,37.00000001488665))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14259381273384514,-0.9897812912810715,-1.4381346946936174e-10,0.18812925912808234,-0.9821442775172676,-5.529964386876665e-08))
push(move(22.95721302659491,33.12577735799029,37.000000010045696))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18812925912808234,-0.9821442775172676,-5.529964386876665e-08,0.7616105876765185,-0.648034962589995,-1.0983598973240867e-07))
push(move(23.064445656088697,32.92961475747256,36.99999998923102))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7616105876765185,-0.648034962589995,-1.0983598973240867e-07,0.9783810613089714,-0.20681029682277377,-8.448326306951332e-08))
push(move(23.31202643748204,32.82387570487366,36.99999995887613))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9783810613089714,-0.20681029682277377,-8.448326306951332e-08,0.9915187327574997,0.12996385109314829,3.358957158144092e-09))
push(move(23.6166860004667,32.81288213247108,36.999999941545035))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9915187327574997,0.12996385109314829,3.358957158144092e-09,0.8410804357197907,0.5409100670623256,1.9334301230726748e-07))
push(move(23.88900318168433,32.89950324189373,36.99999996083075))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8410804357197907,0.5409100670623256,1.9334301230726748e-07,0.3480378987229843,0.9374804643577004,4.0013925631590743e-07))
push(move(24.04133502604126,33.085979595147066,37.00000003916105))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3480378987229843,0.9374804643577004,4.0013925631590743e-07,0.05611624219337726,0.9984242421745922,4.309293739063125e-07))
push(move(24.056160855926834,33.34976183340001,37.00000015301197))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub46 inherits .../COPOLYFF



DPDPoly_sub47 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.12455413517347297,0.9922128135693026,-2.761497649290871e-07))
push(move(24.00763081836501,33.635892744464584,37.00000021878683))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12455413517347297,0.9922128135693026,-2.761497649290871e-07,0.07996229705957605,0.9967978887659218,-8.702299942145361e-07))
push(move(23.976080218659163,33.887228513127226,37.000000148835795))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07996229705957605,0.9967978887659218,-8.702299942145361e-07,0.7658000722777408,0.6430787271359057,-2.161068322242831e-06))
push(move(24.040652846197442,34.04754034385277,36.99999985940797))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7658000722777408,0.6430787271359057,-2.161068322242831e-06,0.9974194657971671,0.07179421457714426,-1.4645130906756504e-06))
push(move(24.229326932323595,34.09989181804215,36.99999943418001))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9974194657971671,0.07179421457714426,-1.4645130906756504e-06,0.9927902096065321,-0.11986492276482812,2.738732469235421e-09))
push(move(24.50066740495624,34.080652174003134,36.99999918396763))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9927902096065321,-0.11986492276482812,2.738732469235421e-09,0.988413514484748,-0.1517851256851953,2.153660743533876e-06))
push(move(24.808291360842432,34.029990316358834,36.999999435777156))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.988413514484748,-0.1517851256851953,2.153660743533876e-06,0.9949770657509692,-0.10010313984899835,4.686518777408157e-06))
push(move(25.106310287152063,33.987646989788956,37.00000050360691))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9949770657509692,-0.10010313984899835,4.686518777408157e-06,0.9998291017828638,-0.0184869468331406,4.986031636307458e-06))
push(move(25.372033122397838,33.97327310916059,37.000002091101024))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998291017828638,-0.0184869468331406,4.986031636307458e-06,0.9992491339033789,0.03874491441902825,9.726353256617584e-08))
push(move(25.615430594905902,33.9782333009452,37.00000304253077))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992491339033789,0.03874491441902825,9.726353256617584e-08,0.9983251845420195,0.05785175791772219,-3.869357895606169e-06))
push(move(25.84893043508348,33.99176433916495,37.000002137520596))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub47 inherits .../COPOLYFF



DPDPoly_sub48 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9998699379435537,0.01612782098976782,-2.4225525203943428e-05))
push(move(26.08484247177329,34.00320512115153,36.99999819890878))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998699379435537,0.01612782098976782,-2.4225525203943428e-05,0.9999854777270428,0.005389245192000528,-1.9268587047080637e-05))
push(move(26.32940914383913,34.00714996173275,36.99999227338201))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999854777270428,0.005389245192000528,-1.9268587047080637e-05,0.9999529237111806,-0.00970311088934186,-7.284896493488539e-07))
push(move(26.580005691204477,34.00587371590517,36.99998865767462))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999529237111806,-0.00970311088934186,-7.284896493488539e-07,0.999912242342671,-0.013247882083981902,3.512179584506785e-05))
push(move(26.833304095493368,34.00226038295705,36.999991906282474))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999912242342671,-0.013247882083981902,3.512179584506785e-05,0.9999655995963699,-0.008294234156301676,7.282604512850552e-05))
push(move(27.086004265897802,33.99916971812583,37.00000643081299))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999655995963699,-0.008294234156301676,7.282604512850552e-05,0.9999988548915064,-0.0015116407545931233,7.181855748690008e-05))
push(move(27.336388800549578,33.998087537065274,37.0000285452123))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999988548915064,-0.0015116407545931233,7.181855748690008e-05,0.9999966156526356,0.002601665933043273,4.200939325141918e-06))
push(move(27.585141453189173,33.99841520114738,37.000042278166816))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999966156526356,0.002601665933043273,4.200939325141918e-06,0.9999934138422762,0.0036269826588253996,-0.00013141104433356298))
push(move(27.83314656691322,33.999379939196935,37.0000306320686))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999934138422762,0.0036269826588253996,-0.00013141104433356298,0.999997369684776,0.002277197356214002,-0.0002738534829631456))
push(move(28.081282093056334,34.000214706496344,36.999977079377786))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999997369684776,0.002277197356214002,-0.0002738534829631456,0.9999992334638204,0.001192902482396232,-0.0003317460460407383))
push(move(28.330025302188755,34.00051143311545,36.99989455973842))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub48 inherits .../COPOLYFF



DPDPoly_sub49 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9999994531138945,-0.0010323925940883705,0.00016714497757709207))
push(move(28.579222327422684,34.00042749287621,36.99984242840812))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999994531138945,-0.0010323925940883705,0.00016714497757709207,0.9999994167798991,-0.0009678621611978472,0.0004792522283912704))
push(move(28.82866381474753,34.000169971191205,36.99988412132273))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999994167798991,-0.0009678621611978472,0.0004792522283912704,0.9999992981143461,-0.000614611964666902,0.001012927908611846))
push(move(29.078141242285465,33.99994460785538,37.00008153654931))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999992981143461,-0.000614611964666902,0.001012927908611846,0.9999994784626515,-0.00011978399359831315,0.0010142614159943026))
push(move(29.327504072557893,33.999863377785104,37.00038941089646))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999994784626515,-0.00011978399359831315,0.0010142614159943026,0.9999999788217325,0.00018104911899590866,9.786598416166942e-05))
push(move(29.576696610579113,33.99988488887119,37.00058720228683))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999999788217325,0.00018104911899590866,9.786598416166942e-05,0.9999984149260406,0.00025975975634791944,-0.0017614398301304414))
push(move(29.825671929294874,33.99995357063859,37.00043816458507))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999984149260406,0.00025975975634791944,-0.0017614398301304414,0.9999928694782492,0.0001658193834525204,-0.003772730654221703))
push(move(30.074385083597814,34.0000141685126,36.999710552597904))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999928694782492,0.0001658193834525204,-0.003772730654221703,0.9999927132751799,3.241238367122853e-05,-0.003817374225978632))
push(move(30.322945473512405,34.00003602881907,36.99856207206375))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999927132751799,3.241238367122853e-05,-0.003817374225978632,0.9999999029598043,-4.794405388764171e-05,-0.0004379289319894763))
push(move(30.57172469240731,34.00003028859228,36.9978120073595))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999999029598043,-4.794405388764171e-05,-0.0004379289319894763,0.9999977230302316,-7.275295446381277e-05,0.0021327544068405666))
push(move(30.82111980251009,34.000012144319875,36.998343907090735))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub49 inherits .../COPOLYFF



DPDPoly_sub50 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9998545680874127,-1.7934936805192852e-05,0.017054100769952462))
push(move(31.071520376328223,33.99999671361976,37.00102516491375))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998545680874127,-1.7934936805192852e-05,0.017054100769952462,0.9998990832038753,-4.099481472696009e-06,0.014206455970558862))
push(move(31.322660235256983,33.99999220878711,37.005308752345584))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998990832038753,-4.099481472696009e-06,0.014206455970558862,0.9999981928309936,1.3303700267683199e-05,0.0019010938321646557))
push(move(31.5731160760652,33.999994657129946,37.00815178133238))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999981928309936,1.3303700267683199e-05,0.0019010938321646557,0.9997146321630942,1.0003741309196747e-05,-0.023888368276938254))
push(move(31.82134657689675,33.99999884317272,37.00625680358715))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997146321630942,1.0003741309196747e-05,-0.023888368276938254,0.9985888149449308,-7.297507131901853e-06,-0.05310723692327704))
push(move(32.065834684929655,33.999999587566435,36.99637817793919))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9985888149449308,-7.297507131901853e-06,-0.05310723692327704,0.9984873553847731,-1.7827241394804208e-05,-0.054981822622674266))
push(move(32.30746812725258,33.99999529068402,36.98040374779293))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9984873553847731,-1.7827241394804208e-05,-0.054981822622674266,0.9999669952083026,-6.372062555310161e-06,-0.008124558663419504))
push(move(32.5515433148027,33.999990915603846,36.96963257561387))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999669952083026,-6.372062555310161e-06,-0.008124558663419504,0.9965582072261979,2.6162781531527653e-05,0.08289595240791477))
push(move(32.80382847277696,33.999992127740455,36.976370905944414))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9965582072261979,2.6162781531527653e-05,0.08289595240791477,0.9847565034176072,6.199037097984543e-05,0.17393856712621944))
push(move(33.07001456718037,34.00000452710191,37.0127601801535))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9847565034176072,6.199037097984543e-05,0.17393856712621944,0.9776610350588066,7.691896240049534e-05,0.21018776037442408))
push(move(33.34706420604566,34.00002632440178,37.0723231994592))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub50 inherits .../COPOLYFF



DPDPoly_sub51 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.994987538947131,-3.590699370846625e-05,-0.0999989802478968))
push(move(33.615311869671935,34.000041653234746,37.11311296335549))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.994987538947131,-3.590699370846625e-05,-0.0999989802478968,0.9369393098197231,-0.0001289165489353255,-0.34949207873006877))
push(move(33.85322597912761,34.000033067418244,37.08920194195986))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9369393098197231,-0.0001289165489353255,-0.34949207873006877,0.6159485969633763,-0.00027077506721552715,-0.7877862988017189))
push(move(34.03929676086194,33.999983315764645,36.95496039208527))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6159485969633763,-0.00027077506721552715,-0.7877862988017189,0.2587328184835791,-0.00024653630210907604,-0.9659488950557349))
push(move(34.15484652507753,33.99990047303617,36.7034351187089))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2587328184835791,-0.00024653630210907604,-0.9659488950557349,-0.05645742209486977,-4.605920100739457e-05,-0.9984050066826345))
push(move(34.18680525946628,33.999842760731894,36.40425456329517))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05645742209486977,-4.605920100739457e-05,-0.9984050066826345,-0.4841513009145385,0.0004421697157319979,-0.8749841840334616))
push(move(34.12276247725653,33.99987429816752,36.13605402353056))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4841513009145385,0.0004421697157319979,-0.8749841840334616,-0.9262889132316184,0.0010392685302099164,-0.3768126446194575))
push(move(33.95047480015805,34.000058598573936,35.977145488695015))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9262889132316184,0.0010392685302099164,-0.3768126446194575,-0.9987689841554771,0.0009313678541670661,0.04959484693954171))
push(move(33.68288503869742,34.0003678275324,35.95711268183446))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9987689841554771,0.0009313678541670661,0.04959484693954171,-0.989454708453216,0.00018987759487846701,0.14484247949500134))
push(move(33.384780002788006,34.000586117908135,36.005235614975604))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.989454708453216,0.00018987759487846701,0.14484247949500134,-0.9917859738539423,-0.00043023241080096715,0.12790776742113755))
push(move(33.127333218448115,34.00047443862087,36.03843778185714))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub51 inherits .../COPOLYFF



DPDPoly_sub52 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.04742520942201764,-0.00572966719631881,-0.9988583585399369))
push(move(32.98145714639113,33.999795628361724,35.97389264904071))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04742520942201764,-0.00572966719631881,-0.9988583585399369,0.08930810569600611,-0.004085028907433174,-0.9959956700688094))
push(move(32.97191699031504,33.99864303631241,35.772960175478325))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08930810569600611,-0.004085028907433174,-0.9959956700688094,0.1397386508321216,-0.0007441980956713059,-0.9901881415331193))
push(move(33.02470507516031,33.99781743122237,35.49157640845027))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1397386508321216,-0.0007441980956713059,-0.9901881415331193,-0.10138733019630503,0.005411348410294089,-0.9948323107861182))
push(move(33.053074938227766,33.99821081809701,35.19787492071305))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10138733019630503,0.005411348410294089,-0.9948323107861182,-0.6424290464130218,0.013970014938606425,-0.7662178273881851))
push(move(32.970519000818875,34.00070950586996,34.959892050600544))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6424290464130218,0.013970014938606425,-0.7662178273881851,-0.9556584077633897,0.013327234733968747,-0.2941757850087061))
push(move(32.74065882099554,34.00500449881422,34.825259765898224))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9556584077633897,0.013327234733968747,-0.2941757850087061,-0.9972497067949518,0.002963022225439611,0.07405567362919852))
push(move(32.43870917679789,34.0081259156467,34.79618756039169))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9972497067949518,0.002963022225439611,0.07405567362919852,-0.8838734512077746,-0.020355531406985605,0.4672829705769266))
push(move(32.15494523840223,34.00674476742613,34.86875480391846))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8838734512077746,-0.020355531406985605,0.4672829705769266,-0.43166660510778626,-0.053911147458555665,0.9004207517679834))
push(move(31.979447780434498,33.9975491642295,35.03898818900062))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43166660510778626,-0.053911147458555665,0.9004207517679834,-0.10400507615887788,-0.06337542927663561,0.99255553955292))
push(move(31.953186720527537,33.98154700350495,35.2896063458045))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub52 inherits .../COPOLYFF



DPDPoly_sub53 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.1426392530578199,0.01820086421288191,0.9896073827680408))
push(move(32.00339970818473,33.96975006464512,35.57250872908804))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1426392530578199,0.01820086421288191,0.9896073827680408,-0.05551778142458865,0.08493189505442078,0.9948388558697114))
push(move(32.04126968000228,33.974582298409814,35.835244286744626))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05551778142458865,0.08493189505442078,0.9948388558697114,-0.6804683252086786,0.23435408775968156,0.6942917397881263))
push(move(31.978124006926798,34.00841719347449,36.02543118159817))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6804683252086786,0.23435408775968156,0.6942917397881263,-0.9637093462129285,0.20167392680008842,0.17490546952820754))
push(move(31.769940978246915,34.068028220912375,36.11208491167513))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9637093462129285,0.20167392680008842,0.17490546952820754,-0.9955713221968905,0.04748931083269721,-0.08113265542166753))
push(move(31.480295927187527,34.11259688635275,36.115782960766126))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9955713221968905,0.04748931083269721,-0.08113265542166753,-0.9354345741352948,-0.2613876459119601,-0.23798877300604607))
push(move(31.188644782585285,34.09575637569763,36.06471301285781))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9354345741352948,-0.2613876459119601,-0.23798877300604607,-0.6035771263136465,-0.7372463084181322,-0.30358282776665196))
push(move(30.974361686382366,33.97122413421499,35.98706560038604))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6035771263136465,-0.7372463084181322,-0.30358282776665196,-0.1492968283562113,-0.9675075810115481,-0.20405768235466892))
push(move(30.88528175701567,33.725210076042906,35.91212968733527))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1492968283562113,-0.9675075810115481,-0.20405768235466892,0.10440653122138917,-0.9942735186165491,-0.022791367141610182))
push(move(30.890137876230014,33.425417664504494,35.871949186407285))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10440653122138917,-0.9942735186165491,-0.022791367141610182,0.19747685347836122,-0.9755429542176364,0.09653412255059135))
push(move(30.945460546684835,33.152121627930676,35.89899299106309))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub53 inherits .../COPOLYFF



DPDPoly_sub54 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.15560884344457523,-0.09120657673635112,0.9835991298297684))
push(move(31.007802998765815,32.98551133547879,36.02568075280943))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15560884344457523,-0.09120657673635112,0.9835991298297684,0.08750414732747826,0.056910661941599404,0.9945371791732374))
push(move(31.044904278969724,32.963765265750176,36.260196903153634))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08750414732747826,0.056910661941599404,0.9945371791732374,-0.015875680569419202,0.15359893901232344,0.988005733131517))
push(move(31.053710403376513,33.0153684435612,36.547445972848905))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.015875680569419202,0.15359893901232344,0.988005733131517,-0.12724285221441622,-0.07020068314710554,0.9893842128546524))
push(move(31.03587485521066,33.051125924288264,36.82213328136554))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12724285221441622,-0.07020068314710554,0.9893842128546524,-0.2434828773630558,-0.7011374495851455,0.6701659236489457))
push(move(30.993064163449066,32.981909530945536,37.01900434574754))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2434828773630558,-0.7011374495851455,0.6701659236489457,-0.1820650566568589,-0.9735626039067723,0.13794263814644156))
push(move(30.93536990952672,32.761710167210374,37.09876460133771))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1820650566568589,-0.9735626039067723,0.13794263814644156,-0.040874423828717345,-0.9948678050749038,-0.09255988279008076))
push(move(30.895791163078307,32.46175834284981,37.09270379438392))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.040874423828717345,-0.9948678050749038,-0.09255988279008076,0.2449951897969893,-0.94998227108352,-0.1936776745093114))
push(move(30.911183488546474,32.173021953424964,37.04399459894149))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2449951897969893,-0.94998227108352,-0.1936776745093114,0.8116796563238882,-0.5597736264686765,-0.16682212868813687))
push(move(31.01837792097528,31.98642147289645,36.99579447051191))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8116796563238882,-0.5597736264686765,-0.16682212868813687,0.9835037832224519,-0.1612093901834281,-0.08204779645920812))
push(move(31.232694979988132,31.95129204789702,36.97791528922599))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub54 inherits .../COPOLYFF



DPDPoly_sub55 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9882141338891427,0.14697669657900808,0.04278640256499315))
push(move(31.508536798534784,31.999198004576193,36.982373889167775))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9882141338891427,0.14697669657900808,0.04278640256499315,0.9991616266847793,-0.02269853095484024,0.03407081526934588))
push(move(31.789596212921346,32.040999859915374,36.9945428319467))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9991616266847793,-0.02269853095484024,0.03407081526934588,0.8218627859621722,-0.5696016314637747,-0.009774583587188286))
push(move(32.01957664651285,31.987588417599785,36.99980004304591))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8218627859621722,-0.5696016314637747,-0.009774583587188286,0.3343939544641615,-0.9414428306047055,-0.04319814719198134))
push(move(32.155345495001924,31.787513035425683,36.99019290031491))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3343939544641615,-0.9414428306047055,-0.04319814719198134,-0.03634231132606769,-0.9990780125084459,-0.02285522543430167))
push(move(32.19261037110888,31.500434396724042,36.97744695859421))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03634231132606769,-0.9990780125084459,-0.02285522543430167,-0.37661083849378074,-0.9251536300907076,0.04748723048354835))
push(move(32.13420721056442,31.20640538340596,36.97689929739079))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.37661083849378074,-0.9251536300907076,0.04748723048354835,-0.7613130302366554,-0.6268206588685517,0.1658262090487392))
push(move(31.98297679176267,30.985464440743197,37.00387986248863))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7613130302366554,-0.6268206588685517,0.1658262090487392,-0.9640936409556089,-0.17722506606076538,0.19777443573099895))
push(move(31.75079209660491,30.890723784895094,37.06041326906172))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9640936409556089,-0.17722506606076538,0.19777443573099895,-0.9925517653230742,0.09966287914345315,0.07005928685682206))
push(move(31.477296764140224,30.892507519865504,37.10761520299387))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9925517653230742,0.09966287914345315,0.07005928685682206,-0.9808997323655003,0.19183502761182636,-0.032171994443303084))
push(move(31.207454215139688,30.945280755630925,37.09876478464777))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub55 inherits .../COPOLYFF



DPDPoly_sub56 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.4986162801989751,0.10780324400018268,-0.8600931726874563))
push(move(30.986224991572172,31.003512351606098,36.987149712765756))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4986162801989751,0.10780324400018268,-0.8600931726874563,-0.3191244977839309,0.05740633694140756,-0.9459725510780551))
push(move(30.849878170356902,31.032991191788078,36.7519568907462))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3191244977839309,0.05740633694140756,-0.9459725510780551,0.017444855966804472,-0.02045945369373194,-0.9996384785285387))
push(move(30.80682941807894,31.03578327661895,36.455372022591675))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.017444855966804472,-0.02045945369373194,-0.9996384785285387,0.40462326795757847,-0.07336558818229715,-0.9115357927684437))
push(move(30.859926270525524,31.021206706980575,36.17617297004337))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.40462326795757847,-0.07336558818229715,-0.9115357927684437,0.8660809729112985,-0.09708705850764643,-0.49038541111186346))
push(move(31.012014106463436,30.99857954529298,35.99313170572953))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8660809729112985,-0.09708705850764643,-0.49038541111186346,0.9979524547834246,-0.06385169872084873,0.003722708986560083))
push(move(31.25418734049805,30.97701032261822,35.95293763416712))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9979524547834246,-0.06385169872084873,0.003722708986560083,0.9886731772453532,-0.011563360425177855,0.14963835501386663))
push(move(31.538281355603978,30.96490754250597,35.99509486520503))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9886731772453532,-0.011563360425177855,0.14963835501386663,0.9968557570501596,0.07923756266143284,-9.110119997580093e-05))
push(move(31.80794258786121,30.970533691452363,36.03674998611804))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9968557570501596,0.07923756266143284,-9.110119997580093e-05,0.7715712162563568,0.2349414969029632,-0.5911686318451623))
push(move(32.00681900659858,31.002150424655525,35.99505204622953))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7715712162563568,0.2349414969029632,-0.5911686318451623,0.4302430750592878,0.2700457078737988,-0.861374606093346))
push(move(32.096373868502845,31.058360291771095,35.81575739079342))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub56 inherits .../COPOLYFF



DPDPoly_sub57 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.1500125354327693,-0.023540419193195942,-0.9884038081053921))
push(move(32.10013126045445,31.10411765610466,35.54427793049909))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1500125354327693,-0.023540419193195942,-0.9884038081053921,-0.1782139968043218,-0.19144488538585827,-0.9651883894880962))
push(move(32.055120747744006,31.09705447078986,35.24771229990408))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1782139968043218,-0.19144488538585827,-0.9651883894880962,-0.17837656749922548,-0.6053627461021079,-0.7757046769221578))
push(move(31.998371696533866,30.99480330144664,34.99315876266314))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.17837656749922548,-0.6053627461021079,-0.7757046769221578,-0.09297492541790219,-0.9201807970208148,-0.38029326057356516))
push(move(31.96031247002985,30.775300329229193,34.83542034101703))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09297492541790219,-0.9201807970208148,-0.38029326057356516,0.0005260226727050328,-0.9999550046696779,0.009471638517817203))
push(move(31.94739089776935,30.49024197129194,34.78463314027991))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0005260226727050328,-0.9999550046696779,0.009471638517817203,0.09882364924773675,-0.9092398300377771,0.40437212789982757))
push(move(31.960610859811048,30.208069351303063,34.840793189549146))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09882364924773675,-0.9092398300377771,0.40437212789982757,0.19211366108632016,-0.5717412381084591,0.7976241582789582))
push(move(32.000976194847624,29.997223480486813,35.00389645193284))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19211366108632016,-0.5717412381084591,0.7976241582789582,0.1895492743253623,-0.1580088540060518,0.9690739263123441))
push(move(32.06209587745012,29.906044137133883,35.262142204057376))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1895492743253623,-0.1580088540060518,0.9690739263123441,0.07073001039099386,0.08318546446975247,0.9940208469298024))
push(move(32.109559847882046,29.906707815677095,35.55903224632678))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07073001039099386,0.08318546446975247,0.9940208469298024,-0.026550308448408222,0.17113895430041845,0.9848891000728223))
push(move(32.10232302061805,29.953355222912286,35.827483827794026))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub57 inherits .../COPOLYFF



DPDPoly_sub58 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9857223087145115,0.05585856949632116,0.15884379218703443))
push(move(31.99934031133595,30.000127066370336,36.000414199130184))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9857223087145115,0.05585856949632116,0.15884379218703443,-0.9998700233962535,0.003563653399636137,-0.01572376189156652))
push(move(31.778366827093386,30.01264911504194,36.036022875021516))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998700233962535,0.003563653399636137,-0.01572376189156652,-0.9886408308595387,-0.038949066315589274,-0.14516293531926475))
push(move(31.491457861136055,30.001937218668054,35.99242733830929))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9886408308595387,-0.038949066315589274,-0.14516293531926475,-0.9999048201681223,-0.0045215550691114145,0.013034805112163692))
push(move(31.20902129820562,29.99021884909606,35.95242540908195))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999048201681223,-0.0045215550691114145,0.013034805112163692,-0.7685355744961596,0.13748497805170878,0.6248607457217801))
push(move(31.001465023043757,29.999721478173342,35.998814907427935))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7685355744961596,0.13748497805170878,0.6248607457217801,-0.1519015432557192,0.17715007490697102,0.9723907507360329))
push(move(30.918910892751487,30.042117322049094,36.18830076776337))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1519015432557192,0.17715007490697102,0.9723907507360329,0.09345982966406532,0.0772285090281779,0.992623300971949))
push(move(30.927855225244826,30.08556643349427,36.4700246463753))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09345982966406532,0.0772285090281779,0.992623300971949,0.13439469708160456,-0.15293297627454075,0.979055447951828))
push(move(30.97324874284718,30.08701822933483,36.76541519567938))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13439469708160456,-0.15293297627454075,0.979055447951828,-0.006171843906200687,-0.6389666987360142,0.7692096373871021))
push(move(31.000042146719473,30.00342211538542,36.995901040871054))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.006171843906200687,-0.6389666987360142,0.7692096373871021,-0.1310595494687085,-0.8716268227265614,0.4723241221837591))
push(move(30.970546509966855,29.807257942296154,37.10220005375418))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub58 inherits .../COPOLYFF



DPDPoly_sub59 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.038399149197651625,-0.9849831705198464,-0.16832605007415727))
push(move(30.921721972588955,29.537785997170182,37.10797327492212))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.038399149197651625,-0.9849831705198464,-0.16832605007415727,0.13282778781984403,-0.9718138135331015,-0.19476829980552915))
push(move(30.910589006566425,29.25221237381419,37.059170938533455))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13282778781984403,-0.9718138135331015,-0.19476829980552915,0.5901761798308094,-0.7890862186324655,-0.17039664411199199))
push(move(30.994168345212753,29.007743399821024,37.00174356911573))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5901761798308094,-0.7890862186324655,-0.17039664411199199,0.9229425258241177,-0.38092259900665826,-0.05545329197992221))
push(move(31.209120015036135,28.853065961830175,36.972978571330174))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9229425258241177,-0.38092259900665826,-0.05545329197992221,0.9996956169315245,-0.015171412680838993,0.0194551207954653))
push(move(31.500776206297523,28.798653041838765,36.971304974236844))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996956169315245,-0.015171412680838993,0.0194551207954653,0.9309822966463527,0.36118271896073706,0.05309432036679766))
push(move(31.78887313259512,28.844267609961346,36.984261172496595))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9309822966463527,0.36118271896073706,0.05309432036679766,0.5717979050736238,0.8190063160631735,0.04770545044378166))
push(move(31.993145736815173,28.98967210461407,36.999385020104874))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5717979050736238,0.8190063160631735,0.04770545044378166,0.06053415864761195,0.9980744438058299,0.013528498013794677))
push(move(32.05585827976514,29.22667985716807,37.00653590731904))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06053415864761195,0.9980744438058299,0.013528498013794677,-0.13828649596125916,0.9903720987439091,-0.006320685432877682))
push(move(32.02469848880999,29.509907226425113,37.00643659812674))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13828649596125916,0.9903720987439091,-0.006320685432877682,-0.16790115223055038,0.9857251546806499,-0.012454818724587546))
push(move(31.978164938820456,29.783099459783273,37.002984763984855))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub59 inherits .../COPOLYFF



DPDPoly_sub60 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.822903085722663,0.5681715515522703,0.0034058060433992308))
push(move(31.994759970335814,29.99000047598514,37.00007846438401))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.822903085722663,0.5681715515522703,0.0034058060433992308,0.964174212573867,0.2651666026358179,0.007400044198642968))
push(move(32.13579383190548,30.087376982817748,37.000662171003164))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.964174212573867,0.2651666026358179,0.007400044198642968,0.9981067970368525,-0.06118678904191635,0.006244882350827845))
push(move(32.378641732275426,30.09557540352406,37.003024759740555))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9981067970368525,-0.06118678904191635,0.006244882350827845,0.9883133474906688,-0.15238191863501524,-0.004059315816770659))
push(move(32.67510266586022,30.054315815466122,37.00403647947277))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9883133474906688,-0.15238191863501524,-0.004059315816770659,0.990412675548117,-0.1362733375410864,-0.022634256979923193))
push(move(32.97696948221877,30.00332295065531,37.00056723824181))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.990412675548117,-0.1362733375410864,-0.022634256979923193,0.9974864599365045,-0.060248410538250155,-0.03729465472363097))
push(move(33.245079721669875,29.97589125807237,36.99101058887952))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9974864599365045,-0.060248410538250155,-0.03729465472363097,0.9996425199866052,0.015828647007796497,-0.021547300729606627))
push(move(33.486348801504235,29.972556323156468,36.98152224204475))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996425199866052,0.015828647007796497,-0.021547300729606627,0.9980548198513078,0.0534286681983716,0.032124040625698534))
push(move(33.722328380365504,29.983448160067233,36.98072349107594))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9980548198513078,0.0534286681983716,0.032124040625698534,0.9937659402809911,0.048599301138374074,0.10033625399774179))
push(move(33.97457614217772,29.998692499317716,36.99723664431446))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9937659402809911,0.048599301138374074,0.10033625399774179,0.9905917217653568,0.03825295099131205,0.131395405210388))
push(move(34.257274124306186,30.009609239098694,37.03473465191716))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub60 inherits .../COPOLYFF



DPDPoly_sub61 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9998857392525868,-0.010288760064243889,0.011074739529591343))
push(move(34.545389172238316,30.013867485665976,37.0705754787267))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998857392525868,-0.010288760064243889,0.011074739529591343,0.990847256295864,-0.027838488968205725,-0.1320860826238905))
push(move(34.800906048365455,30.01123823341481,37.07340558494528))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.990847256295864,-0.027838488968205725,-0.1320860826238905,0.78409200374293,-0.07411608427330761,-0.6162033233587669))
push(move(34.98580116743251,30.001493828281575,37.01186582916554))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.78409200374293,-0.07411608427330761,-0.6162033233587669,0.23352266208416916,-0.07497984884023022,-0.9694561302921443))
push(move(35.07100317105629,29.985707376051426,36.861141279433625))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.23352266208416916,-0.07497984884023022,-0.9694561302921443,-0.056860429758959656,-0.02744910762879326,-0.9980047284547351))
push(move(35.07712564394222,29.972171211868258,36.63273742763103))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.056860429758959656,-0.02744910762879326,-0.9980047284547351,-0.12354565210111829,0.03809950950559428,-0.9916072303197182))
push(move(35.04192056078458,29.971667881400077,36.35068818067918))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12354565210111829,0.03809950950559428,-0.9916072303197182,-0.0785340478727952,0.11842731520681021,-0.9898521982284125))
push(move(35.00315600137852,29.994982270388345,36.039039218565016))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0785340478727952,0.11842731520681021,-0.9898521982284125,-0.0018794763332090458,0.16448605117323595,-0.9863776186320067))
push(move(34.99206281104803,30.04685207989086,35.72227535194805))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0018794763332090458,0.16448605117323595,-0.9863776186320067,0.037957475079577696,0.10237568626109242,-0.9940213523602768))
push(move(35.00199061348062,30.0969734740143,35.42742601588665))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.037957475079577696,0.10237568626109242,-0.9940213523602768,0.04356733326399997,0.022331306225574214,-0.9988008811742826))
push(move(35.01267703235895,30.102451011300793,35.18243501477132))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub61 inherits .../COPOLYFF



DPDPoly_sub62 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.1933232520421569,-0.9277201663643171,-0.3193139726676686))
push(move(35.00384191105866,30.02037280284811,35.015247347362866))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1933232520421569,-0.9277201663643171,-0.3193139726676686,-0.18059201464563,-0.9744095499856773,-0.13383778667828589))
push(move(34.96203235326538,29.819736979159707,34.94619007746168))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.18059201464563,-0.9744095499856773,-0.13383778667828589,-0.09766920603260673,-0.9932177668483002,0.06308085137215193))
push(move(34.91511184276055,29.54161727154618,34.94948898049302))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09766920603260673,-0.9932177668483002,0.06308085137215193,0.12267487140839158,-0.9875437677622565,0.09853011051887155))
push(move(34.90640592599353,29.25406067117121,34.982117085918446))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12267487140839158,-0.9875437677622565,0.09853011051887155,0.6045835928822435,-0.7962465988097973,-0.021680246802728717))
push(move(34.97926714966668,29.02516127060115,35.00101729600916))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6045835928822435,-0.7962465988097973,-0.021680246802728717,0.9505920107634129,-0.2667719820301157,-0.15876882148739113))
push(move(35.16645505478142,28.9115716642604,34.97279177613609))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9505920107634129,-0.2667719820301157,-0.15876882148739113,0.9922968944252072,0.04984466907318258,-0.11341244322857168))
push(move(35.43376172757331,28.897612944929108,34.92510716033624))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9922968944252072,0.04984466907318258,-0.11341244322857168,0.9798559425416093,0.17525608357668737,0.09574777822621111))
push(move(35.72088475999081,28.939421560129027,34.9094244232606))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9798559425416093,0.17525608357668737,0.09574777822621111,0.8272369962992472,0.16762903126557138,0.5362643562933915))
push(move(35.96746269914999,28.993070183099228,34.977258379762524))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8272369962992472,0.16762903126557138,0.5362643562933915,0.6206627978229728,0.11080596771212416,0.7762085601936758))
push(move(36.12021799930483,29.020341350174462,35.1682960446766))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub62 inherits .../COPOLYFF



DPDPoly_sub63 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.1207332594215976,-0.03987680502343248,0.9918837232713119))
push(move(36.17267061150468,29.020737925570735,35.44408797188433))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1207332594215976,-0.03987680502343248,0.9918837232713119,-0.2675498914296517,-0.037720069048463506,0.96280540712387))
push(move(36.13732239164817,29.009062815680583,35.734491163931466))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2675498914296517,-0.037720069048463506,0.96280540712387,-0.6256269473370889,-0.006555343724928876,0.7800948341287253))
push(move(36.02672944996641,29.000162657680246,35.9692720364345))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6256269473370889,-0.006555343724928876,0.7800948341287253,-0.9450800622532203,0.04592757126625895,0.32359594269556613))
push(move(35.85322454761639,29.006086027313223,36.08873303516098))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9450800622532203,0.04592757126625895,0.32359594269556613,-0.9980666770107687,0.03857879448132221,-0.048729712261102405))
push(move(35.627598073080904,29.019559040578013,36.10593484345078))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9980666770107687,0.03857879448132221,-0.048729712261102405,-0.9854140867152815,-0.021123130423785618,-0.16885760588196086))
push(move(35.35998933967774,29.025151306373544,36.06465126756617))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9854140867152815,-0.021123130423785618,-0.16885760588196086,-0.9841754318691858,-0.10959180865295447,-0.13924207259760216))
push(move(35.06053535936631,29.00740360275574,36.00876467558567))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9841754318691858,-0.10959180865295447,-0.13924207259760216,-0.9843886490457388,-0.16686227506907494,-0.05599972132678473))
push(move(34.74196173962433,28.956331500174297,35.97721213713541))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9843886490457388,-0.16686227506907494,-0.05599972132678473,-0.9929496627895075,-0.11786567363417369,0.012595639918865486))
push(move(34.43568752714471,28.9014865638326,35.9732184464515))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9929496627895075,-0.11786567363417369,0.012595639918865486,-0.9979944776050182,-0.045916298345056415,0.04357426093664226))
push(move(34.181341887863226,28.88978448479501,35.98432364142286))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub63 inherits .../COPOLYFF



DPDPoly_sub64 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.19657701514742476,0.9801632858674879,0.025246983051017465))
push(move(34.01858924101214,28.96821551366158,35.99800041141997))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.19657701514742476,0.9801632858674879,0.025246983051017465,-0.0065762104054632176,0.9999601237116981,0.006041890696508181))
push(move(33.977472349905625,29.17323066795818,36.00328117861495))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0065762104054632176,0.9999601237116981,0.006041890696508181,0.13458207836545072,0.9908499254630978,-0.010202420919039543))
push(move(34.01534412353168,29.46165898294558,36.00098186181547))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13458207836545072,0.9908499254630978,-0.010202420919039543,0.017917990124635193,0.9998272481115864,-0.0049416154753199205))
push(move(34.05634904683908,29.753954121084416,35.997301680656584))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.017917990124635193,0.9998272481115864,-0.0049416154753199205,-0.5678674763606288,0.8224251610876587,0.033813957203339656))
push(move(34.02446100824034,29.970382879219592,35.99846750957788))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5678674763606288,0.8224251610876587,0.033813957203339656,-0.9939489946923324,0.09520782781947155,0.054780155823068576))
push(move(33.85586594607737,30.044307686490214,36.00923954868276))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9939489946923324,0.09520782781947155,0.054780155823068576,-0.9891676978711869,-0.1436170994078682,0.030354476537851376))
push(move(33.583311694630794,30.012639441796846,36.022780857918505))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9891676978711869,-0.1436170994078682,0.030354476537851376,-0.9975443052538125,-0.06510829971817723,-0.02581217471459023))
push(move(33.285422853172655,29.961485145320964,36.02674467093556))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9975443052538125,-0.06510829971817723,-0.02581217471459023,-0.8928364228222748,0.4204761407640293,-0.16137824243098028))
push(move(33.04110229421844,29.977250204480637,36.008750800605135))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8928364228222748,0.4204761407640293,-0.16137824243098028,-0.5964147082313543,0.7672110697847273,-0.23595904349077818))
push(move(32.91933024259924,30.133894339347293,35.96057422744653))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub64 inherits .../COPOLYFF



DPDPoly_sub65 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.1423195154727928,0.988892704365562,-0.04285294351797496))
push(move(32.90692927131914,30.40232932550203,35.90839393661314))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1423195154727928,0.988892704365562,-0.04285294351797496,0.1566240958878042,0.9825337705777684,0.10048025806874422))
push(move(32.95013850586304,30.702564304940577,35.895383472930675))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1566240958878042,0.9825337705777684,0.10048025806874422,0.09491193028485373,0.8272450434892438,0.553766524369325))
push(move(32.99490972235878,30.95424800574793,35.9648367104747))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09491193028485373,0.8272450434892438,0.553766524369325,-0.06952973476930831,0.31392879617646385,0.9468972103212184))
push(move(32.99415324815757,31.08619339450111,36.15218881645603))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06952973476930831,0.31392879617646385,0.9468972103212184,-0.09551687799337354,-0.037613415517098917,0.9947169230447108))
push(move(32.961142137432354,31.106709644224047,36.42470373099768))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09551687799337354,-0.037613415517098917,0.9947169230447108,0.027015004576953897,-0.17913634745553525,0.9834532823413611))
push(move(32.94014422427645,31.06492528042964,36.714641140907055))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.027015004576953897,-0.17913634745553525,0.9834532823413611,0.40646208460158323,-0.1887132161905718,0.8939663840527483))
push(move(32.975680954361856,31.0103028287576,36.95397431431182))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.40646208460158323,-0.1887132161905718,0.8939663840527483,0.9176619282624935,-0.03828293937259143,0.3955135926495531))
push(move(33.10721816679671,30.987355779536237,37.082100970304616))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9176619282624935,-0.03828293937259143,0.3955135926495531,0.9985583962993587,0.046200950460170476,-0.02732400696511935))
push(move(33.32824939944474,30.995594409467117,37.10593181420901))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9985583962993587,0.046200950460170476,-0.02732400696511935,0.9897216503856648,0.052831915938895746,-0.13289034357733198))
push(move(33.60773559725668,31.010513544865567,37.06840508450892))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub65 inherits .../COPOLYFF



DPDPoly_sub66 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9849034012438542,-0.13370164568565113,-0.1099507169564444))
push(move(33.914407778717845,31.007382932388854,37.012796680015846))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9849034012438542,-0.13370164568565113,-0.1099507169564444,0.984621054144797,-0.1614457392983256,-0.06675816801864631))
push(move(34.218196667528275,30.966143279521706,36.97888289102301))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.984621054144797,-0.1614457392983256,-0.06675816801864631,0.990353661084741,-0.1383262904104362,0.008090942920186105))
push(move(34.50047577017189,30.911286896496584,36.97306075797849))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.990353661084741,-0.1383262904104362,0.008090942920186105,0.9933405481750788,0.1023840888907954,0.05283988733178535))
push(move(34.74896341189481,30.892009161876267,36.98321912322101))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9933405481750788,0.1023840888907954,0.05283988733178535,0.8010497241039545,0.5967921015759634,0.046459950597512956))
push(move(34.95144549578271,30.957768563392012,36.99704970067805))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8010497241039545,0.5967921015759634,0.046459950597512956,0.4155807407067668,0.909513259118325,0.008847566986313947))
push(move(35.095682453410646,31.150319200836826,37.00332842362438))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4155807407067668,0.909513259118325,0.008847566986313947,0.10910292736730622,0.9939884808355615,-0.009135163167515269))
push(move(35.16917972481516,31.434287681992487,37.00168518540552))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10910292736730622,0.9939884808355615,-0.009135163167515269,-0.21637678440282523,0.976288662881318,-0.0064446800464817225))
push(move(35.159295867232395,31.729872858023036,36.998002087027125))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.21637678440282523,0.976288662881318,-0.0064446800464817225,-0.7094930922532476,0.7043990811988603,0.02101157897746101))
push(move(35.0533876725332,31.956739608647347,36.998236373967906))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7094930922532476,0.7043990811988603,0.02101157897746101,-0.9231429481586275,0.3823625415048071,0.04007473167698239))
push(move(34.84302825601512,32.04386973436597,37.00736832605561))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub66 inherits .../COPOLYFF



DPDPoly_sub67 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9830676137645955,-0.182460376204946,0.016919748294043246))
push(move(34.56412283780459,32.0182068538264,37.02010601691639))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9830676137645955,-0.182460376204946,0.016919748294043246,-0.9957183048976691,-0.0905679842048888,-0.018506688757726632))
push(move(34.27910087997921,31.96530590080615,37.02501157958284))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9957183048976691,-0.0905679842048888,-0.018506688757726632,-0.9067262460295329,0.39388407340257103,-0.15067465440806221))
push(move(34.050749311969966,31.971511714096316,37.0105643182127))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9067262460295329,0.39388407340257103,-0.15067465440806221,-0.2934026484757657,0.9320268671959536,-0.21269885917019501))
push(move(33.93576955446754,32.114449858656066,36.967958716003054))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2934026484757657,0.9320268671959536,-0.21269885917019501,0.04623908049305695,0.992045828048486,-0.11707699384059372))
push(move(33.92360955633931,32.37538560123435,36.91839582171717))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04623908049305695,0.992045828048486,-0.11707699384059372,0.13082657631021483,0.988932505541643,0.06997789946887265))
push(move(33.96192986069268,32.67571150950171,36.901721023165535))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13082657631021483,0.988932505541643,0.06997789946887265,0.046604426772047305,0.8777926453075843,0.47676839162130097))
push(move(33.99776311253513,32.93592050317716,36.958059858238514))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.046604426772047305,0.8777926453075843,0.47676839162130097,-0.13800079654831368,0.38996610395887527,0.9104296886169555))
push(move(33.98353856271268,33.08271060854822,37.122780412169334))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13800079654831368,0.38996610395887527,0.9104296886169555,-0.14225503311801807,-0.008827686950685606,0.9897906735748182))
push(move(33.93442100494444,33.11491421576083,37.37594538305102))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14225503311801807,-0.008827686950685606,0.9897906735748182,-0.09790997626619584,-0.1277302395119251,0.9869643471077257))
push(move(33.906049776738605,33.07790201422453,37.661936574047594))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub67 inherits .../COPOLYFF



DPDPoly_sub68 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.6795221182248447,-0.1535278961541972,0.717411232101705))
push(move(33.95473879133319,33.017820331669895,37.92454110674093))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6795221182248447,-0.1535278961541972,0.717411232101705,0.8531030868097401,-0.09210365467172166,0.5135484787941691))
push(move(34.13050953586863,32.97810755133468,38.110112559122825))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8531030868097401,-0.09210365467172166,0.5135484787941691,0.9921746633982313,0.0011604605762331338,0.12485227527705409))
push(move(34.40637281414563,32.96906052207798,38.19641442307643))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9921746633982313,0.0011604605762331338,0.12485227527705409,0.9709968661885165,0.04683364091778604,-0.23446043574655373))
push(move(34.70375799321667,32.978778030293356,38.182248420719844))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9709968661885165,0.04683364091778604,-0.23446043574655373,0.7241008607548025,0.05650722298995805,-0.6873753539399832))
push(move(34.94314535242334,32.99495042264059,38.066803373233))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7241008607548025,0.05650722298995805,-0.6873753539399832,0.20012717700125188,0.027299649269354073,-0.9793895252529914))
push(move(35.051773872580426,33.0059364165971,37.85188347956367))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20012717700125188,0.027299649269354073,-0.9793895252529914,-0.10046197873351419,0.0005629153538237022,-0.994940738916269))
push(move(35.04404412008019,33.00871417532034,37.573021381027964))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10046197873351419,0.0005629153538237022,-0.994940738916269,-0.12241847699873662,-0.013660694816747433,-0.992384553440063))
push(move(34.994958166721666,33.00625477020281,37.289200352257254))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12241847699873662,-0.013660694816747433,-0.992384553440063,0.21783080383834197,-0.023440655542195408,-0.9757050151387425))
push(move(34.98074382729827,33.00165048687474,37.05987798694982))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.21783080383834197,-0.023440655542195408,-0.9757050151387425,0.6093779872284523,-0.02502229726860567,-0.7924849230873744))
push(move(35.072916892385635,32.99786567369948,36.94000860222079))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub68 inherits .../COPOLYFF



DPDPoly_sub69 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9919197767015494,0.0009557487451421361,0.1268630881410529))
push(move(35.27889974440798,32.99612446398919,36.92329251250534))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9919197767015494,0.0009557487451421361,0.1268630881410529,0.9925922443933857,0.00414604372750361,0.1214225954734569))
push(move(35.55986235604389,32.99639518110746,36.959226652948466))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9925922443933857,0.00414604372750361,0.1214225954734569,0.9989689408281924,0.0099060191395259,0.044304921232371564))
push(move(35.8759503433803,32.998618335873495,36.99632898217926))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9989689408281924,0.0099060191395259,0.044304921232371564,0.9957235579198311,0.013493430692293308,-0.091392141520072))
push(move(36.18845714092559,33.002628479977474,36.987105239852454))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9957235579198311,0.013493430692293308,-0.091392141520072,0.9902524331106066,0.010115678335360851,-0.13891649207469564))
push(move(36.4751602958392,33.00673845907368,36.9413307044547))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9902524331106066,0.010115678335360851,-0.13891649207469564,0.9997170629380943,-0.006161418292600754,0.02297457279371993))
push(move(36.72618264867293,33.00812148164777,36.911670998301844))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997170629380943,-0.006161418292600754,0.02297457279371993,0.872023977740354,-0.03993223187615436,0.4878315273773105))
push(move(36.93194534298436,33.0039232187926,36.951828115878165))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.872023977740354,-0.03993223187615436,0.4878315273773105,0.48570844365224886,-0.0557056530625237,0.8723440766015369))
push(move(37.08269205186002,32.991795994599826,37.11111107233719))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.48570844365224886,-0.0557056530625237,0.8723440766015369,0.1506029375084143,-0.03685802587852701,0.9879070002496059))
push(move(37.16597257646457,32.97708275504154,37.37214667026605))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1506029375084143,-0.03685802587852701,0.9879070002496059,0.004326770958811539,-0.020362236457244897,0.9997833057115572))
push(move(37.16724315959527,32.97110325800038,37.66573923957228))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub69 inherits .../COPOLYFF



DPDPoly_sub70 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7920515841534733,0.17145959995764287,0.5858804431130453))
push(move(37.07190503363375,32.9853343082856,37.92133142099086))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7920515841534733,0.17145959995764287,0.5858804431130453,-0.9145792160398436,0.18691908152328415,0.3586169468254909))
push(move(36.868077066241746,33.02945802755897,38.07210293921475))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9145792160398436,0.18691908152328415,0.3586169468254909,-0.9906670661372446,0.13553846024330138,0.014425320304910193))
push(move(36.58753009268369,33.08432947183996,38.11126036251485))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9906670661372446,0.13553846024330138,0.014425320304910193,-0.9844893912513067,-0.05322140821641658,-0.16717691294282497))
push(move(36.29723530254583,33.107557942594596,38.080415091264825))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9844893912513067,-0.05322140821641658,-0.16717691294282497,-0.8190068660753181,-0.5200306493186223,-0.24247861161499973))
push(move(36.06516662274411,33.05609054949295,38.022557413438264))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8190068660753181,-0.5200306493186223,-0.24247861161499973,-0.2413682606620262,-0.9616446626476899,-0.13031080364343886))
push(move(35.95502411100865,32.890270010697314,37.979098609022515))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2413682606620262,-0.9616446626476899,-0.13031080364343886,0.08724308618455844,-0.9960819636019582,-0.014469474761058271))
push(move(35.95777462133355,32.62822590530046,37.96457821613078))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08724308618455844,-0.9960819636019582,-0.014469474761058271,0.11420935106814907,-0.9923884901113448,0.04605766845073238))
push(move(36.00353240155274,32.33643548455597,37.971053392875014))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11420935106814907,-0.9923884901113448,0.04605766845073238,-0.1544758245457871,-0.9828519545729233,0.10069386785243545))
push(move(36.02053766622306,32.08286492767324,37.98988892392698))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1544758245457871,-0.9828519545729233,0.10069386785243545,-0.467576632441871,-0.8741857047951684,0.13103986540779955))
push(move(35.940017843015376,31.93232430284947,38.012454865130444))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub70 inherits .../COPOLYFF



DPDPoly_sub71 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9940734712575108,0.10746804930272065,0.016387559949875688))
push(move(35.74713275901886,31.892641925314813,38.03021644028101))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9940734712575108,0.10746804930272065,0.016387559949875688,-0.989665676751272,0.14182219167092217,-0.02117343170350607))
push(move(35.47385594886679,31.922185542115653,38.03472147963551))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.989665676751272,0.14182219167092217,-0.02117343170350607,-0.9850757911724595,0.14335099487128908,-0.09526897666798313))
push(move(35.15371547281358,31.977680481346493,38.017520556533285))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9850757911724595,0.14335099487128908,-0.09526897666798313,-0.9849743397723076,0.07535280594948403,-0.15539467373641208))
push(move(34.820157648490415,32.01731355413703,37.97150079277614))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9849743397723076,0.07535280594948403,-0.15539467373641208,-0.9903509445681244,0.0030679777159039476,-0.13854816529192462))
push(move(34.50506090099067,32.02730405031187,37.91518543826071))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9903509445681244,0.0030679777159039476,-0.13854816529192462,-0.9974361825254471,-0.04887275883658184,0.0522734658575876))
push(move(34.23889178311033,32.01911423977457,37.89018283207045))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9974361825254471,-0.04887275883658184,0.0522734658575876,-0.782025625123344,-0.06439374144454241,0.6199107739934973))
push(move(34.05206641657595,32.005108053636626,37.93892589617629))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.782025625123344,-0.06439374144454241,0.6199107739934973,-0.16096095414145478,-0.016320911019474728,0.9868258200439258))
push(move(33.97274772097166,31.99719934162573,38.10115491054695))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16096095414145478,-0.016320911019474728,0.9868258200439258,0.0894488645903954,0.00866391396737084,0.99595373246866))
push(move(33.9831146703342,31.998116573491323,38.36165800466437))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0894488645903954,0.00866391396737084,0.99595373246866,0.1331890426769365,0.013195225103511845,0.9910028077383377))
push(move(34.022390062315914,32.00200764161383,38.65388942961206))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub71 inherits .../COPOLYFF



DPDPoly_sub72 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.4988524846462058,-0.04697670016212332,0.8654128426388096))
push(move(34.02814992705729,32.00269149345274,38.9093355014681))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4988524846462058,-0.04697670016212332,0.8654128426388096,-0.8253774176864453,-0.06495260783050148,0.5608326640890955))
push(move(33.94012211203583,31.99440195616573,39.06204678180388))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8253774176864453,-0.06495260783050148,0.5608326640890955,-0.99865944466979,-0.046565648122110975,0.02260429133581265))
push(move(33.744834852871364,31.98039617435175,39.10184421860465))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.99865944466979,-0.046565648122110975,0.02260429133581265,-0.9903621751477028,0.005442619814366861,-0.13839486958073066))
push(move(33.47416864975044,31.972675405556444,39.072593468030746))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9903621751477028,0.005442619814366861,-0.13839486958073066,-0.9883220727217225,0.08076446003690466,-0.1292152567075019))
push(move(33.16186610578233,31.983599928830348,39.020379189196596))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9883220727217225,0.08076446003690466,-0.1292152567075019,-0.9873303337392006,0.1524596522816212,-0.04398711748461975))
push(move(32.841391527732405,32.024385171020604,38.98986288807413))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9873303337392006,0.1524596522816212,-0.04398711748461975,-0.9888944933740688,0.1454838249651899,0.030366719413557577))
push(move(32.53974764663179,32.079665005247946,38.99266283448037))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9888944933740688,0.1454838249651899,0.030366719413557577,-0.9987245296361474,-0.033240904332795994,0.038004686318845834))
push(move(32.277441680968174,32.10735214206304,39.007180515864306))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9987245296361474,-0.033240904332795994,0.038004686318845834,-0.8525763006450819,-0.5179207889391049,-0.06979762147123865))
push(move(32.07469576546515,32.06418651780429,39.0103595569912))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8525763006450819,-0.5179207889391049,-0.06979762147123865,-0.6165537677904404,-0.7730843956604119,-0.1490032503329631))
push(move(31.950937091682768,31.909008000492385,38.98045065753453))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub72 inherits .../COPOLYFF



DPDPoly_sub73 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0432115381244949,-0.9937910094147555,-0.10252898409384764))
push(move(31.90585243104824,31.652802995861833,38.92816244499894))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0432115381244949,-0.9937910094147555,-0.10252898409384764,0.11045281342809497,-0.9937743471619429,0.014585024123142339))
push(move(31.918543235034427,31.360936345168135,38.898050690210454))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11045281342809497,-0.9937743471619429,0.014585024123142339,0.2342765109331749,-0.8869849617910667,0.3979600406843354))
push(move(31.96714693893881,31.10131944670606,38.93625623499354))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2342765109331749,-0.8869849617910667,0.3979600406843354,0.2455992259918205,-0.44521265883058614,0.8610846117596218))
push(move(32.02973738541899,30.93994860364259,39.08693359799596))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2455992259918205,-0.44521265883058614,0.8610846117596218,0.12836920338510155,-0.04168744056020429,0.9908498902062883))
push(move(32.08269611684584,30.891856422081588,39.34137811025764))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12836920338510155,-0.04168744056020429,0.9908498902062883,-0.044389445559247266,0.14372221506944224,0.9886220218154539))
push(move(32.10057400108967,30.916944665568764,39.633703781256465))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.044389445559247266,0.14372221506944224,0.9886220218154539,-0.36428580728433596,0.21157063126453507,0.9069364468349069))
push(move(32.0578305849359,30.972364959188823,39.89517219623038))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.36428580728433596,0.21157063126453507,0.9069364468349069,-0.8389297626376856,0.14295238189738088,0.5251299552211262))
push(move(31.929821931039644,31.016114390350307,40.058813057007086))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8389297626376856,0.14295238189738088,0.5251299552211262,-0.9985215892183492,0.017170999335871406,0.05157317758941807))
push(move(31.71752554156358,31.03035243166663,40.1081868968005))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9985215892183492,0.017170999335871406,0.05157317758941807,-0.9955196191406319,-0.022377419635957213,-0.09186914061058439))
push(move(31.450671800819045,31.024354058532385,40.08356093930095))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub73 inherits .../COPOLYFF



DPDPoly_sub74 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.987061347612767,-0.05056556553376294,-0.1521611633470227))
push(move(31.16051650906575,31.008832795012797,40.028210847129856))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.987061347612767,-0.05056556553376294,-0.1521611633470227,-0.9937137058755017,-0.04037862153421369,-0.10441569651241911))
push(move(30.87776987326557,30.994348139548794,39.98462383286791))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9937137058755017,-0.04037862153421369,-0.10441569651241911,-0.9997722676115178,-0.0159505099619591,-0.014177240453538893))
push(move(30.616358535986052,30.98672144773048,39.971032775180205))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997722676115178,-0.0159505099619591,-0.014177240453538893,-0.9989528443205729,0.012901798533412707,0.0438948564007287))
push(move(30.3706691950188,30.986257782692412,39.97743290701153))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9989528443205729,0.012901798533412707,0.0438948564007287,-0.9974793583463839,0.043198330967719356,0.05629239624043016))
push(move(30.13398767984056,30.99295142308894,39.99222856993947))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9974793583463839,0.043198330967719356,0.05629239624043016,-0.9974956320029091,0.06265875934884177,0.032807682209824676))
push(move(29.899630009735947,31.00665730921329,40.00401583751615))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9974956320029091,0.06265875934884177,0.032807682209824676,-0.9987821983153645,0.04914949553196953,0.0042950456669137325))
push(move(29.66191431698691,31.02260521834281,40.00775508691993))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9987821983153645,0.04914949553196953,0.0042950456669137325,-0.9999183186809429,-0.006236715786525004,-0.011156134746156095))
push(move(29.416369163809495,31.03043829652734,40.006093995702976))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999183186809429,-0.006236715786525004,-0.011156134746156095,-0.9953783817344355,-0.0950958164925779,-0.013366482758985426))
push(move(29.158595432036954,31.01946590508414,40.00213953493345))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9953783817344355,-0.0950958164925779,-0.013366482758985426,-0.9895341791495,-0.14383904009209356,-0.011508207519431294))
push(move(28.884532685384983,30.979628046792772,39.99895220595758))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub74 inherits .../COPOLYFF



DPDPoly_sub75 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9931503443382431,-0.1168325011444846,0.001600067858917212))
push(move(28.60228363052957,30.923513063951685,39.99792363469373))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9931503443382431,-0.1168325011444846,0.001600067858917212,-0.9999518117403166,0.00934541970621421,0.003006214858122473))
push(move(28.33519432931638,30.89209313718273,39.998353943164915))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999518117403166,0.00934541970621421,0.003006214858122473,-0.9076393759092287,0.419727269137145,0.004447790662858506))
push(move(28.107575424935668,30.928136542562456,39.99941090552081))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9076393759092287,0.419727269137145,0.004447790662858506,-0.5357964328858764,0.8443436374081328,0.002450403063615226))
push(move(27.943478231043365,31.073237689269277,40.000273506430496))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5357964328858764,0.8443436374081328,0.002450403063615226,-0.17283833078495417,0.984950156977443,0.00031572390019793937))
push(move(27.856848662826096,31.32324844201075,40.00055757539074))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.17283833078495417,0.984950156977443,0.00031572390019793937,0.10986437782765263,0.993946338239643,-0.0007036935042594454))
push(move(27.84849148571705,31.614536655158577,40.000447018784875))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10986437782765263,0.993946338239643,-0.0007036935042594454,0.44569496716824386,0.8951842614637947,-0.0010650203840633506))
push(move(27.91833182242309,31.87948844039043,40.00016376894605))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.44569496716824386,0.8951842614637947,-0.0010650203840633506,0.8459023643352009,0.5333372625346738,-0.0007445831972551581))
push(move(28.066066172270837,32.051538303019555,39.999927108323))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8459023643352009,0.5333372625346738,-0.0007445831972551581,0.9969931401275159,0.077489766808027,-0.00012074234107201823))
push(move(28.28169433476551,32.10858670966023,39.999843928698986))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9969931401275159,0.077489766808027,-0.00012074234107201823,0.9970505403556443,-0.07674770633265082,9.771998281581734e-05))
push(move(28.542130686143715,32.08853968916838,39.99986945382008))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub75 inherits .../COPOLYFF



DPDPoly_sub76 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9853155346203621,-0.1707431494539637,0.0002723055843457278))
push(move(28.823364092387703,32.03354736415462,39.99994818020401))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9853155346203621,-0.1707431494539637,0.0002723055843457278,0.992209056050173,-0.12458387307983543,0.0002183127397682998))
push(move(29.101617208047422,31.985329497244177,40.00002507930343))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.992209056050173,-0.12458387307983543,0.0002183127397682998,0.9994540296135986,-0.03303988851436272,9.195704741969079e-05))
push(move(29.36394194460526,31.96567126272239,40.0000671219041))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9994540296135986,-0.03303988851436272,9.195704741969079e-05,0.9991788214347767,0.040517646928221906,-5.553026941740753e-05))
push(move(29.612556891335352,31.968438885296848,40.00007208947427))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9991788214347767,0.040517646928221906,-5.553026941740753e-05,0.9964033303526294,0.0847369915796499,-0.00021335467981742118))
push(move(29.85081288430068,31.985414340148573,40.00004006360996))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9964033303526294,0.0847369915796499,-0.00021335467981742118,0.995642041310738,0.09325673476279032,-0.00032710238359221747))
push(move(30.08211598956897,32.00837153519986,39.99997154521874))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.995642041310738,0.09325673476279032,-0.00032710238359221747,0.9981432534241611,0.06090953536011207,-0.00027229771597988157))
push(move(30.312676560641357,32.02867476565689,39.999888325632696))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9981432534241611,0.06090953536011207,-0.00027229771597988157,0.9999626119521856,-0.008647234538689649,5.709259455020853e-06))
push(move(30.552781490762683,32.03709288044705,39.99984314567236))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999626119521856,-0.008647234538689649,5.709259455020853e-06,0.9949520859509129,-0.10035016031915396,0.0004381618965468512))
push(move(30.813038569698815,32.02434785623562,39.99989118243604))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9949520859509129,-0.10035016031915396,0.0004381618965468512,0.989321132471044,-0.14575067133705835,0.0006623073363537272))
push(move(31.1036750917458,31.98153014334839,40.000085750907736))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub76 inherits .../COPOLYFF



DPDPoly_sub77 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.991813794736693,-0.12769108994440526,0.0006181575939254992))
push(move(31.41365583255403,31.920320918408578,40.00037610900937))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.991813794736693,-0.12769108994440526,0.0006181575939254992,0.9999683212159293,-0.007959540736212342,4.7706025088743285e-05))
push(move(31.69985954911937,31.883473614299373,40.00055448825933))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999683212159293,-0.007959540736212342,4.7706025088743285e-05,0.8707504243993872,0.4917196632714291,-0.0023390512007026992))
push(move(31.916504246315416,31.916318349178578,40.00040009866838))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8707504243993872,0.4917196632714291,-0.0023390512007026992,0.21720083024536072,0.976117620558582,-0.004264994229551392))
push(move(32.018555155538316,32.06344354814408,39.999698392965016))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.21720083024536072,0.976117620558582,-0.004264994229551392,-0.11148883887780164,0.9937608025313576,-0.0031154707367788883))
push(move(32.00713534065575,32.32362161802968,39.99862045034041))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11148883887780164,0.9937608025313576,-0.0031154707367788883,-0.11187238911178056,0.9937225542688858,-0.00023171478936073126))
push(move(31.95568451473968,32.62384384547064,39.99794152076523))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11187238911178056,0.9937225542688858,-0.00023171478936073126,0.2290264045201169,0.9733910352881974,0.007536474849629954))
push(move(31.94395429122875,32.884836358471624,39.99848958709814))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2290264045201169,0.9733910352881974,0.007536474849629954,0.9195363194979072,0.39262463101523903,0.017287459165245034))
push(move(32.050821871607816,33.028189582332274,40.00107216545574))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9195363194979072,0.39262463101523903,0.017287459165245034,0.9963925489124348,-0.08401025575177547,0.012006889701447662))
push(move(32.29516688568283,33.03479749908294,40.00509245123325))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9963925489124348,-0.08401025575177547,0.012006889701447662,0.9851481854455807,-0.17150195039379212,0.008374588014046568))
push(move(32.59826145705859,32.98203253345373,40.00766900997037))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub77 inherits .../COPOLYFF



DPDPoly_sub78 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.8765366454221216,0.47844205439374793,-0.0526944951548434))
push(move(32.87241828170911,32.956122900666045,40.005710700221634))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8765366454221216,0.47844205439374793,-0.0526944951548434,0.48593404113972133,0.8713200356154289,-0.06833376322688063))
push(move(33.030738645772935,33.04253927655936,39.996193001559924))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.48593404113972133,0.8713200356154289,-0.06833376322688063,-0.06629085817488738,0.9966766171389171,-0.04734176772113394))
push(move(33.04674685030324,33.26870848170492,39.98119600044458))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06629085817488738,0.9966766171389171,-0.04734176772113394,-0.14112614676021898,0.9899802221523906,-0.004750836528100933))
push(move(32.99605608549561,33.5639882033439,39.97142437195052))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14112614676021898,0.9899802221523906,-0.004750836528100933,0.08256853292292667,0.9927487879623664,0.0873629290386267))
push(move(32.964126799413066,33.84827660718821,39.978414699000915))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08256853292292667,0.9927487879623664,0.0873629290386267,0.7110874811027496,0.6638862536878786,0.23153754853850525))
push(move(33.03581143273853,34.04197989573922,40.01348813955229))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7110874811027496,0.6638862536878786,0.23153754853850525,0.9779927933475311,0.09714054777754874,0.1846450923739136))
push(move(33.243633019803646,34.10922950323666,40.06942485849653))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9779927933475311,0.09714054777754874,0.1846450923739136,0.9917582803231516,-0.12641814453141312,0.020831854062944605))
push(move(33.528276429659776,34.090894693361044,40.106465557653905))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9917582803231516,-0.12641814453141312,0.020831854062944605,0.9440980015860444,-0.1780196130369583,-0.2774670805256168))
push(move(33.82112432868297,34.03561743344103,40.08155504677716))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9440980015860444,-0.1780196130369583,-0.2774670805256168,0.8621292307225484,-0.16234972211507864,-0.4799747464845454))
push(move(34.053804090502354,33.99180092272892,39.95201482738599))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub78 inherits .../COPOLYFF



DPDPoly_sub79 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.07584202324607714,0.042069995966482594,-0.9962319523832396))
push(move(34.18175547922705,33.98461390952427,39.711822165515606))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07584202324607714,0.042069995966482594,-0.9962319523832396,-0.10299948796960817,0.03932010889330545,-0.993903936260752))
push(move(34.20383539539982,33.99686176295132,39.42178879014154))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10299948796960817,0.03932010889330545,-0.993903936260752,-0.4926334746069671,-0.007246835409036877,-0.8702067243323398))
push(move(34.123515570851154,34.006847025284536,39.1498303020284))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4926334746069671,-0.007246835409036877,-0.8702067243323398,-0.858877074792644,-0.10556665432278121,-0.5011844489713599))
push(move(33.944416227417086,33.99304560325202,38.96354079028854))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.858877074792644,-0.10556665432278121,-0.5011844489713599,-0.9863703807412322,-0.13042433998183714,-0.10031432368659536))
push(move(33.68661387549446,33.95314638336451,38.894883067006596))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9863703807412322,-0.13042433998183714,-0.10031432368659536,-0.9922098508268413,-0.032280801941449624,0.12032273994633706))
push(move(33.40136350222465,33.921239621805846,38.90831207710181))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9922098508268413,-0.032280801941449624,0.12032273994633706,-0.9443546682852596,0.24485796037605506,0.21963342124621055))
push(move(33.14339551390966,33.9354731821494,38.96075776236522))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9443546682852596,0.24485796037605506,0.21963342124621055,-0.6287760877937766,0.7581339392568305,0.17283969904415275))
push(move(32.96721589135652,34.03380802652643,39.00928401942723))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6287760877937766,0.7581339392568305,0.17283969904415275,-0.12838870025578578,0.9911732628403899,0.033043980949116085))
push(move(32.89877272450472,34.23042211955936,39.028000347000464))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12838870025578578,0.9911732628403899,0.033043980949116085,0.03432314022148497,0.9993258594378758,-0.013028764488136814))
push(move(32.90777967272315,34.492661419670526,39.02458138806088))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub79 inherits .../COPOLYFF



DPDPoly_sub80 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.1876859394841459,0.9811774411750499,-0.04544025802231949))
push(move(32.95738053357561,34.78240050759304,39.01062319737862))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1876859394841459,0.9811774411750499,-0.04544025802231949,0.15882560652101133,0.986747135876998,-0.0332342677333845))
push(move(33.010794594711825,35.061636512018545,38.9976912285443))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15882560652101133,0.986747135876998,-0.0332342677333845,0.07916872336124389,0.9968303797347225,-0.007842657666858883))
push(move(33.042372647272266,35.31043705408791,38.992838592467024))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07916872336124389,0.9968303797347225,-0.007842657666858883,-0.022985076320441306,0.9996883627206979,0.009739800170104953))
push(move(33.04925187567675,35.54586038680443,38.99388155122981))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.022985076320441306,0.9996883627206979,0.009739800170104953,-0.11636830802404599,0.9931270297904374,0.012534735228330877))
push(move(33.031358106067046,35.78949174636118,38.99750594396104))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11636830802404599,0.9931270297904374,0.012534735228330877,-0.1693983245007964,0.9855322373254507,0.0055151471979162075))
push(move(32.98868044813932,36.062797712283,39.00040606653364))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1693983245007964,0.9855322373254507,0.0055151471979162075,-0.15384290755239508,0.988094737219351,-0.0010724156129047258))
push(move(32.93213476581188,36.36675719927962,39.000736385162796))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15384290755239508,0.988094737219351,-0.0010724156129047258,-0.028671476921081865,0.9995842186573917,-0.0030555232376200626))
push(move(32.8958939764795,36.65874214541195,38.99975926608988))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.028671476921081865,0.9995842186573917,-0.0030555232376200626,0.3595237282884745,0.9331338156788819,0.0019926951913131407))
push(move(32.917110978011344,36.89053702517453,38.99913529803122))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3595237282884745,0.9331338156788819,0.0019926951913131407,0.6834650002140843,0.7299375753690969,0.008168815498339024))
push(move(33.03280947432921,37.014102503801325,39.00051813353788))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub80 inherits .../COPOLYFF



DPDPoly_sub81 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9847163348762338,-0.17385010165079012,0.01048246077631362))
push(move(33.253579961026404,37.0174480445998,39.00414227894982))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9847163348762338,-0.17385010165079012,0.01048246077631362,0.9917411344158725,-0.12821000927255966,0.00342283944242503))
push(move(33.531499620601515,36.968381771037926,39.00710077758266))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9917411344158725,-0.12821000927255966,0.00342283944242503,0.9931717207824173,0.11519089230757144,-0.01846595157249047))
push(move(33.81079961273726,36.945411971643345,39.006065435442764))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9931717207824173,0.11519089230757144,-0.01846595157249047,0.761163276760295,0.6466588330391136,-0.04962680489435259))
push(move(34.03577403702846,37.02686895787641,38.99772484917256))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.761163276760295,0.6466588330391136,-0.04962680489435259,0.29977704659345733,0.9528059352134277,-0.047901692639920425))
push(move(34.16618722981838,37.24733739126734,38.98289464873611))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.29977704659345733,0.9528059352134277,-0.047901692639920425,-0.06255273494001055,0.9979784497006483,-0.011232510165371488))
push(move(34.19742776087601,37.54066622581794,38.971894028961884))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06255273494001055,0.9979784497006483,-0.011232510165371488,-0.43328908528104587,0.8987681643686737,0.06690556997499719))
push(move(34.12988093899929,37.826574987525255,38.97637517710815))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43328908528104587,0.8987681643686737,0.06690556997499719,-0.8296682675789065,0.5304059134749988,0.17412677198916923))
push(move(33.96397991859145,38.024905261171966,39.00794146583039))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8296682675789065,0.5304059134749988,0.17412677198916923,-0.9800594193989052,0.08732542530891778,0.17848754730259922))
push(move(33.714512749975654,38.09211936512384,39.06355064803792))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9800594193989052,0.08732542530891778,0.17848754730259922,-0.9871479654067792,-0.06849129383014371,0.14438780094845058))
push(move(33.43066263544516,38.072424990745006,39.10506873374773))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub81 inherits .../COPOLYFF



DPDPoly_sub82 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.8483781532679727,-0.09984275353656238,-0.5198903092228796))
push(move(33.16665718012553,38.02289859091739,39.08921516792049))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8483781532679727,-0.09984275353656238,-0.5198903092228796,-0.6186669965157531,0.023676361402193886,-0.7852964900806126))
push(move(32.97666457917182,38.0005390047379,38.972786766647545))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6186669965157531,0.023676361402193886,-0.7852964900806126,-0.16008861399071023,0.14407685497995662,-0.9765313592146532))
push(move(32.89268422601264,38.0333835249975,38.74145134593942))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16008861399071023,0.14407685497995662,-0.9765313592146532,0.08511205565534531,0.07637118223674282,-0.9934401745982915))
push(move(32.89143212668198,38.07724666926723,38.45287369722755))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08511205565534531,0.07637118223674282,-0.9934401745982915,0.23781943009579187,-0.20079141629543332,-0.9503287461773356))
push(move(32.94114970648187,38.07687167732336,38.17575527610985))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.23781943009579187,-0.20079141629543332,-0.9503287461773356,0.29002960728029953,-0.7296921370303043,-0.61921903399119))
push(move(33.01008458354931,37.97706816471137,37.97873733032022))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.29002960728029953,-0.7296921370303043,-0.61921903399119,0.16813395394621364,-0.977237355926792,-0.12937590081473962))
push(move(33.0694232706426,37.75414527695805,37.901888641489165))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16813395394621364,-0.977237355926792,-0.12937590081473962,0.011129747554831744,-0.9947086811197059,0.10213113347290781))
push(move(33.09798183766625,37.46618694060157,37.911102054020475))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.011129747554831744,-0.9947086811197059,0.10213113347290781,-0.22636003247185058,-0.9568222036045715,0.18235242358859582))
push(move(33.07579840098546,37.184375166353895,37.96038945516406))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22636003247185058,-0.9568222036045715,0.18235242358859582,-0.4059451285472641,-0.8939922362102549,0.18970090723170782))
push(move(32.98292612978005,36.97984730389628,38.00378929633813))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub82 inherits .../COPOLYFF



DPDPoly_sub83 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9984318393449578,0.022891461321795335,-0.05108662428461187))
push(move(32.80875139064244,36.89604952168002,38.01181061162258))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9984318393449578,0.022891461321795335,-0.05108662428461187,-0.993483343126643,0.10586480862454688,-0.042231377254327136))
push(move(32.56789050368707,36.90157183923881,37.99948651582369))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.993483343126643,0.10586480862454688,-0.042231377254327136,-0.9857810616325557,0.1678942765181126,0.006870985304211734))
push(move(32.27918100084988,36.95248012855077,37.98929942704281))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9857810616325557,0.1678942765181126,0.006870985304211734,-0.9888610664481966,0.11600642899587407,0.09325395270207265))
push(move(31.961465553226507,37.00485570447304,38.00371335389646))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9888610664481966,0.11600642899587407,0.09325395270207265,-0.9895418517371641,0.03462818179808293,0.14002789966982765))
push(move(31.637890434231693,37.027711959498795,38.049775951194476))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9895418517371641,0.03462818179808293,0.14002789966982765,-0.9974758952542528,-0.028279077767508685,0.06513165242296809))
push(move(31.343718934318794,37.026473225942325,38.091129324652954))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9974758952542528,-0.028279077767508685,0.06513165242296809,-0.9536265718742851,-0.07512336581775517,-0.2914667070584742))
push(move(31.116331386679704,37.01292542787809,38.08383191461658))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9536265718742851,-0.07512336581775517,-0.2914667070584742,-0.383697242832761,-0.059634040083699366,-0.9215314466179833))
push(move(30.99308668887558,36.99885164405817,37.983961981604836))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.383697242832761,-0.059634040083699366,-0.9215314466179833,0.08141047687204982,-0.011885348571425468,-0.9966097896091535))
push(move(30.986065681905345,36.9926795949847,37.77097080964964))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08141047687204982,-0.011885348571425468,-0.9966097896091535,0.16711207207730802,0.0011180651087462033,-0.9859372724957919))
push(move(31.03320287713221,36.992994966894415,37.4928681141509))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub83 inherits .../COPOLYFF



DPDPoly_sub84 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.2998739202148575,0.015402187732202605,-0.9538544986464317))
push(move(31.05890798715376,36.996588191511314,37.210169138327494))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2998739202148575,0.015402187732202605,-0.9538544986464317,-0.6238672359812435,0.01129826184849195,-0.7814486682747155))
push(move(30.987609789052332,37.00025022464624,36.98338013661736))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6238672359812435,0.01129826184849195,-0.7814486682747155,-0.9551592112863894,0.002248488418964555,-0.29608415255564186))
push(move(30.777156344785134,37.001690725589285,36.857250387326125))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9551592112863894,0.002248488418964555,-0.29608415255564186,-0.9989203498390674,-0.002032743568697345,0.04641123388770268))
push(move(30.48754299412016,37.00142740472661,36.828367389580876))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9989203498390674,-0.002032743568697345,0.04641123388770268,-0.9384466278397471,-0.002687510872851399,0.34541381556260287))
push(move(30.19821339887301,37.00051261108783,36.884148884763576))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9384466278397471,-0.002687510872851399,0.34541381556260287,-0.6743237170277975,-2.4820309818741975e-06,0.7384358635979528))
push(move(29.988601143645003,36.99999854174358,37.01201279167818))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6743237170277975,-2.4820309818741975e-06,0.7384358635979528,-0.1517041272234802,0.0030748948102801753,0.9884211667124839))
push(move(29.909899818031157,37.000511549871646,37.199874229549565))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1517041272234802,0.0030748948102801753,0.9884211667124839,0.1204495557169942,0.0017702016096600188,0.9927178707537402))
push(move(29.923337922536334,37.00132136363091,37.437232265480745))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1204495557169942,0.0017702016096600188,0.9927178707537402,0.13057236515169243,-0.0025346895079277664,0.9914355414285851))
push(move(29.972268251902847,37.00142815517894,37.71390069072491))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13057236515169243,-0.0025346895079277664,0.9914355414285851,0.09047183236793829,-0.005197442691572123,0.9958854523174117))
push(move(30.000048064232193,36.99983225534155,38.01969212041975))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub84 inherits .../COPOLYFF



DPDPoly_sub85 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.14794895065546743,-0.010072354024605884,0.9889437070351117))
push(move(29.97219585683598,36.996321805949435,38.338579581963934))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14794895065546743,-0.010072354024605884,0.9889437070351117,-0.09530107323740082,-0.0048783322833173826,0.9954365410783016))
push(move(29.927829164981574,36.99330132472751,38.63514242013882))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09530107323740082,-0.0048783322833173826,0.9954365410783016,0.2102184903033222,0.019148083249232947,0.9774668982847821))
push(move(29.921324570583096,36.993717774015785,38.86993915124844))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2102184903033222,0.019148083249232947,0.9774668982847821,0.891230992744828,0.061402394588089146,0.44937407970411125))
push(move(30.00705637093465,37.0005178599286,39.00353042992322))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.891230992744828,0.061402394588089146,0.44937407970411125,0.9968487894467306,0.050565242183621094,-0.06111994160255282))
push(move(30.215901296650745,37.01401297976796,39.018469831012176))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9968487894467306,0.050565242183621094,-0.06111994160255282,0.9912861669514821,0.017197731263108248,-0.13059851932560437))
push(move(30.497368908335922,37.02538900634703,38.973467822665))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9912861669514821,0.017197731263108248,-0.13059851932560437,0.9967835318042607,-0.05245617760542313,0.06058828397349265))
push(move(30.783368660892553,37.023857918148195,38.94370797111102))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9967835318042607,-0.05245617760542313,0.06058828397349265,0.7757188232568796,-0.17661557238889009,0.6058607487159957))
push(move(31.005810675787234,36.99863203173373,39.004372841866676))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7757188232568796,-0.17661557238889009,0.6058607487159957,0.2429902700513049,-0.18421877200743583,0.9523755418428521))
push(move(31.11513417910828,36.94832158314919,39.202827254075444))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2429902700513049,-0.18421877200743583,0.9523755418428521,0.04727961402316786,-0.1494516773270929,0.9876380076940836))
push(move(31.128689230820108,36.9054738303398,39.4859827861891))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub85 inherits .../COPOLYFF



DPDPoly_sub86 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3142338640681752,0.361216489988755,0.8779406164616074))
push(move(31.07892427479687,36.91029389703595,39.778083811588374))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3142338640681752,0.361216489988755,0.8779406164616074,-0.3398353110961528,0.6293971400296083,0.6988356040262479))
push(move(30.998287753046306,37.00298677543724,40.00337486296802))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3398353110961528,0.6293971400296083,0.6988356040262479,-0.2498389239912881,0.9437068150458927,0.2167901273001445))
push(move(30.918983431651956,37.20651476038481,40.106985347356144))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2498389239912881,0.9437068150458927,0.2167901273001445,-0.053139767754715315,0.9954566962159471,-0.07900715816814657))
push(move(30.872293564141387,37.47889970696227,40.11270248820519))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.053139767754715315,0.9954566962159471,-0.07900715816814657,0.23418886443364245,0.9501912346809513,-0.20565065842532698))
push(move(30.88928349741667,37.76287771906682,40.062828071160624))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.23418886443364245,0.9501912346809513,-0.20565065842532698,0.6419215400337929,0.7398038289932536,-0.20156148205340343))
push(move(31.00101857491827,38.001184902802834,39.99966388030172))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6419215400337929,0.7398038289932536,-0.20156148205340343,0.929703741313255,0.35416049488235113,-0.10110043151651012))
push(move(31.222441828614194,38.146837118634494,39.958217331675115))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.929703741313255,0.35416049488235113,-0.10110043151651012,0.999983684191614,-0.005600082426606423,0.0011271323708389933))
push(move(31.505161993796577,38.19323283677093,39.944840913662034))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999983684191614,-0.005600082426606423,0.0011271323708389933,0.9272042561404591,-0.36017080466767093,0.1028069008387094))
push(move(31.78523781628408,38.14368536329074,39.958851687601026))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9272042561404591,-0.36017080466767093,0.1028069008387094,0.8220276073563655,-0.5474429282155361,0.1567700643961348))
push(move(31.99872804189534,38.00150800427249,39.99956671483066))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub86 inherits .../COPOLYFF



DPDPoly_sub87 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.027463884049804536,-0.9847606309115774,0.17173303374578563))
push(move(32.098464623622824,37.77663482612614,40.05997679665113))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.027463884049804536,-0.9847606309115774,0.17173303374578563,-0.0695486013236508,-0.9946681593922797,0.07614620637364865))
push(move(32.106008735692285,37.506128857352124,40.107150504865785))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0695486013236508,-0.9946681593922797,0.07614620637364865,-0.20042979248115192,-0.9594624227869637,-0.1981407518551701))
push(move(32.06052288442025,37.23400076622404,40.10151781183344))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.20042979248115192,-0.9594624227869637,-0.1981407518551701,-0.1987963371760665,-0.7571288910317671,-0.6222827803261041))
push(move(32.00116958502781,37.0042612245304,40.00350868655442))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1987963371760665,-0.7571288910317671,-0.6222827803261041,-0.10043304838836035,-0.38076353937641094,-0.919202007108867))
push(move(31.961016617463574,36.855024620980004,39.79003804645511))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10043304838836035,-0.38076353937641094,-0.919202007108867,-0.0028145983787904645,-0.02131193761732606,-0.9997689129748741))
push(move(31.947082132606987,36.79920392367093,39.50847945441983))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0028145983787904645,-0.02131193761732606,-0.9997689129748741,0.09433200902879234,0.35741386087394067,-0.9291699543828218))
push(move(31.95942597128989,36.842980361919714,39.225027205840426))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09433200902879234,0.35741386087394067,-0.9291699543828218,0.18690384836591112,0.7636533562741167,-0.6179809891228769))
push(move(31.998107904110334,36.992535097096024,39.005875786076004))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18690384836591112,0.7636533562741167,-0.6179809891228769,0.18785714115056362,0.9614152629635115,-0.20097359692143388))
push(move(32.057298498016465,37.24286877607079,38.901420381244534))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18785714115056362,0.9614152629635115,-0.20097359692143388,0.15858967489542988,0.9868042758267884,-0.03265939721626053))
push(move(32.10491136299506,37.539133831007206,38.89161515608744))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub87 inherits .../COPOLYFF



DPDPoly_sub88 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.4392849303801674,0.8524672588578002,0.2834225158951916))
push(move(32.10154521199625,37.81259553423554,38.936790187936424))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4392849303801674,0.8524672588578002,0.2834225158951916,-0.7739973248265462,0.5765915461241732,0.26166835899566754))
push(move(32.00779844740672,37.99451856848865,38.99727472095695))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7739973248265462,0.5765915461241732,0.26166835899566754,-0.9932547142383972,0.004120874170900092,0.11587964031385106))
push(move(31.799146870134024,38.037868053774034,39.03902320004126))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9932547142383972,0.004120874170900092,0.11587964031385106,-0.9890150937377664,-0.14769659384854478,0.00590428017755744))
push(move(31.520263419260417,37.996541282779454,39.05415377009926))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9890150937377664,-0.14769659384854478,0.00590428017755744,-0.9950523207479023,-0.007423691869957727,-0.09907455663909769))
push(move(31.235923940676226,37.95375800450883,39.04238556124181))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9950523207479023,-0.007423691869957727,-0.09907455663909769,-0.8138791672988668,0.5295343552081481,-0.2391528124258509))
push(move(31.01090647693559,37.99274117205884,39.003438534146696))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8138791672988668,0.5295343552081481,-0.2391528124258509,-0.26953875327291077,0.9362239161022378,-0.2254631663981392))
push(move(30.896476415852213,38.17461281122571,38.94264123371211))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.26953875327291077,0.9362239161022378,-0.2254631663981392,0.04465432799376701,0.9954406340801599,-0.08428484450667449))
push(move(30.878326945396008,38.45324685706998,38.892538707618854))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04465432799376701,0.9954406340801599,-0.08428484450667449,0.20922798392488515,0.9626887310480595,0.17162184550867926))
push(move(30.922289023118097,38.750031125607244,38.89392005286665))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20922798392488515,0.9626887310480595,0.17162184550867926,0.27217367320283564,0.8945560031347057,0.35452933428834427))
push(move(30.994189231017437,38.986346276320056,38.987576182578906))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub88 inherits .../COPOLYFF



DPDPoly_sub89 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.1369504587968001,0.036105025230045815,0.9899196932016676))
push(move(31.061592425482406,39.099798455939364,39.199825174566314))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1369504587968001,0.036105025230045815,0.9899196932016676,0.0517513081948981,-0.0642199701722415,0.9965929949238018))
push(move(31.100865281210336,39.110152181362196,39.483701356032995))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0517513081948981,-0.0642199701722415,0.9965929949238018,-0.17135194312688942,-0.2030046432672948,0.9640682685362887))
push(move(31.091153784063174,39.063114753970744,39.76909856899093))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.17135194312688942,-0.2030046432672948,0.9640682685362887,-0.6025501034929437,-0.22341600710163453,0.7661714302631006))
push(move(31.011604986189823,39.004403428135895,39.98590177756974))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6025501034929437,-0.22341600710163453,0.7661714302631006,-0.9712284781260822,-0.08699009562636986,0.22169340662232026))
push(move(30.84705712919198,38.97260759172473,40.07947920306759))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9712284781260822,-0.08699009562636986,0.22169340662232026,-0.9957487961003281,0.01635080382490044,-0.09064759389540873))
push(move(30.61242317922076,38.96864988060036,40.0770193432525))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9957487961003281,0.01635080382490044,-0.09064759389540873,-0.9901364169805097,0.05067259542153554,-0.13062221802681076))
push(move(30.332513769624,38.98105670817323,40.032637953866626))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9901364169805097,0.05067259542153554,-0.13062221802681076,-0.998631224893229,0.04908211687739237,-0.018072699606954117))
push(move(30.03214553250605,38.99834697477836,40.0004671106658))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.998631224893229,0.04908211687739237,-0.018072699606954117,-0.9928954372424641,0.028564342669890663,0.11551073123711675))
push(move(29.73489104281639,39.010429501447234,40.02182249391439))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9928954372424641,0.028564342669890663,0.11551073123711675,-0.9866918402036521,0.01582812081871786,0.16182917866342594))
push(move(29.457460639558306,39.01487993040857,40.06732437450788))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub89 inherits .../COPOLYFF



DPDPoly_sub90 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9442858605588784,-0.04945180573839274,-0.32539012347917223))
push(move(29.214211421249807,39.01190305773777,40.08334971536513))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9442858605588784,-0.04945180573839274,-0.32539012347917223,-0.784414672240729,-0.06290953741812316,-0.6170380961296534))
push(move(29.019498384625738,39.00170602772382,40.01625382663435))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.784414672240729,-0.06290953741812316,-0.6170380961296534,-0.37943690698803695,-0.05905119496110955,-0.9233312460807427))
push(move(28.887243023805624,38.98568040872127,39.82614907316245))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.37943690698803695,-0.05905119496110955,-0.9233312460807427,-0.05725303063761983,-0.025234616096609454,-0.9980407329529515))
push(move(28.82887029235375,38.97203886452883,39.552374665873))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05725303063761983,-0.025234616096609454,-0.9980407329529515,0.2680630089859355,0.040966149566066735,-0.9625299983912902))
push(move(28.85491326288144,38.97143087299659,39.2625733474826))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2680630089859355,0.040966149566066735,-0.9625299983912902,0.6717268681984182,0.14752182557309634,-0.7259616556815697))
push(move(28.975903893646105,38.99450895663354,39.0244232243415))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6717268681984182,0.14752182557309634,-0.7259616556815697,0.9351724786499775,0.19208993245170866,-0.2975800615403443))
push(move(29.195133732563686,39.046148659586656,38.894883699858845))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9351724786499775,0.19208993245170866,-0.2975800615403443,0.9946054643852498,0.10119215786909042,0.022806082539504637))
push(move(29.47234920681131,39.09648174651882,38.866449983879605))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9946054643852498,0.10119215786909042,0.022806082539504637,0.962518356524138,-0.14260950970461603,0.2306966430095618))
push(move(29.751094685802393,39.10271268478428,38.90763176111763))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.962518356524138,-0.14260950970461603,0.2306966430095618,0.8924830396799034,-0.3217847732656285,0.31611482657114975))
push(move(29.974887339772454,39.022024240058094,38.98689845062583))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub90 inherits .../COPOLYFF



DPDPoly_sub91 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.09444790156146238,-0.9743202259522171,0.20440081015264286))
push(move(30.096126030082445,38.8229824958318,39.07243209556884))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09444790156146238,-0.9743202259522171,0.20440081015264286,-0.018979305434654026,-0.9951729567565124,0.09628381019527071))
push(move(30.123008101376993,38.54566827979575,39.130609324076254))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.018979305434654026,-0.9951729567565124,0.09628381019527071,-0.20381326210893191,-0.9602252869407983,-0.1908600338152996))
push(move(30.085348543412692,38.25786891396394,39.12710730401972))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.20381326210893191,-0.9602252869407983,-0.1908600338152996,-0.30272523793771927,-0.7016558709748528,-0.6450088906690138))
push(move(30.013009562387854,38.02743223582594,39.02760167553629))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.30272523793771927,-0.7016558709748528,-0.6450088906690138,-0.238328903277692,-0.24329398414931208,-0.9402166618068448))
push(move(29.93584753019143,37.911355804062715,38.808569334246684))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.238328903277692,-0.24329398414931208,-0.9402166618068448,-0.08523393391750478,0.043494614864128756,-0.9954111688075272))
push(move(29.883680518512726,37.89540889363845,38.51739363851418))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08523393391750478,0.043494614864128756,-0.9954111688075272,0.17548789145166052,0.1886189356929403,-0.966243704792902))
push(move(29.88631115238391,37.936634065612715,38.2300548686396))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17548789145166052,0.1886189356929403,-0.966243704792902,0.6990346464814039,0.21627404637019507,-0.6815981953359922))
push(move(29.973542014077285,37.99199435895434,38.022612467720705))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6990346464814039,0.21627404637019507,-0.6815981953359922,0.9944005550831494,0.07796618114510463,-0.07133590013431576))
push(move(30.167167236551514,38.02352801582872,37.95620435052674))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9944005550831494,0.07796618114510463,-0.07133590013431576,0.9921270813537838,0.01699328255465652,0.12407692288431318))
push(move(30.434027739316782,38.02809883746175,37.98957833118383))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub91 inherits .../COPOLYFF



DPDPoly_sub92 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9948849064374452,-0.06045080448475603,-0.0809303600640802))
push(move(30.717898749743398,38.017188070966114,38.03850569175748))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9948849064374452,-0.06045080448475603,-0.0809303600640802,0.9113823136424333,-0.05346832020125844,-0.40807280859501194))
push(move(30.96247630984493,38.00232714567577,38.01861017432171))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9113823136424333,-0.05346832020125844,-0.40807280859501194,0.4447635350787024,-0.02078270293375298,-0.8954068779739539))
push(move(31.117301710022485,37.99375618617982,37.859672412547944))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4447635350787024,-0.02078270293375298,-0.8954068779739539,0.043557316280045805,0.002792836963623075,-0.9990470260504131))
push(move(31.173857658043282,37.9924498166709,37.59305300039845))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.043557316280045805,0.002792836963623075,-0.9990470260504131,-0.24930000208818962,0.01203730363229303,-0.9683514921143522))
push(move(31.141943678978286,37.99533619632815,37.294474923266485))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.24930000208818962,0.01203730363229303,-0.9683514921143522,-0.5871571175783062,0.012841245205446184,-0.8093711272949564))
push(move(31.03143586789865,37.999326568846854,37.039846615155966))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5871571175783062,0.012841245205446184,-0.8093711272949564,-0.9162764136854052,0.006047356197517547,-0.4005008903945562))
push(move(30.852790510739837,38.001660034742294,36.895889572375545))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9162764136854052,0.006047356197517547,-0.4005008903945562,-0.9999704611196187,-0.0007707273438533853,0.00764740920695116))
push(move(30.620818846474904,38.002036610655445,36.86036749702619))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999704611196187,-0.0007707273438533853,0.00764740920695116,-0.9776004315699997,-0.003230744368511134,0.21044466846412566))
push(move(30.35231053796257,38.00127428974775,36.89971706058697))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9776004315699997,-0.003230744368511134,0.21044466846412566,-0.9631378653164395,-0.0036007460725560494,0.26898417615431))
push(move(30.0640651629047,38.000196667904035,36.98021793957044))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub92 inherits .../COPOLYFF



DPDPoly_sub93 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9763806036835403,-0.00043838434250330165,0.21605722521992543))
push(move(29.772794491535386,37.99954558511764,37.06814382160997))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9763806036835403,-0.00043838434250330165,0.21605722521992543,-0.9929504081769075,0.00013624495581912328,0.11853045321192708))
push(move(29.494520517299403,37.9994206431096,37.1297213483424))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9929504081769075,0.00013624495581912328,0.11853045321192708,-0.9805313669948817,0.0011026731937766206,-0.1963594215997194))
push(move(29.244939343419418,37.99961801330815,37.131154934170276))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9805313669948817,0.0011026731937766206,-0.1963594215997194,-0.7549253060935239,0.0011944434744790397,-0.6558096945946937))
push(move(29.039745141318207,37.99993206847871,37.03864886173838))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7549253060935239,0.0011944434744790397,-0.6558096945946937,-0.39712345710913394,0.0006298154914956295,-0.9177649825233781))
push(move(28.894443885121213,38.000172567526455,36.826676706181324))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.39712345710913394,0.0006298154914956295,-0.9177649825233781,-0.09602262929078414,0.00011648379650983696,-0.9953791443945416))
push(move(28.822993578187393,38.00027582428014,36.537729082290554))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09602262929078414,0.00011648379650983696,-0.9953791443945416,0.25189062257499545,-0.0004040866897225298,-0.9677556256476779))
push(move(28.83859180426295,38.00024032095572,36.24770905170274))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.25189062257499545,-0.0004040866897225298,-0.9677556256476779,0.7599514831269332,-0.0010675028069175312,-0.649978925605232))
push(move(28.954430877256158,38.00006497060665,36.032751230025085))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7599514831269332,-0.0010675028069175312,-0.649978925605232,0.9961485986452955,-0.0011386698636713915,-0.08767367249040972))
push(move(29.177892239884372,37.999763706098776,35.95750877247549))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9961485986452955,-0.0011386698636713915,-0.08767367249040972,0.9945638993151936,-0.000978800837949256,0.10412344658085951))
push(move(29.466286269077386,37.9994798828898,35.98770148338486))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub93 inherits .../COPOLYFF



DPDPoly_sub94 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9979286981674524,0.001777658188090436,-0.06430515768723205))
push(move(29.751354589198698,37.99942294598798,36.03852892491238))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9979286981674524,0.001777658188090436,-0.06430515768723205,0.8719069311117981,0.003936313054999978,-0.4896558065812546))
push(move(29.964633773192492,37.999802870413916,36.02478550658669))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8719069311117981,0.003936313054999978,-0.4896558065812546,0.14945976278455925,0.004710227534151457,-0.9887565893914233))
push(move(30.04731692893431,38.000759098253916,35.87231889376132))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14945976278455925,0.004710227534151457,-0.9887565893914233,-0.11679542796599741,0.002306064342735096,-0.9931533164992637))
push(move(30.02781474113086,38.00179401993318,35.606809476053044))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11679542796599741,0.002306064342735096,-0.9931533164992637,-0.08320581739972993,-0.0018673490872103432,-0.9965306342296906))
push(move(29.980825745312764,38.00207193172973,35.30692056711683))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08320581739972993,-0.0018673490872103432,-0.9965306342296906,0.28300043845366407,-0.011719038859492678,-0.9590481822949478))
push(move(29.981474181192798,38.00075402050759,35.05180275862866))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.28300043845366407,-0.011719038859492678,-0.9590481822949478,0.898534406422604,-0.01944030560579814,-0.43847234233498905))
push(move(30.097163004442585,37.99725440965097,34.91267016414476))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.898534406422604,-0.01944030560579814,-0.43847234233498905,0.9996627962917731,-0.009705183274278948,0.02408533013527872))
push(move(30.322152985776647,37.9933832397927,34.88555622164351))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996627962917731,-0.009705183274278948,0.02408533013527872,0.9861506859330068,0.00612245186589025,0.16573877101333337))
push(move(30.610369764689953,37.99227196388598,34.92503508789111))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9861506859330068,0.00612245186589025,0.16573877101333337,0.9809420259184426,0.015420812657075534,0.19368773921964424))
push(move(30.91531696398937,37.99706585945417,34.985247141257226))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub94 inherits .../COPOLYFF



DPDPoly_sub95 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9977201263384955,0.05813433848805998,0.03427751723290685))
push(move(31.194364809019817,38.01001896446247,35.023767730694615))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9977201263384955,0.05813433848805998,0.03427751723290685,0.9992397596724839,0.03885137047178129,-0.0032363099574921066))
push(move(31.44332329159254,38.02452507325319,35.03232090953845))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992397596724839,0.03885137047178129,-0.0032363099574921066,0.9979955231626205,-0.027317686283708065,-0.05708484705657381))
push(move(31.680024843587898,38.02890187794114,35.02219478847468))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9979955231626205,-0.027317686283708065,-0.05708484705657381,0.9899427346450677,-0.12795451003055452,-0.06034091055234524))
push(move(31.92256215676423,38.01140708156898,35.0049086850475))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9899427346450677,-0.12795451003055452,-0.06034091055234524,0.9818388246315953,-0.1863530850870368,-0.03556754313403203))
push(move(32.18654892140506,37.96343138361097,34.99132014997033))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9818388246315953,-0.1863530850870368,-0.03556754313403203,0.991175634135172,-0.13230476766899696,-0.008143141211624325))
push(move(32.461716856450735,37.909075477740366,34.985377568986564))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.991175634135172,-0.13230476766899696,-0.008143141211624325,0.9950979987227578,0.09654978829016175,0.0214035352006921))
push(move(32.72239584893458,37.89190510631825,34.98691782504585))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9950979987227578,0.09654978829016175,0.0214035352006921,0.8347513649795905,0.5480115982357792,0.053604541447320374))
push(move(32.94271150901631,37.955744179650644,34.995723269601726))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8347513649795905,0.5480115982357792,0.053604541447320374,0.4515094280818187,0.8903005348001571,0.05919623372971576))
push(move(33.0977712396692,38.13833784838377,35.011022997597955))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4515094280818187,0.8903005348001571,0.05919623372971576,0.2673324637406637,0.9621558504306512,0.05281546470889968))
push(move(33.17345519878663,38.41073186678936,35.025975478175376))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub95 inherits .../COPOLYFF



DPDPoly_sub96 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3998600334477376,0.9141452763462217,-0.06671107393127736))
push(move(33.16230114987477,38.70275149549874,35.029987509456696))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3998600334477376,0.9141452763462217,-0.06671107393127736,-0.6394920258559095,0.7570487667457926,-0.13389217167325074))
push(move(33.05694538323546,38.94361196754627,35.0124103680836))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6394920258559095,0.7570487667457926,-0.13389217167325074,-0.9388201280751225,0.2802578386781862,-0.20018069582365433))
push(move(32.85314819652024,39.06873551501739,34.96525932109745))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9388201280751225,0.2802578386781862,-0.20018069582365433,-0.9907300166063869,-0.040837221076313386,-0.1295621687448635))
push(move(32.58272309597249,39.08517743819062,34.911293929907075))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9907300166063869,-0.040837221076313386,-0.1295621687448635,-0.9851934821804765,-0.15200083245947166,0.07930668068160662))
push(move(32.30061926858916,39.04596064638237,34.89300265682252))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9851934821804765,-0.15200083245947166,0.07930668068160662,-0.8475253129459009,-0.0781789180013148,0.5249656185847759))
push(move(32.06216594300325,39.00486314254695,34.95319804382355))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8475253129459009,-0.0781789180013148,0.5249656185847759,-0.38809620088376073,0.0986358281894902,0.9163254401450203))
push(move(31.918776968420065,39.010738078491634,35.129519579972985))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.38809620088376073,0.0986358281894902,0.9163254401450203,-0.03176816783626441,0.12241976708118125,0.9919698504189108))
push(move(31.87430069521146,39.05260966586197,35.39676256591565))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03176816783626441,0.12241976708118125,0.9919698504189108,0.17528457889828652,-0.022552101715240226,0.984259477530532))
push(move(31.900896124188286,39.079642549072105,35.687853899704024))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17528457889828652,-0.022552101715240226,0.984259477530532,0.2667312417606501,-0.15161841169770604,0.951770088783571))
push(move(31.970147205118856,39.04027806057149,35.93496071407859))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub96 inherits .../COPOLYFF



DPDPoly_sub97 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.2503706564350842,-0.9601422374244705,0.12426350353099105))
push(move(32.05337428326975,38.88783079897385,36.07510447862869))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2503706564350842,-0.9601422374244705,0.12426350353099105,0.14311792957994995,-0.9897038821186718,-0.0018665347515991878))
push(move(32.11852372088425,38.6379903117187,36.10743932763345))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14311792957994995,-0.9897038821186718,-0.0018665347515991878,-0.10867148409791651,-0.9814567059596694,-0.15790263731411008))
push(move(32.13120848656111,38.34958368077445,36.07408936999951))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10867148409791651,-0.9814567059596694,-0.15790263731411008,-0.4949161525670295,-0.8510479679344268,-0.17542906886525877))
push(move(32.05699497529289,38.082298996087864,36.01803637818306))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4949161525670295,-0.8510479679344268,-0.17542906886525877,-0.8585154921500707,-0.505462171071797,-0.08636633229278197))
push(move(31.865868395819895,37.893310140568545,35.98003633735971))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8585154921500707,-0.505462171071797,-0.08636633229278197,-0.9916132851245574,-0.12923680615019761,-0.0009698972004388947))
push(move(31.587459614461032,37.80585394058086,35.97080129929677))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9916132851245574,-0.12923680615019761,-0.0009698972004388947,-0.9722919096208298,0.22957582251335004,0.04408383153945562))
push(move(31.29421429807023,37.818806550384636,35.97947720234473))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9722919096208298,0.22957582251335004,0.04408383153945562,-0.7316972774841388,0.6793174289147826,0.056097458898853474))
push(move(31.05951433960775,37.9305114323456,35.994738401239495))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7316972774841388,0.6793174289147826,0.056097458898853474,-0.2107400306919186,0.9770903581324286,0.029716519120035697))
push(move(30.951115674522455,38.13734384987285,36.00578174320472))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2107400306919186,0.9770903581324286,0.029716519120035697,0.020314529170078893,0.9997113761668303,0.012825141996113997))
push(move(30.956608067429578,38.407633533953515,36.00924924758755))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub97 inherits .../COPOLYFF



DPDPoly_sub98 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.06451260858800924,0.997699789354397,-0.020814746103716916))
push(move(31.003860211465252,38.68881724751815,36.007329333818106))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06451260858800924,0.997699789354397,-0.020814746103716916,-0.1798719557217224,0.983309705703841,-0.02735145724579116))
push(move(31.019315294398048,38.92783305115706,36.00234281049656))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1798719557217224,0.983309705703841,-0.02735145724579116,-0.8250004738831541,0.5643763284985114,-0.029216055912997852))
push(move(30.9333042496519,39.074526969569945,35.99660054418978))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8250004738831541,0.5643763284985114,-0.029216055912997852,-0.9985816281807924,0.0521009445781373,-0.010964644721252753))
push(move(30.73470191769969,39.1225348212379,35.9922636886167))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9985816281807924,0.0521009445781373,-0.010964644721252753,-0.989009585514373,-0.1477229557430047,0.006161826615398961))
push(move(30.457641226145764,39.099344663112646,35.99137766013845))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.989009585514373,-0.1477229557430047,0.006161826615398961,-0.9751745721563619,-0.22007158443243344,0.024557107831641844))
push(move(30.137430376353322,39.03332363586503,35.995984869618376))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9751745721563619,-0.22007158443243344,0.024557107831641844,-0.9743814544055048,-0.22146078975945713,0.039190558936184845))
push(move(29.809037862836917,38.95297172240322,36.0077109641309))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9743814544055048,-0.22146078975945713,0.039190558936184845,-0.9897514118688316,-0.1387231527478853,0.0338825854288207))
push(move(29.50201995244845,38.88890535525929,36.02154168779684))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9897514118688316,-0.1387231527478853,0.0338825854288207,-0.9937164188779252,0.1106783195325623,-0.0166729852719963))
push(move(29.24159150390171,38.87343867301038,36.02713659919677))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9937164188779252,0.1106783195325623,-0.0166729852719963,-0.9427047150123988,0.32711831116789225,-0.06558529402280712))
push(move(29.05284510127642,38.938933629684044,36.01400524627704))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub98 inherits .../COPOLYFF



DPDPoly_sub99 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.044056515653801115,0.9809239146165045,-0.18933382466394907))
push(move(28.958771288998253,39.11474117168609,35.97321540547742))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.044056515653801115,0.9809239146165045,-0.18933382466394907,0.02932098347123572,0.9909682880181065,-0.13085156502978001))
push(move(28.946884776454972,39.37939588261958,35.922132861877735))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02932098347123572,0.9909682880181065,-0.13085156502978001,0.09920792558454128,0.9940311187291339,0.04538636909159423))
push(move(28.975174950087826,39.66913962708272,35.9000103328067))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09920792558454128,0.9940311187291339,0.04538636909159423,0.018525862394057496,0.8936203955308136,0.44844105645436705))
push(move(29.000731849515837,39.918926025595596,35.94676721561553))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.018525862394057496,0.8936203955308136,0.44844105645436705,-0.1524052813645356,0.41903091285095817,0.8950897856011371))
push(move(28.983418677902936,40.06678715107328,36.09955980218611))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1524052813645356,0.41903091285095817,0.8950897856011371,-0.15301004131599294,0.018745484947689996,0.9880468278632112))
push(move(28.932741298468123,40.10586274075193,36.346081774896696))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15301004131599294,0.018745484947689996,0.9880468278632112,0.016886642805621088,-0.14977933445230537,0.9885752334879625))
push(move(28.901070033577405,40.07687580446746,36.63131782345639))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.016886642805621088,-0.14977933445230537,0.9885752334879625,0.3987906231642282,-0.18349026164935098,0.8984972803276252))
push(move(28.942183563373884,40.02211275150975,36.898849387815055))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3987906231642282,-0.18349026164935098,0.8984972803276252,0.8269750352431443,-0.09613779711605387,0.5539583152641294))
push(move(29.106322186169095,39.98243584275444,37.09376224961101))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8269750352431443,-0.09613779711605387,0.5539583152641294,0.9416129419792251,-0.03767244526049931,0.33458310531962476))
push(move(29.376447359591918,39.971628561592965,37.189745763982465))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub99 inherits .../COPOLYFF



DPDPoly_sub100 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9221288411055547,0.05448015493461787,-0.3830278229053685))
push(move(29.67525357935685,39.97921779551281,37.18611176197891))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9221288411055547,0.05448015493461787,-0.3830278229053685,0.7714988607340063,0.052988762065850084,-0.6340202670111256))
push(move(29.923304662573592,39.99387286413548,37.083077931847406))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7714988607340063,0.052988762065850084,-0.6340202670111256,0.24699995381951753,0.028264649975969912,-0.9686031862299916))
push(move(30.045039804088766,40.00461577764192,36.882220242659606))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.24699995381951753,0.028264649975969912,-0.9686031862299916,-0.09236918656540229,0.0018007867346112073,-0.995723199760045))
push(move(30.043282672336495,40.007602164073894,36.61258763119417))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09236918656540229,0.0018007867346112073,-0.995723199760045,-0.12918494342477782,-0.011127622749035912,-0.9915580801971674))
push(move(29.993697449052632,40.005616724335404,36.32875889975173))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12918494342477782,-0.011127622749035912,-0.9915580801971674,0.17212436377602644,-0.017237998210823398,-0.984924390403843))
push(move(29.974713031053014,40.00169577065055,36.08628185539416))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17212436377602644,-0.017237998210823398,-0.984924390403843,0.8369905836677096,-0.01062172952194997,-0.5471141943996237))
push(move(30.061879132585496,39.99878843046133,35.93861190593222))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8369905836677096,-0.01062172952194997,-0.5471141943996237,0.9990773618089949,-0.0006235191853715714,-0.04294224428932852))
push(move(30.268698535220977,39.9979649825514,35.89411285682168))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9990773618089949,-0.0006235191853715714,-0.04294224428932852,0.9911487616801192,0.002656027268675807,0.13272934015926638))
push(move(30.54886116747108,39.998484507408634,35.917680492304044))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9911487616801192,0.002656027268675807,0.13272934015926638,0.9842310734588534,0.0033842766933726647,0.17685514046613338))
push(move(30.853624779564996,39.99953243651513,35.97244305048707))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub100 inherits .../COPOLYFF



DPDPoly_sub101 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9944805924894353,0.0008957193368499424,0.10491686636919349))
push(move(31.135757825372288,40.00031579573558,36.022279653334714))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9944805924894353,0.0008957193368499424,0.10491686636919349,0.9984567389527824,0.0001752692167309765,0.05553476137048741))
push(move(31.382774942490684,40.00053828173481,36.04833975150389))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9984567389527824,0.0001752692167309765,0.05553476137048741,0.9986655776266068,-0.0008639300058398547,-0.05163639887386458))
push(move(31.6169369522461,40.00040026197772,36.04904312434441))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9986655776266068,-0.0008639300058398547,-0.05163639887386458,0.9893014165626967,-0.0008983130302606442,-0.14588317319259755))
push(move(31.862015379604802,40.00012369831178,36.02356043506232))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9893014165626967,-0.0008983130302606442,-0.14588317319259755,0.9823381863025095,-0.00041072832416644257,-0.18711365271978384))
push(move(32.14044077638732,39.99992490603589,35.97184683435068))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9823381863025095,-0.00041072832416644257,-0.18711365271978384,0.9894203326447262,2.5500819466312372e-06,-0.14507723923033675))
push(move(32.44166608323224,39.999881338841874,35.91314982294353))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9894203326447262,2.5500819466312372e-06,-0.14507723923033675,0.9991995763167575,0.00021498547951722782,0.04000200582040625))
push(move(32.72093487746922,39.99992640217204,35.886729843324886))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9991995763167575,0.00021498547951722782,0.04000200582040625,0.8361929304740409,0.0001768904632934725,0.5484353669622336))
push(move(32.93190330900397,39.99998681715427,35.93277600456281))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8361929304740409,0.0001768904632934725,0.5484353669622336,0.21929798024623334,-0.00011681115540333285,0.9756579227449941))
push(move(33.030244677630805,39.99999183438494,36.0895974203809))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.21929798024623334,-0.00011681115540333285,0.9756579227449941,-0.021321737211074863,-0.00021248188797375997,0.9997726433413494))
push(move(33.0247770843404,39.99993734705431,36.34597194289513))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub101 inherits .../COPOLYFF



DPDPoly_sub102 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.04713521618473346,0.0001266477552191201,0.9988885099727419))
push(move(32.98150833234914,39.99989096317729,36.637376291496665))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04713521618473346,0.0001266477552191201,0.9988885099727419,0.17220966847399494,0.0004951661865973203,0.9850601935387119))
push(move(32.96927371976669,39.99992383639492,36.8966519440083))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17220966847399494,0.0004951661865973203,0.9850601935387119,0.8055391740146577,0.0012457128703684634,0.5925412115011307))
push(move(33.05511245691143,40.00010260212881,37.058400812530046))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8055391740146577,0.0012457128703684634,0.5925412115011307,0.9987112583417657,0.0008591740106552078,0.05074528826823494))
push(move(33.25526080603052,40.00036609644336,37.10701928557891))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987112583417657,0.0008591740106552078,0.05074528826823494,0.9907313045117164,-7.1364227994721e-05,-0.13583621449252645))
push(move(33.52924131192257,40.000510486976935,37.08249166483883))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9907313045117164,-7.1364227994721e-05,-0.13583621449252645,0.9868575616751877,-0.001488354179980282,-0.1615856979015719))
push(move(33.83359378684531,40.00032443803758,37.02772577534832))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9868575616751877,-0.001488354179980282,-0.1615856979015719,0.9949222626302768,-0.003079388445856761,-0.10059924795668171))
push(move(34.1256693213186,39.999610968996514,36.98483396844067))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9949222626302768,-0.003079388445856761,-0.10059924795668171,0.9999097485474977,-0.003061675589120437,-0.013081318827499949))
push(move(34.387510887778596,39.998610006684856,36.971717737457084))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999097485474977,-0.003061675589120437,-0.013081318827499949,0.9990349631814899,0.00030894953336444667,0.043920916328611455))
push(move(34.629757893201386,39.99806747401856,36.97823922992984))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9990349631814899,0.00030894953336444667,0.043920916328611455,0.9981075036694971,0.0029323603159599728,0.061423223471438484))
push(move(34.86464721314536,39.99875756012443,36.99269424518314))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub102 inherits .../COPOLYFF



DPDPoly_sub103 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9998314738089196,0.015063772483887121,0.01049317586040767))
push(move(35.104181317322414,40.00140605507894,37.00358506984892))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998314738089196,0.015063772483887121,0.01049317586040767,0.9999324910910473,0.01159739781307622,0.0007166759503898165))
push(move(35.352667192292586,40.00514982068751,37.00619291532407))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999324910910473,0.01159739781307622,0.0007166759503898165,0.9999411683918366,-0.0008518925107867906,-0.010813604131795107))
push(move(35.605165399392135,40.0072165590375,37.00394413733232))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999411683918366,-0.0008518925107867906,-0.010813604131795107,0.9996676487174548,-0.02477817859031248,-0.007115755298058226))
push(move(35.85618862412979,40.00472084931363,37.00074771353833))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996676487174548,-0.02477817859031248,-0.007115755298058226,0.9987755783563629,-0.049156118351977585,0.005569569775050647))
push(move(36.10043148300537,39.994940687666414,37.00041877341468))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987755783563629,-0.049156118351977585,0.005569569775050647,0.9988975163660799,-0.045413733338939666,0.011888844430669628))
push(move(36.339048122665176,39.980956252769886,37.00344033010497))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9988975163660799,-0.045413733338939666,0.011888844430669628,0.9999947700561469,0.0022629691917943257,0.0023105910046747695))
push(move(36.58124547968818,39.97308102911964,37.00614140532936))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999947700561469,0.0022629691917943257,0.0023105910046747695,0.996231920326573,0.08420875462337918,-0.0207568438643294))
push(move(36.836735936481034,39.98208251084995,37.00459028910493))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.996231920326573,0.08420875462337918,-0.0207568438643294,0.9873249153437789,0.1530000347669116,-0.04219598206848355))
push(move(37.11476685512395,40.01817812917609,36.9950252990671))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9873249153437789,0.1530000347669116,-0.04219598206848355,0.9831478312389614,0.17589220856279222,-0.04982241360100788))
push(move(37.40667833966856,40.07040319044352,36.98023226972223))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub103 inherits .../COPOLYFF



DPDPoly_sub104 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9887543747549401,-0.14401104010226326,0.04031881361885123))
push(move(37.68064643850357,40.10039271901325,36.97146662064724))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9887543747549401,-0.14401104010226326,0.04031881361885123,0.9018247996237191,-0.41566713329611354,0.11803755792556002))
push(move(37.9033089364935,40.06796215916339,36.980546214109054))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9018247996237191,-0.41566713329611354,0.11803755792556002,0.4395039509359362,-0.8702830117893395,0.2223595208273721))
push(move(38.041927708156564,39.933871738737594,37.01875380859315))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4395039509359362,-0.8702830117893395,0.2223595208273721,0.06415937464417718,-0.9835118223375567,0.16908006969340353))
push(move(38.08991065569658,39.69846307764821,37.07495416830196))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06415937464417718,-0.9835118223375567,0.16908006969340353,-0.10611759601025904,-0.9943529219267675,-0.001149988131854274))
push(move(38.07576262231609,39.41520960606839,37.107919416517014))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10611759601025904,-0.9943529219267675,-0.001149988131854274,-0.17480059850553975,-0.9247209756749517,-0.33813587196402317))
push(move(38.03045150884885,39.141313475450325,37.07430981415358))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.17480059850553975,-0.9247209756749517,-0.33813587196402317,-0.14264414838557113,-0.6224140217801898,-0.7695800363982714))
push(move(37.984695921306354,38.933453311586625,36.93175915953804))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14264414838557113,-0.6224140217801898,-0.7695800363982714,-0.05664245177855793,-0.21612232600344697,-0.9747218951369532))
push(move(37.957813899087625,38.82436625163728,36.68242234455458))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05664245177855793,-0.21612232600344697,-0.9747218951369532,0.027408321047008428,0.1301003922743231,-0.9911219258332705))
push(move(37.95324125666317,38.81343634422581,36.39047696978105))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.027408321047008428,0.1301003922743231,-0.9911219258332705,0.07154225819707695,0.3010408458708869,-0.950923821559542))
push(move(37.97323718313446,38.89757669386793,36.124695551988474))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub104 inherits .../COPOLYFF



DPDPoly_sub105 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.2247960571430702,0.9517565679108454,-0.2088687820893735))
push(move(38.01973376135996,39.07337713902303,35.95296066203951))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2247960571430702,0.9517565679108454,-0.2088687820893735,0.1705005768535708,0.9834590842374825,-0.06113741017880764))
push(move(38.07827465828482,39.32123150020592,35.898567511205314))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1705005768535708,0.9834590842374825,-0.06113741017880764,-0.002301651670200653,0.9907925553210162,0.13536917935793202))
push(move(38.11070662319109,39.598114879140745,35.92033997962571))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.002301651670200653,0.9907925553210162,0.13536917935793202,-0.34502493070813534,0.9221194886549308,0.1750812549435701))
push(move(38.0770249988391,39.85917270631249,35.972064893904026))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.34502493070813534,0.9221194886549308,0.1750812549435701,-0.7730769123964627,0.6299808523652046,0.0740014403424839))
push(move(37.937946097385144,40.059837594044204,36.00800648419028))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7730769123964627,0.6299808523652046,0.0740014403424839,-0.9716541038615807,0.23508607082072164,-0.024956797771812825))
push(move(37.69391670623441,40.17136789006868,36.00873726764238))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9716541038615807,0.23508607082072164,-0.024956797771812825,-0.993136549712865,-0.11101353710915766,-0.03682102935741507))
push(move(37.40501878676339,40.18877626366873,35.99431832184382))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.993136549712865,-0.11101353710915766,-0.03682102935741507,-0.8673393066818015,-0.49645103501306237,0.03548093740575589))
push(move(37.136243201528046,40.10903073378598,35.98806124630918))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8673393066818015,-0.49645103501306237,0.03548093740575589,-0.49805233197799387,-0.8539528484505847,0.15069308953769198))
push(move(36.951978179191315,39.92946312427861,36.012851213545716))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.49805233197799387,-0.8539528484505847,0.15069308953769198,-0.2621758695795076,-0.9457299176502898,0.19198629188409494))
push(move(36.879925585552044,39.66955250184701,36.06561392697019))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub105 inherits .../COPOLYFF



DPDPoly_sub106 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.22389837488987535,-0.9698438652384004,-0.09629327484882998))
push(move(36.89061753606129,39.38329082150629,36.102821464967704))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.22389837488987535,-0.9698438652384004,-0.09629327484882998,0.2796307821290279,-0.8984955129720433,-0.3383968659060143))
push(move(36.949632392336675,39.12766057700471,36.077440602876656))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2796307821290279,-0.8984955129720433,-0.3383968659060143,0.2823488314790418,-0.49254930322144713,-0.8232097674702886))
push(move(37.022624890097156,38.95913145543977,35.94307197479294))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2823488314790418,-0.49254930322144713,-0.8232097674702886,0.1450487817126427,-0.0812511430643206,-0.9860827057982609))
push(move(37.08041047938896,38.89952201763186,35.69614701625697))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1450487817126427,-0.0812511430643206,-0.9860827057982609,-0.022296762077193073,0.11555590937734715,-0.9930506966962198))
push(move(37.10215522666503,38.91458140353218,35.402402218384616))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.022296762077193073,0.11555590937734715,-0.9930506966962198,-0.30564098365742587,0.20463549859372213,-0.9298967156755744))
push(move(37.067786245597716,38.96494877380788,35.133890303006524))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.30564098365742587,0.20463549859372213,-0.9298967156755744,-0.7953497763388024,0.17540134258503903,-0.5802181506099084))
push(move(36.95742586868541,39.011481904168264,34.96207071232609))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7953497763388024,0.17540134258503903,-0.5802181506099084,-0.99792481057437,0.04180461748865466,-0.04897393589180831))
push(move(36.765915312111375,39.03152145490505,34.91367147606903))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.99792481057437,0.04180461748865466,-0.04897393589180831,-0.9908431171189164,-0.03012011518382047,0.13161571304135022))
push(move(36.51283010470695,39.030106710018615,34.94025182956846))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9908431171189164,-0.03012011518382047,0.13161571304135022,-0.9866243731745757,-0.05115468200731139,0.15477578869644384))
push(move(36.22011485286383,39.01492995579092,34.98617126476518))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub106 inherits .../COPOLYFF



DPDPoly_sub107 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9885834021015556,-0.062568612067005,-0.1370694199058373))
push(move(35.90972672860866,38.99368710264337,34.99624614019475))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9885834021015556,-0.062568612067005,-0.1370694199058373,-0.9880409177806013,-0.04794614648046991,-0.14654798473176012))
push(move(35.60468617172613,38.97438072522725,34.953951547658846))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9880409177806013,-0.04794614648046991,-0.14654798473176012,-0.9980232863020743,0.002830302788993255,-0.06278144140532586))
push(move(35.32986953643174,38.96554867499979,34.9102406910109))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9980232863020743,0.002830302788993255,-0.06278144140532586,-0.925517824414226,0.12365194510750284,0.35794825486750026))
push(move(35.11033986078684,38.97578264616615,34.92285430335589))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.925517824414226,0.12365194510750284,0.35794825486750026,-0.44275729657166346,0.21824876225129378,0.8696743379612453))
push(move(34.97097110139197,39.01349857765757,35.04904630351055))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.44275729657166346,0.21824876225129378,0.8696743379612453,-0.07806453537718464,0.16726979169751233,0.9828157228605042))
push(move(34.91856535712596,39.070314228998164,35.29954231234079))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07806453537718464,0.16726979169751233,0.9828157228605042,0.08512301313028771,0.021552036643469285,0.99613733107044))
push(move(34.9271539109554,39.10738618336332,35.60069531396787))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08512301313028771,0.021552036643469285,0.99613733107044,0.17990068309242718,-0.33349687751126933,0.925427240204821))
push(move(34.96730858154366,39.08265537765045,35.869951461331986))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17990068309242718,-0.33349687751126933,0.925427240204821,0.16387275807374502,-0.8956760226482932,0.4134128464552573))
push(move(35.00968808281593,38.954385715936944,36.02525940997099))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16387275807374502,-0.8956760226482932,0.4134128464552573,0.10291684164425753,-0.9929925917778157,0.05808473448632605))
push(move(35.034399461795346,38.715958109073576,36.03920614467329))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub107 inherits .../COPOLYFF



DPDPoly_sub108 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.05428748924329193,-0.9922359530440764,-0.11189585335647226))
push(move(35.039352724666855,38.426922455708215,35.987330560815664))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05428748924329193,-0.9922359530440764,-0.11189585335647226,-0.10643099738290933,-0.989417693933539,0.09861576814747741))
push(move(35.02442898141435,38.154154736745014,35.95657015892955))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10643099738290933,-0.989417693933539,0.09861576814747741,-0.1984959549195543,-0.6523337777834735,0.731477954721341))
push(move(34.98958473394284,37.96426278113331,36.033444087467565))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1984959549195543,-0.6523337777834735,0.731477954721341,-0.14125672065256548,-0.1227241257895172,0.982336667247885))
push(move(34.944177430435396,37.89041738529973,36.25230535613845))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14125672065256548,-0.1227241257895172,0.982336667247885,-0.01591731031235403,0.10889964440289582,0.9939253023649931))
push(move(34.915974310414384,37.90030989567205,36.54535047882082))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01591731031235403,0.10889964440289582,0.9939253023649931,0.22242121287531433,0.21611898226110351,0.9506952138143429))
push(move(34.93487911528089,37.95403260633902,36.83292045505068))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.22242121287531433,0.21611898226110351,0.9506952138143429,0.6909378854046632,0.22559404258558355,0.6868130505912264))
push(move(35.030676300083925,38.01176184285931,37.03562130858626))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6909378854046632,0.22559404258558355,0.6868130505912264,0.9851563918500738,0.09314932835476857,0.14418767708788224))
push(move(35.2159377068031,38.04579938480677,37.11230115296275))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9851563918500738,0.09314932835476857,0.14418767708788224,0.9919592646765593,-0.021955104721947977,-0.12463864007196239))
push(move(35.4681958104674,38.053130552306335,37.099656747431))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9919592646765593,-0.021955104721947977,-0.12463864007196239,0.9802090290604517,-0.06496903153849745,-0.18700076013031638))
push(move(35.76072311278957,38.033741610797954,37.043849438712826))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub108 inherits .../COPOLYFF



DPDPoly_sub109 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9771322458123748,-0.20083866051443006,-0.0698312726250524))
push(move(36.06681127813811,37.987688688148076,36.99093855054508))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9771322458123748,-0.20083866051443006,-0.0698312726250524,0.9843098306981964,-0.17359483206185103,-0.03160682635611686))
push(move(36.36298466699057,37.926813543609484,36.96977236270318))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9843098306981964,-0.17359483206185103,-0.03160682635611686,0.998838799974813,-0.03194437718511175,0.03606394918933569))
push(move(36.632609940059766,37.887903315053265,36.97277038895393))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.998838799974813,-0.03194437718511175,0.03606394918933569,0.9347709985904756,0.3483137740928138,0.06986197085242558))
push(move(36.85992477179196,37.91092064663093,36.98771482017495))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9347709985904756,0.3483137740928138,0.06986197085242558,0.5965110067233815,0.8012193913988966,0.047139216203067075))
push(move(37.0291851248265,38.03567490780266,37.00240922460539))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5965110067233815,0.8012193913988966,0.047139216203067075,0.23016236570954898,0.9730818731860478,0.011702712835762763))
push(move(37.12829621753674,38.27139078717301,37.008922843934954))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.23016236570954898,0.9730818731860478,0.011702712835762763,-0.04861874110051568,0.998786507635386,-0.00785685556123813))
push(move(37.15319609556741,38.55996925684697,37.00871462025333))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04861874110051568,0.998786507635386,-0.00785685556123813,-0.36741931464406785,0.929853534835768,-0.019376557483484134))
push(move(37.100892982119085,38.83434205207985,37.00449444332824))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.36741931464406785,0.929853534835768,-0.019376557483484134,-0.7838761870652238,0.6204868401264603,-0.02311286615646204))
push(move(36.968430644682705,39.02756799423806,36.998970662226796))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7838761870652238,0.6204868401264603,-0.02311286615646204,-0.9392500377292458,0.3426296070495494,-0.020354827404859836))
push(move(36.761355636055185,39.1031070157827,36.99448306479144))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub109 inherits .../COPOLYFF



DPDPoly_sub110 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9836752349338939,-0.17982040077403097,0.0069033066870606815))
push(move(36.504683986802675,39.09403079818465,36.99252751604276))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9836752349338939,-0.17982040077403097,0.0069033066870606815,-0.9835087087072056,-0.18011616427558833,0.016394732804604847))
push(move(36.22614512967643,39.043112601669364,36.99448226603211))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9835087087072056,-0.18011616427558833,0.016394732804604847,-0.9903292060247629,-0.13422628153155822,0.03509086833598712))
push(move(35.953429057830064,38.9930759998534,37.001716735403726))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9903292060247629,-0.13422628153155822,0.03509086833598712,-0.9984808396970135,-0.03848784417375755,0.03942966660781458))
push(move(35.702737508758084,38.97217148607493,37.0130284502706))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9984808396970135,-0.03848784417375755,0.03942966660781458,-0.9994324729594729,0.03229273140009935,0.009587048181445967))
push(move(35.46290184834253,38.974167940678754,37.021087487012764))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9994324729594729,0.03229273140009935,0.009587048181445967,-0.9971632583649616,0.05436725216963719,-0.05205418387119556))
push(move(35.218764699678395,38.98780916480902,37.0176709556571))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9971632583649616,0.05436725216963719,-0.05205418387119556,-0.9926347886428794,0.037466664960816,-0.11520601283188384))
push(move(34.95520315072074,39.001848646810124,36.99458446342513))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9926347886428794,0.037466664960816,-0.11520601283188384,-0.9920723802529456,0.012220184938415394,-0.12507221681622907))
push(move(34.669544442073715,39.00853929800282,36.953927999265616))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9920723802529456,0.012220184938415394,-0.12507221681622907,-0.9992640036550793,-0.006963157814822856,-0.03772221404513919))
push(move(34.38998613971783,39.0088108972893,36.92332661374046))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9992640036550793,-0.006963157814822856,-0.03772221404513919,-0.9988316872703507,-0.016176425910551136,0.045536619872634576))
push(move(34.149428318521196,39.00491497986759,36.93429361669083))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub110 inherits .../COPOLYFF



DPDPoly_sub111 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.4086280490995241,-0.028649812180398786,0.9122512295147344))
push(move(33.98074011650925,38.99910308012799,37.01831138075312))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4086280490995241,-0.028649812180398786,0.9122512295147344,-0.1950179230943382,-0.019542156928268415,0.9806049733580601))
push(move(33.90262650206786,38.99362636264026,37.19269794323465))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1950179230943382,-0.019542156928268415,0.9806049733580601,0.07105057611802999,-0.0017591154915200166,0.9974711630648696))
push(move(33.897232532512376,38.9907350374103,37.43821100270141))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07105057611802999,-0.0017591154915200166,0.9974711630648696,0.18330175106255694,0.017844084710312628,0.9828947332742461))
push(move(33.940883862575866,38.99267916250184,37.729788787062844))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18330175106255694,0.017844084710312628,0.9828947332742461,0.2166056546319358,0.03785056046295014,0.975525153675758))
push(move(34.00990318540058,39.00170331601566,38.04236994104452))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2166056546319358,0.03785056046295014,0.975525153675758,0.17941769716992417,0.0440665654526606,0.9827855451477946))
push(move(34.078849028078764,39.01678776136331,38.351141399060964))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17941769716992417,0.0440665654526606,0.9827855451477946,0.03167191248334239,0.015136575433711549,0.9993836971072658))
push(move(34.117538493818856,39.02813949504508,38.63195740610277))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03167191248334239,0.015136575433711549,0.9993836971072658,-0.33726461928213325,-0.08228501117819652,0.9378068849799952))
push(move(34.09500031151914,39.02450674960802,38.86078316338941))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.33726461928213325,-0.08228501117819652,0.9378068849799952,-0.8181850909847914,-0.20806234149571215,0.5359880772382257))
push(move(33.98028820835039,38.994653500285175,39.01359916547785))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8181850909847914,-0.20806234149571215,0.5359880772382257,-0.9316128406535726,-0.23398877255169132,0.2781128717789484))
push(move(33.76246345387762,38.93994349124891,39.07862603647768))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub111 inherits .../COPOLYFF



DPDPoly_sub112 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9904177407371642,0.041156947919513166,-0.1318286936559794))
push(move(33.48659214749499,38.89700956176743,39.078346798107695))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9904177407371642,0.041156947919513166,-0.1318286936559794,-0.9608343414133897,0.22842172014616066,-0.156910439825292))
push(move(33.20746514157524,38.908608723588806,39.04119384027889))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9608343414133897,0.22842172014616066,-0.156910439825292,-0.7269225044080341,0.6691047853162044,-0.15453950579741024))
push(move(32.9798617473994,39.01747593630388,38.99559445826638))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7269225044080341,0.6691047853162044,-0.15453950579741024,-0.3168922307989796,0.9452155236884136,-0.07840234586850299))
push(move(32.84563940862598,39.241655682375765,38.96427178928214))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3168922307989796,0.9452155236884136,-0.07840234586850299,0.03812444361334725,0.9992693565644752,0.0026981160820302237))
push(move(32.80897437778717,39.527193054178625,38.95331519309438))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03812444361334725,0.9992693565644752,0.0026981160820302237,0.39198872684953917,0.9148764900637317,0.09667391556952702))
push(move(32.86721167109633,39.80708034947412,38.96579848614065))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.39198872684953917,0.9148764900637317,0.09667391556952702,0.7724325447627507,0.6032679346141936,0.19853403450709978))
push(move(33.017690851596974,40.01432388702751,39.00478973148029))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7724325447627507,0.6032679346141936,0.19853403450709978,0.9646132036389182,0.17505312086461114,0.19717447157536105))
push(move(33.24875400758141,40.10506398423918,39.06386418768474))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9646132036389182,0.17505312086461114,0.19717447157536105,0.9942523020376218,-0.08974934163532053,0.058373072292934584))
push(move(33.521403797817754,40.10573516247265,39.10775259122767))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9942523020376218,-0.08974934163532053,0.058373072292934584,0.9825683630268164,-0.1806799557721485,-0.043751177823877496))
push(move(33.791469305079886,40.05607406433044,39.09572728644794))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub112 inherits .../COPOLYFF



DPDPoly_sub113 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.5258977496479312,-0.1470806014415611,-0.8377343574157805))
push(move(34.01478265178626,39.995814217963776,38.98706924661002))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5258977496479312,-0.1470806014415611,-0.8377343574157805,0.3425236841125359,-0.09470782626532157,-0.9347234636330006))
push(move(34.15509889075032,39.95657123426083,38.76355101637944))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3425236841125359,-0.09470782626532157,-0.9347234636330006,-0.014176985893077835,0.005507518153380484,-0.9998843334680156))
push(move(34.20126425374462,39.94425203999144,38.4781738417916))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.014176985893077835,0.005507518153380484,-0.9998843334680156,-0.40051652293998463,0.11079228984800173,-0.9095667008869119))
push(move(34.14708023885754,39.95968634428479,38.19800595175218))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.40051652293998463,0.11079228984800173,-0.9095667008869119,-0.7970893356707608,0.2066018311035015,-0.56741895839373))
push(move(33.98635166784236,40.00370191570315,37.990110751901334))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7970893356707608,0.2066018311035015,-0.56741895839373,-0.9677561341842056,0.19638304006648066,-0.15773955218362049))
push(move(33.72797069207302,40.06831758036296,37.899657081873976))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9677561341842056,0.19638304006648066,-0.15773955218362049,-0.9943028090800766,0.06478109280800465,0.08464829513976951))
push(move(33.43063803789953,40.11647075094959,37.89953212776953))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9943028090800766,0.06478109280800465,0.08464829513976951,-0.9372876391914342,-0.2695715889428496,0.2209593624487885))
push(move(33.163318630194254,40.10510594834378,37.947727784228135))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9372876391914342,-0.2695715889428496,0.2209593624487885,-0.4827489715987353,-0.8521212897487316,0.20209586333550175))
push(move(32.994974165895854,39.991170259072476,38.002237004452795))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4827489715987353,-0.8521212897487316,0.20209586333550175,-0.12495565087371305,-0.9850090206429327,0.11892566824187861))
push(move(32.965025701861336,39.75509044177622,38.030740245988646))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub113 inherits .../COPOLYFF



DPDPoly_sub114 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.13536637418975922,-0.989680396184856,-0.046996363115718476))
push(move(33.01121110191491,39.45811371211019,38.03426376969835))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13536637418975922,-0.989680396184856,-0.046996363115718476,-0.03390295695230927,-0.9965534876155976,-0.07570822829177026))
push(move(33.04940632308038,39.17886370012107,38.0210031908144))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03390295695230927,-0.9965534876155976,-0.07570822829177026,-0.7466708299884631,-0.652482566114187,-0.12941859434171485))
push(move(32.995488629741835,38.99596274102951,37.9991541326757))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7466708299884631,-0.652482566114187,-0.12941859434171485,-0.9973106648668807,0.01284224251343209,-0.0721561816479135))
push(move(32.79612836598356,38.95753531182814,37.97710315365114))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9973106648668807,0.01284224251343209,-0.0721561816479135,-0.9889871885577635,0.14733177036111375,-0.014060238649140184))
push(move(32.50852819976932,39.00223326851553,37.96392217689878))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9889871885577635,0.14733177036111375,-0.014060238649140184,-0.9973330780965126,-0.009419552774420525,0.0723740517040825))
push(move(32.214682223528996,39.04415472462599,37.96883684684847))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9973330780965126,-0.009419552774420525,0.0723740517040825,-0.7648598991578078,-0.6016325758310305,0.23027717724348476))
push(move(31.99658427767846,38.99739809068218,38.00107271035718))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7648598991578078,-0.6016325758310305,0.23027717724348476,-0.1507014188200961,-0.963795936946144,0.21996925760595332))
push(move(31.911260252816678,38.80548547029015,38.06018841987017))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1507014188200961,-0.963795936946144,0.21996925760595332,0.10284967236874853,-0.9918509405601784,0.07519080132257323))
push(move(31.92226423002422,38.522091616970016,38.10955294787411))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10284967236874853,-0.9918509405601784,0.07519080132257323,0.16365266227073694,-0.9863480452470306,-0.018312284648889076))
push(move(31.971281037159464,38.226663291935395,38.10406810141707))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub114 inherits .../COPOLYFF



DPDPoly_sub115 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.1183831216575151,-0.40551999422569923,-0.9063878699485176))
push(move(31.999995512169406,37.9986472455358,37.99863569821295))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1183831216575151,-0.40551999422569923,-0.9063878699485176,-0.1462662343604976,-0.19556097151503404,-0.9697226897964676))
push(move(31.97003422528569,37.89601520885722,37.769240269040104))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1462662343604976,-0.19556097151503404,-0.9697226897964676,-0.10127605596439959,0.08053179916356942,-0.9915935607958406))
push(move(31.92089170144385,37.89288381938576,37.47418957129021))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10127605596439959,0.08053179916356942,-0.9915935607958406,0.1589872908683836,0.21733134188639766,-0.963062889522896))
push(move(31.91106595947926,37.94290507333434,37.1918821550402))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1589872908683836,0.21733134188639766,-0.963062889522896,0.7733027095652909,0.20974580614509414,-0.5983390478512363))
push(move(31.99905501822728,37.99973096691592,37.00071657036675))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7733027095652909,0.20974580614509414,-0.5983390478512363,0.9984685915427892,0.05281570130994393,-0.01646126962592989))
push(move(32.22021253447864,38.026756063106106,36.952681561218945))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9984685915427892,0.05281570130994393,-0.01646126962592989,0.9895989727791252,-0.022010973503902315,0.14215973452391725))
push(move(32.51562638467731,38.027055891532264,36.99220010763953))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9895989727791252,-0.022010973503902315,0.14215973452391725,0.9982412560234383,-0.055651921184705695,0.020426904836502943))
push(move(32.80238824807664,38.01380712665902,37.03631336275461))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9982412560234383,-0.055651921184705695,0.020426904836502943,0.760957007429891,-0.05487580727454999,-0.6464774386003823))
push(move(32.99758979877803,38.00018644511979,37.002062473811144))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.760957007429891,-0.05487580727454999,-0.6464774386003823,0.2661161291787613,-0.021747612800094584,-0.9636956195440602))
push(move(33.04506268700446,37.99630685317308,36.830147248033214))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub115 inherits .../COPOLYFF



DPDPoly_sub116 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.15151827375926813,0.011445560831085715,-0.9883881888480219))
push(move(33.0022414724647,37.9992655687793,36.56177964701965))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15151827375926813,0.011445560831085715,-0.9883881888480219,-0.011059670185258722,0.001799044063392453,-0.9999372215973616))
push(move(32.956724055224,38.00270391555409,36.264859173525764))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.011059670185258722,0.001799044063392453,-0.9999372215973616,0.474581142412181,-0.03010366317223105,-0.8796968277368983))
push(move(32.996108565439656,38.000263190750836,36.00728553388458))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.474581142412181,-0.03010366317223105,-0.8796968277368983,0.9077821793767146,-0.04717141585376349,-0.41678096445544877))
push(move(33.18253178641039,37.98838046425392,35.84629567183777))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9077821793767146,-0.04717141585376349,-0.41678096445544877,0.9996920228511,-0.023017726381992783,-0.009275975424686488))
push(move(33.46529458733363,37.975882706693824,35.79187284220974))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996920228511,-0.023017726381992783,-0.009275975424686488,0.9350698018915389,0.039393033072882166,0.35226787326669057))
push(move(33.762451052149935,37.97502792899574,35.84091469776342))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9350698018915389,0.039393033072882166,0.35226787326669057,0.6398165869798756,0.1444573945873328,0.7548289847206868))
push(move(33.99205414073127,37.99807426551272,35.990318420521575))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6398165869798756,0.1444573945873328,0.7548289847206868,0.1812950499532392,0.18261622248944917,0.9663246970589836))
push(move(34.091787982693276,38.049385418150955,36.22945270376681))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1812950499532392,0.18261622248944917,0.9663246970589836,-0.08958045937273218,0.08632747753161231,0.9922312774356589))
push(move(34.09009370383574,38.09682828374583,36.51288123258489))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08958045937273218,0.08632747753161231,0.9922312774356589,-0.1752942047389945,0.003261152441670496,0.9845106940352022))
push(move(34.041621631645135,38.09773005238566,36.78511654980346))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub116 inherits .../COPOLYFF



DPDPoly_sub117 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.03694662992300032,-0.9044989503418549,0.4248724459974023))
push(move(34.00102464187461,38.00941688940477,36.99067022099856))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03694662992300032,-0.9044989503418549,0.4248724459974023,0.08366564118314981,-0.9740855818531664,0.2101364787731783))
push(move(34.00941112414047,37.80410548692118,37.0871116350338))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08366564118314981,-0.9740855818531664,0.2101364787731783,0.08322195075158029,-0.9947992088012334,-0.05872513160088877))
push(move(34.04256027860448,37.52583409126312,37.09499204681128))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08322195075158029,-0.9947992088012334,-0.05872513160088877,-0.0670092053135858,-0.9821181603402745,-0.17593659520712676))
push(move(34.05658018152363,37.240266973873894,37.05382703791369))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0670092053135858,-0.9821181603402745,-0.17593659520712676,-0.4852473976024887,-0.8527400058497366,-0.19331178325028037))
push(move(34.00757494731451,37.013072761762054,37.00313600941244))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4852473976024887,-0.8527400058497366,-0.19331178325028037,-0.9384916849022783,-0.33690210012004645,-0.07569895840752969))
push(move(33.861113595601495,36.89676759923281,36.97595749244648))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9384916849022783,-0.33690210012004645,-0.07569895840752969,-0.998766916019835,0.047412271315779415,0.014721548590654238))
push(move(33.63040024649438,36.87767364117029,36.97271300998786))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.998766916019835,0.047412271315779415,0.014721548590654238,-0.9811410641890754,0.18856860975534104,0.0424745991960638))
push(move(33.34359165354583,36.92133478336261,36.983585622988755))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9811410641890754,0.18856860975534104,0.0424745991960638,-0.9755496322463041,0.21605273168899852,0.040300522996885385))
push(move(33.02884990603526,36.99328750704388,36.99875473888886))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9755496322463041,0.21605273168899852,0.040300522996885385,-0.9772392027413077,0.20945483180415178,0.03364838866020033))
push(move(32.713816997979116,37.06080952681609,37.009601980486714))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub117 inherits .../COPOLYFF



DPDPoly_sub118 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9992362458953922,-0.03751833501879456,-0.010922427674315909))
push(move(32.4234032576414,37.100323934868214,37.01382329558776))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9992362458953922,-0.03751833501879456,-0.010922427674315909,-0.977726851770277,-0.2078015802314874,-0.02947382874143646))
push(move(32.181625300619814,37.091245895086374,37.01118047487378))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.977726851770277,-0.2078015802314874,-0.02947382874143646,-0.7156369400390113,-0.6945901076252312,-0.07354150148569351))
push(move(32.012499232681826,37.012992278224566,37.00143648751463))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7156369400390113,-0.6945901076252312,-0.07354150148569351,-0.21465067988984088,-0.9740344870904126,-0.0719854400649588))
push(move(31.933399829001033,36.850320717247435,36.985671906396526))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.21465067988984088,-0.9740344870904126,-0.0719854400649588,0.04546067873717626,-0.9985982143823549,-0.027109646274486587))
push(move(31.925292429316997,36.617268239382256,36.972190737535655))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04546067873717626,-0.9985982143823549,-0.027109646274486587,0.12110854172270404,-0.9918657557443736,0.039179633783930794))
push(move(31.95672962451404,36.33785383843371,36.97175960852543))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12110854172270404,-0.9918657557443736,0.039179633783930794,0.09881418231345583,-0.9874376980729127,0.12329862042289982))
push(move(31.996253479544624,36.0361049728507,36.99514723524667))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09881418231345583,-0.9874376980729127,0.12329862042289982,0.03796150795310242,-0.9843323409665445,0.17218817160667277))
push(move(32.0170305386059,35.735274386693895,37.04700204178447))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03796150795310242,-0.9843323409665445,0.17218817160667277,-0.01277203189502303,-0.9944520960308226,0.10441218272393293))
push(move(32.018695821369036,35.454180701241526,37.09694260676066))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01277203189502303,-0.9944520960308226,0.10441218272393293,-0.03442572545075966,-0.9991802995580699,0.02129784970917755))
push(move(32.01028515894868,35.21006766987868,37.102145954601205))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub118 inherits .../COPOLYFF



DPDPoly_sub119 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.012476489184716336,-0.5140752256816404,-0.8576543590269884))
push(move(32.00084560846649,35.02017716535746,37.01977425261295))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.012476489184716336,-0.5140752256816404,-0.8576543590269884,-0.0014439701128011267,-0.32957218944881245,-0.9441292744599277))
push(move(31.997925309748545,34.89985058948667,36.81902812218906))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0014439701128011267,-0.32957218944881245,-0.9441292744599277,0.008413011845663293,-0.03576359524260038,-0.9993248653400996))
push(move(32.0001134554515,34.853070332588636,36.54106137018441))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.008413011845663293,-0.03576359524260038,-0.9993248653400996,0.0014981062453388577,0.23735618451116453,-0.9714215343258455))
push(move(32.002685097265854,34.87961679957497,36.2536451051387))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0014981062453388577,0.23735618451116453,-0.9714215343258455,-0.025417517115763743,0.61859806156498,-0.785296369564841))
push(move(32.00090994175253,34.97926361828992,36.02459336464232))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.025417517115763743,0.61859806156498,-0.785296369564841,-0.047496616109374036,0.9506407753426551,-0.3066368988136854))
push(move(31.991570600027266,35.15011554324633,35.910253014902324))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.047496616109374036,0.9506407753426551,-0.3066368988136854,-0.025491717256733656,0.998243853318023,0.053473186402981855))
push(move(31.98089514385638,35.37985811425381,35.89537835818531))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.025491717256733656,0.998243853318023,0.053473186402981855,0.024366708843465836,0.9854902550882226,0.16797386887932175))
push(move(31.978750023088878,35.652163404355264,35.937146342390456))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.024366708843465836,0.9854902550882226,0.16797386887932175,0.09174450908936732,0.9856168803444423,0.14192360702871226))
push(move(31.99500935435941,35.950695029421816,35.9926758044511))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09174450908936732,0.9856168803444423,0.14192360702871226,0.1288219938438334,0.9864301669476176,0.10178614659075501))
push(move(32.035147620082014,36.25804624311079,36.024390260009774))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub119 inherits .../COPOLYFF



DPDPoly_sub120 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.026902735020106316,0.9986723014191002,-0.043930367932852536))
push(move(32.075938569182576,36.549827859384465,36.029317958248114))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.026902735020106316,0.9986723014191002,-0.043930367932852536,-0.12816745168500981,0.9898078223894752,-0.062077202459321995))
push(move(32.08264687163776,36.79885071325158,36.01836374876566))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12816745168500981,0.9898078223894752,-0.062077202459321995,-0.6367192432458649,0.7672007846263272,-0.07740517650106334))
push(move(32.020506354348065,36.97791813608293,36.002469668937444))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6367192432458649,0.7672007846263272,-0.07740517650106334,-0.969275333847735,0.2433091948951509,-0.036138108332278825))
push(move(31.86142035570859,37.065412715894674,35.991469512893474))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.969275333847735,0.2433091948951509,-0.036138108332278825,-0.9993889267177862,-0.03485573507479747,-0.0026174197727473485))
push(move(31.62276813446597,37.077759081869075,35.98764054208767))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993889267177862,-0.03485573507479747,-0.0026174197727473485,-0.9920789908787667,-0.12432223814105098,0.017979348168600816))
push(move(31.340908429500644,37.04725879671652,35.99010628165168))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9920789908787667,-0.12432223814105098,0.017979348168600816,-0.9927683499404907,-0.11471467478735875,0.03537720657239797))
push(move(31.052263239274787,37.00626634178215,35.99797974515198))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9927683499404907,-0.11471467478735875,0.03537720657239797,-0.9977995429482727,-0.05017806904577406,0.04333859110602972))
push(move(30.78839831840125,36.98341609089769,36.00979492738144))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977995429482727,-0.05017806904577406,0.04333859110602972,-0.9996552566725867,0.01176316007313871,0.02347330125820417))
push(move(30.546256847956492,36.98081992439239,36.01995771081188))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9996552566725867,0.01176316007313871,0.02347330125820417,-0.9993909318253011,0.034577453014149426,0.004707985600093556))
push(move(30.307746754699203,36.98907202202544,36.021081297237146))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub120 inherits .../COPOLYFF



DPDPoly_sub121 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9918761123414331,0.010053775749121962,-0.12680969741952322))
push(move(30.05471479518087,36.9987197043466,36.0057715950162))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9918761123414331,0.010053775749121962,-0.12680969741952322,-0.9919176056768161,0.0001655463351833913,-0.12688355347634037))
push(move(29.77359638291069,37.00156915443492,35.96983107749039))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9919176056768161,0.0001655463351833913,-0.12688355347634037,-0.9966800345981844,-0.010317463487452593,-0.08076173958346106))
push(move(29.48504777520116,36.9988147790654,35.93290125237924))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9966800345981844,-0.010317463487452593,-0.08076173958346106,-0.9951692359749509,-0.0012196845816584622,0.09816671604242211))
push(move(29.22518438977752,36.99589208604906,35.92539283749723))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9951692359749509,-0.0012196845816584622,0.09816671604242211,-0.8384326897395004,0.039990890571085715,0.5435359725423129))
push(move(29.030197201971873,36.99825731184166,35.97776918584202))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8384326897395004,0.039990890571085715,0.5435359725423129,-0.310150027102798,0.0679292802863953,0.9482576514681577))
push(move(28.93067112868895,37.009939543573154,36.11631878033245))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.310150027102798,0.0679292802863953,0.9482576514681577,0.028460854591069288,0.03560277837297718,0.9989606708615063))
push(move(28.913438987867867,37.023829779223654,36.334747616345865))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.028460854591069288,0.03560277837297718,0.9989606708615063,0.13004151333858197,-0.025189126794328148,0.9911885353957393))
push(move(28.94477775048339,37.027586059693455,36.61145360934019))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13004151333858197,-0.025189126794328148,0.9911885353957393,0.1173161600653747,-0.10502290959299258,0.9875257500683906))
push(move(28.990845335957264,37.00883611860981,36.924746016266816))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1173161600653747,-0.10502290959299258,0.9875257500683906,0.09034446950164426,-0.1485933325270425,0.9847628640230979))
push(move(29.020851295301807,36.95948406065572,37.251813678791024))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub121 inherits .../COPOLYFF



DPDPoly_sub122 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.02945336827609563,-0.050828400429545034,0.9982729951305738))
push(move(29.02894050091504,36.906376834523094,37.56069036385089))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02945336827609563,-0.050828400429545034,0.9982729951305738,-0.05729028383512556,0.13811502771660467,0.9887578381469004))
push(move(29.02143911310856,36.89343150549889,37.814937443608144))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05729028383512556,0.13811502771660467,0.9887578381469004,-0.10716289604922281,0.7810950900851588,0.6151476033889761))
push(move(29.004755901562262,36.964680902618426,37.97808595995791))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10716289604922281,0.7810950900851588,0.6151476033889761,-0.07178521758690848,0.9972962337574557,0.01571956326347826))
push(move(28.985428630107794,37.155906788460385,38.02164856407493))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07178521758690848,0.9972962337574557,0.01571956326347826,-0.02699515588718328,0.9904042607492914,-0.13553841465900468))
push(move(28.971099182098257,37.4322663009833,37.985456125413144))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02699515588718328,0.9904042607492914,-0.13553841465900468,0.03643885537299309,0.9990165240950344,-0.025262509855154866))
push(move(28.969970152971424,37.72305082291382,37.94403399156191))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03643885537299309,0.9990165240950344,-0.025262509855154866,0.16594746084566173,0.8659510882154337,0.4717946089744815))
push(move(28.990248544585974,37.9572698817844,37.97218016068774))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16594746084566173,0.8659510882154337,0.4717946089744815,0.20914082460372735,0.2727611542606338,0.939074793725441))
push(move(29.03692459558549,38.07243412861219,38.13438788375907))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20914082460372735,0.2727611542606338,0.939074793725441,0.1084503686860193,-0.05520685670010802,0.9925677410157758))
push(move(29.086130506932207,38.08231899532733,38.40270506744798))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1084503686860193,-0.05520685670010802,0.9925677410157758,0.04200845027745899,-0.1375161908500853,0.9896082999648746))
push(move(29.09876694023922,38.040953171003075,38.70038611019004))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub122 inherits .../COPOLYFF



DPDPoly_sub123 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7902477527610188,0.056849563863765926,0.6101447503213147))
push(move(29.035597118391916,38.0027285618716,38.95024513202632))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7902477527610188,0.056849563863765926,0.6101447503213147,-0.9328511965328139,0.12540643363926446,0.3377304717214281))
push(move(28.8634790897325,38.01511054565857,39.08313625541804))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9328511965328139,0.12540643363926446,0.3377304717214281,-0.9912630875097532,0.12790026181778888,-0.032233745788732525))
push(move(28.60661208192206,38.06039851363695,39.105555345774114))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9912630875097532,0.12790026181778888,-0.032233745788732525,-0.9843933594674829,-0.044858740301666436,-0.17016876110165055))
push(move(28.320644438447694,38.08515117856211,39.065484438886884))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9843933594674829,-0.044858740301666436,-0.17016876110165055,-0.882732301062518,-0.4426501517351091,-0.15762147007865748))
push(move(28.06154768860794,38.03555996527393,39.01133190182376))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.882732301062518,-0.4426501517351091,-0.15762147007865748,-0.5121804619411884,-0.8582011326066791,-0.03408798026173137))
push(move(27.88196776943675,37.86517475550993,38.98715394007599))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5121804619411884,-0.8582011326066791,-0.03408798026173137,-0.10714210066618036,-0.9935079852861253,0.03824203757048242))
push(move(27.801717932771453,37.6001935127961,38.994039029005464))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10714210066618036,-0.9935079852861253,0.03824203757048242,0.25246712373885977,-0.9673240469057468,0.02333537462557245))
push(move(27.821903359355076,37.3082090933043,39.00859262209464))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.25246712373885977,-0.9673240469057468,0.02333537462557245,0.6493458982880619,-0.7569449804870549,-0.07337711422454596))
push(move(27.94341186370986,37.057295314141555,39.00713570833405))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6493458982880619,-0.7569449804870549,-0.07337711422454596,0.8228549742240914,-0.5510312761729558,-0.13883163931133904))
push(move(28.163695588986215,36.90978059276113,38.969969559192684))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub123 inherits .../COPOLYFF



DPDPoly_sub124 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9911832025170605,0.11350747408068598,-0.06835138898256851))
push(move(28.44458824744558,36.86842940747219,38.918659991271845))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9911832025170605,0.11350747408068598,-0.06835138898256851,0.9762225162157459,0.2031513565500411,0.07562489778688006))
push(move(28.726842187853805,36.9007523239055,38.899195931727945))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9762225162157459,0.2031513565500411,0.07562489778688006,0.7668720354600705,0.3511927088398673,0.5371880140947344))
push(move(28.95093462282344,36.97379980339479,38.95788505753148))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7668720354600705,0.3511927088398673,0.5371880140947344,0.2572170978048843,0.28901818759464537,0.922121386714536))
push(move(29.063292334669917,37.0548312744817,39.13487669442729))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2572170978048843,0.28901818759464537,0.922121386714536,-0.04549431944135418,0.11617800667897597,0.9921859390571245))
push(move(29.07515904331016,37.11338273614097,39.403228683054834))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04549431944135418,0.11617800667897597,0.9921859390571245,-0.1332575923577454,-0.12183522610277624,0.9835642285888108))
push(move(29.037620269881963,37.1203895540872,39.694758939550375))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1332575923577454,-0.12183522610277624,0.9835642285888108,-0.047808669732915754,-0.5496945505951281,0.8339965420458224))
push(move(29.002342194811092,37.04680748857715,39.940684344342635))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.047808669732915754,-0.5496945505951281,0.8339965420458224,0.12777124336818008,-0.9269209742731922,0.3528342625377891))
push(move(29.015659271005035,36.86788636845763,40.0778567589532))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12777124336818008,-0.9269209742731922,0.3528342625377891,0.1353722073326625,-0.9907521494018191,-0.009194777732934135))
push(move(29.062819329880064,36.60807398734754,40.107689100576955))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1353722073326625,-0.9907521494018191,-0.009194777732934135,0.09456572462934237,-0.9881352671860267,-0.12102073156499613))
push(move(29.090080204393356,36.32321991758283,40.07280192565569))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub124 inherits .../COPOLYFF



DPDPoly_sub125 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7000491947079227,-0.6975329030400101,-0.1529018448723392))
push(move(29.043068537530523,36.06968207950171,40.016482880902274))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7000491947079227,-0.6975329030400101,-0.1529018448723392,-0.8744201278828265,-0.4766295892789589,-0.09062932515004489))
push(move(28.873423852763437,35.90064717403301,39.979429791676885))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8744201278828265,-0.4766295892789589,-0.09062932515004489,-0.9960528507117602,-0.08874894255920847,0.0015309420623740302))
push(move(28.60529501926184,35.831060156748386,39.97110981907064))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9960528507117602,-0.08874894255920847,0.0015309420623740302,-0.9765059454272897,0.21100649703236138,0.043730958773931))
push(move(28.310880847557023,35.85052423445157,39.980294425263295))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9765059454272897,0.21100649703236138,0.043730958773931,-0.8221694165822594,0.5666522793446869,0.05424614963532539))
push(move(28.063240007979687,35.94818912013574,39.99538472027589))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8221694165822594,0.5666522793446869,0.05424614963532539,-0.37402056100705017,0.9269424188845463,0.029772000544770114))
push(move(27.929886844851293,36.11311137974738,40.005432136863966))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.37402056100705017,0.9269424188845463,0.029772000544770114,0.03322096385582791,0.9994480103015858,-0.00020558378121603553))
push(move(27.9079028250746,36.33316427678772,40.00774954503745))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03322096385582791,0.9994480103015858,-0.00020558378121603553,0.14946143301034212,0.9887002866824617,-0.011533566513142938))
push(move(27.945918021610375,36.595407070630735,40.005332929930965))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14946143301034212,0.9887002866824617,-0.011533566513142938,0.08439370207476711,0.9963688119603367,-0.011264706070854858))
push(move(27.99160826475282,36.88688298896553,40.00129020474748))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08439370207476711,0.9963688119603367,-0.011264706070854858,0.016298118559654195,0.9998278310685405,-0.008870149502324898))
push(move(27.99661335364369,37.1939262315181,39.998566216296176))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub125 inherits .../COPOLYFF



DPDPoly_sub126 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.09215172967711364,0.9957420457526418,0.0024159962458771044))
push(move(27.965671262557308,37.49337342312886,39.9979215036211))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09215172967711364,0.9957420457526418,0.0024159962458771044,0.0037189531446295246,0.9999859902359338,0.003766791654325704))
push(move(27.94143293451776,37.75527976425006,39.99855697416251))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0037189531446295246,0.9999859902359338,0.003766791654325704,0.437228919484973,0.8993329418020878,0.005579583820117115))
push(move(27.967367800716474,37.94955405383043,39.99963986508753))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.437228919484973,0.8993329418020878,0.005579583820117115,0.943061163569775,0.33260874750827707,0.00265760181314118))
push(move(28.08415153068141,38.04883659276202,40.00037824063071))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.943061163569775,0.33260874750827707,0.00265760181314118,0.9996495452736871,-0.02647236288097029,2.525092007766585e-05))
push(move(28.29295990325093,38.06438730707632,40.00055740277805))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996495452736871,-0.02647236288097029,2.525092007766585e-05,0.9947191525266627,-0.10263135273016379,-0.0007829645041761775))
push(move(28.565698067255582,38.03608444905272,40.000390404386664))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9947191525266627,-0.10263135273016379,-0.0007829645041761775,0.9989281166118744,-0.04628173550875284,-0.0007866387680439535))
push(move(28.8735810449365,38.0044810179056,40.000100383585085))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9989281166118744,-0.04628173550875284,-0.0007866387680439535,0.9984099412953517,0.05636863145769343,-0.0004080566126159517))
push(move(29.188101142275784,38.007247644863426,39.99990027263442))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9984099412953517,0.05636863145769343,-0.0004080566126159517,0.9952993266221324,0.09684652969652544,-1.0548458212476027e-05))
push(move(29.484893059724918,38.03899471838274,39.99985053640339))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9952993266221324,0.09684652969652544,-1.0548458212476027e-05,0.9963068407215426,0.08586413932372505,0.00016943923573279967))
push(move(29.742776953156714,38.06121977762145,39.99989439402639))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub126 inherits .../COPOLYFF



DPDPoly_sub127 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.723516360996569,-0.6903071527574958,0.0003319971715570253))
push(move(29.940654725113937,38.03457060407439,39.99997205582206))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.723516360996569,-0.6903071527574958,0.0003319971715570253,0.45038466842124686,-0.8928345945991509,0.00019271235876827027))
push(move(30.058822813227497,37.921826399727564,40.00002627915845))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.45038466842124686,-0.8928345945991509,0.00019271235876827027,0.051157912547682566,-0.9986905766854557,4.8410334590608215e-06))
push(move(30.09961560326768,37.719449372925425,40.000040072626206))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.051157912547682566,-0.9986905766854557,4.8410334590608215e-06,-0.12054371466863462,-0.9927080183982792,-5.5332167834489814e-05))
push(move(30.082952239136066,37.45077844105143,40.00002856250725))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12054371466863462,-0.9927080183982792,-5.5332167834489814e-05,-0.18989566389097481,-0.9818042747247722,-5.447540590088544e-05))
push(move(30.029241511119693,37.1399009016107,40.00000776939838))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.18989566389097481,-0.9818042747247722,-5.447540590088544e-05,-0.19666940916149064,-0.9804698581327568,-2.8163840451652773e-05))
push(move(29.959261538010296,36.81126905668388,39.999993079331844))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.19666940916149064,-0.9804698581327568,-2.8163840451652773e-05,-0.12890251441519565,-0.9916572703185184,-1.3658116345350154e-06))
push(move(29.899971974050715,36.49544437320961,39.999989257487286))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12890251441519565,-0.9916572703185184,-1.3658116345350154e-06,0.09270985819267227,-0.9956931665096592,1.89700470409379e-05))
push(move(29.883450156750396,36.22804608589591,39.999992276057625))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09270985819267227,-0.9956931665096592,1.89700470409379e-05,0.6638983921877281,-0.747822789190613,2.859583446739822e-05))
push(move(29.94192759971959,36.044845800527945,39.999997842336924))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6638983921877281,-0.747822789190613,2.859583446739822e-05,0.926165398361277,-0.37711756040783867,2.2590645855696058e-05))
push(move(30.105061290922166,35.97842075403464,40.00000182142689))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub127 inherits .../COPOLYFF



DPDPoly_sub128 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.987197282428234,0.15950399856682657,-2.739276317145046e-06))
push(move(30.356811482140444,36.004649493585106,40.00000287944822))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.987197282428234,0.15950399856682657,-2.739276317145046e-06,0.9976516203537323,0.0684926593750077,-4.160680617701987e-06))
push(move(30.641887847782513,36.050710013631274,40.00000208841794))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9976516203537323,0.0684926593750077,-4.160680617701987e-06,0.9528206155764117,-0.30353397586176334,-5.489835764323632e-06))
push(move(30.90372412042158,36.042197170827784,40.00000059856302))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9528206155764117,-0.30353397586176334,-5.489835764323632e-06,0.5698871353796162,-0.8217229782112097,-2.9180202243827106e-06))
push(move(31.087501465370437,35.90875373053513,39.99999952094036))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5698871353796162,-0.8217229782112097,-2.9180202243827106e-06,0.13549376433891264,-0.9907781991067665,-1.5409855568518714e-07))
push(move(31.171338770720546,35.65632233034707,39.99999922828299))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13549376433891264,-0.9907781991067665,-1.5409855568518714e-07,-0.17676726248259267,-0.9842526783876645,1.0577947663813384e-06))
push(move(31.1627054386204,35.35883575057631,39.99999943541005))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.17676726248259267,-0.9842526783876645,1.0577947663813384e-06,-0.5197657156737328,-0.8543088439248842,1.3785638749920804e-06))
push(move(31.070097870565196,35.092605804216596,39.999999834119684))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5197657156737328,-0.8543088439248842,1.3785638749920804e-06,-0.8864893311862677,-0.4627490310008474,8.369512788618901e-07))
push(move(30.902362176828547,34.93092458926254,40.000000125913104))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8864893311862677,-0.4627490310008474,8.369512788618901e-07,-0.9995552697646739,-0.0298205078036402,5.436567331404336e-08))
push(move(30.67535492911246,34.88654927626353,40.00000020680393))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9995552697646739,-0.0298205078036402,5.436567331404336e-08,-0.993716661895721,0.11192495642520144,-2.0401364828227713e-07))
push(move(30.411413264550504,34.91627772949137,40.00000015261575))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub128 inherits .../COPOLYFF



DPDPoly_sub129 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9874286339887938,0.15806546991339204,-2.881533156131424e-07))
push(move(30.133117844588888,34.97480499491813,40.000000045928964))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9874286339887938,0.15806546991339204,-2.881533156131424e-07,-0.9944602866928525,0.10511297822216403,-1.9163650937142805e-07))
push(move(29.862393489615165,35.01814197230865,39.999999966925664))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9944602866928525,0.10511297822216403,-1.9163650937142805e-07,-0.9999598459950586,0.008961383684381386,-1.636598023134e-08))
push(move(29.607160381536552,35.03039791913983,39.99999994457484))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999598459950586,0.008961383684381386,-1.636598023134e-08,-0.9988427729237268,-0.04809485396622514,8.767526042876952e-08))
push(move(29.361908867405482,35.02262718713574,39.99999995873441))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9988427729237268,-0.04809485396622514,8.767526042876952e-08,-0.9984066953168216,-0.0564275708012753,1.0293536024869712e-07))
push(move(29.120588477243682,35.00696920211309,39.99999998728458))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9984066953168216,-0.0564275708012753,1.0293536024869712e-07,-0.9995260879756838,-0.030783103417664603,5.6251751866393986e-08))
push(move(28.877310501283674,34.995238840540324,40.000000008696325))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9995260879756838,-0.030783103417664603,5.6251751866393986e-08,-0.9999963013412612,-0.002719798484742711,5.075265921593779e-09))
push(move(28.629871867497066,34.99185625976139,40.00000001490134))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999963013412612,-0.002719798484742711,5.075265921593779e-09,-0.9999231057565591,0.01240091021484606,-2.2627789231818682e-08))
push(move(28.3797358854101,34.9938855328486,40.00000001122166))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999231057565591,0.01240091021484606,-2.2627789231818682e-08,-0.999892418160531,0.014668064121926495,-2.70156540260549e-08))
push(move(28.12852377349034,34.99807391056311,40.00000000355607))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999892418160531,0.014668064121926495,-2.70156540260549e-08,-0.9999198392576638,0.012661558313535791,-2.3513774973597274e-08))
push(move(27.877816946557296,35.0012485041497,39.99999999766053))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub129 inherits .../COPOLYFF



DPDPoly_sub130 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999977373315345,-0.00212728272947714,3.5805906833816563e-09))
push(move(27.62822738560157,35.00218145900747,39.99999999581344))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999977373315345,-0.00212728272947714,3.5805906833816563e-09,-0.9999945013789094,-0.00331620444879663,6.121573159928103e-09))
push(move(27.379366683211433,35.001652060735374,39.99999999670451))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999945013789094,-0.00331620444879663,6.121573159928103e-09,-0.9999920793502033,-0.003980105131337046,8.288902472592556e-09))
push(move(27.130800435495587,35.00053188047217,39.99999999885849))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999920793502033,-0.003980105131337046,8.288902472592556e-09,-0.9999974852660515,-0.002242646109660601,5.995784387955309e-09))
push(move(26.88210400849227,34.99967288733576,40.000000000826304))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999974852660515,-0.002242646109660601,5.995784387955309e-09,-0.9999999713771897,-0.000239260569223824,2.1024197840906428e-09))
push(move(26.63310761831668,34.99941572880509,40.00000000184256))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999713771897,-0.000239260569223824,2.1024197840906428e-09,-0.9999996148168508,0.000877705047345295,-1.84667674753907e-09))
push(move(26.383914294286363,34.99955369017775,40.00000000187371))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999996148168508,0.000877705047345295,-1.84667674753907e-09,-0.9999994307023213,0.0010670496863724318,-5.737212287474442e-09))
push(move(26.13464043349958,34.99985323613766,40.00000000092205))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999994307023213,0.0010670496863724318,-5.737212287474442e-09,-0.9999998149080017,0.0006084274503153166,-8.193233294038906e-09))
push(move(25.885400041394927,35.00008562995778,39.999999999013625))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999998149080017,0.0006084274503153166,-8.193233294038906e-09,-0.9999999975416144,7.011969167502544e-05,-6.400690157915584e-09))
push(move(25.636240166313087,35.00015647659759,39.99999999683854))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999975416144,7.011969167502544e-05,-6.400690157915584e-09,-0.9999999896106102,-0.0001441484633840751,-4.07120675670122e-09))
push(move(25.387133500341903,35.0001205682541,39.999999995824375))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub130 inherits .../COPOLYFF



DPDPoly_sub131 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999999681391579,-0.00025243154066174547,2.2471646373364752e-08))
push(move(25.13804885897986,35.000040475052884,39.99999999743718))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999681391579,-0.00025243154066174547,2.2471646373364752e-08,-0.9999999863191882,-0.00016541349070097667,2.6650284803971084e-08))
push(move(24.88895564129976,34.999977596066174,40.000000003034714))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999863191882,-0.00016541349070097667,2.6650284803971084e-08,-0.999999999790043,-2.049178872989936e-05,2.3650211893525144e-08))
push(move(24.639840820396323,34.999958064721,40.000000010714565))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999999999790043,-2.049178872989936e-05,2.3650211893525144e-08,-0.9999999980956207,6.171514012709726e-05,-2.478805989342155e-09))
push(move(24.390711615767316,34.999967386154864,40.00000001481829))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999980956207,6.171514012709726e-05,-2.478805989342155e-09,-0.9999999970142076,7.727601204069687e-05,-5.140388193696385e-08))
push(move(24.141576368320074,34.99998881518154,40.000000009479464))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999970142076,7.727601204069687e-05,-5.140388193696385e-08,-0.9999999989760449,4.5253737096391704e-05,-9.8022560463239e-08))
push(move(23.892443277873088,35.00000589034506,39.999999989205364))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999989760449,4.5253737096391704e-05,-9.8022560463239e-08,-0.9999999999805491,6.236486872060064e-06,-8.886775602543074e-08))
push(move(23.64331596287638,35.000011363326955,39.999999960638704))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999805491,6.236486872060064e-06,-8.886775602543074e-08,-0.9999999998659118,-1.6376090603447576e-05,6.8863647520253965e-09))
push(move(23.39419256596556,35.00000899767908,39.99999994492694))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999998659118,-1.6376090603447576e-05,6.8863647520253965e-09,-0.9999999997707123,-2.1413546686968874e-05,1.8841297922518838e-07))
push(move(23.145070908012187,35.00000320402079,39.9999999640698))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999997707123,-2.1413546686968874e-05,1.8841297922518838e-07,-0.9999999998084478,-1.957075516057724e-05,2.9998436410267137e-07))
push(move(22.895948840911924,34.99999832851381,40.000000038802526))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub131 inherits .../COPOLYFF



DPDPoly_sub132 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999999999986493,1.6258806419552386e-06,2.404225556162578e-07))
push(move(22.646825305631523,34.99999645458239,40.00000014546916))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999986493,1.6258806419552386e-06,2.404225556162578e-07,-0.9999999999903244,4.3989570819429994e-06,-1.829116574830142e-08))
push(move(22.397700593695525,34.999996859629434,40.00000020536436))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999903244,4.3989570819429994e-06,-1.829116574830142e-08,-0.9999999999665828,8.145878484156187e-06,-6.920099695786181e-07))
push(move(22.148575080709744,34.99999864636374,40.00000013635558))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999665828,8.145878484156187e-06,-6.920099695786181e-07,-0.9999999999641578,8.35785783360495e-06,-1.3529925253802796e-06))
push(move(21.89944914557978,35.000000918325185,39.99999986056939))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999641578,8.35785783360495e-06,-1.3529925253802796e-06,-0.999999999985793,5.180063113347503e-06,-1.2573143712073396e-06))
push(move(21.65032329278451,35.00000281068135,39.999999462224636))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999999999985793,5.180063113347503e-06,-1.2573143712073396e-06,-0.9999999999991535,-1.300484851406998e-06,4.121477369696724e-08))
push(move(21.401198188383795,35.00000349929659,39.9999992341113))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999991535,-1.300484851406998e-06,4.121477369696724e-08,-0.9999999999364954,-1.097953334250652e-05,2.5415143686193e-06))
push(move(21.152074509082343,35.000002162716356,39.99999948275985))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999364954,-1.097953334250652e-05,2.5415143686193e-06,-0.9999999997940553,-1.966241385329975e-05,5.027809697173438e-06))
push(move(20.90295289454619,34.99999802879577,40.00000050040887))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999997940553,-1.966241385329975e-05,5.027809697173438e-06,-0.9999999998306842,-1.7784242052348106e-05,4.727828788296975e-06))
push(move(20.653832451601208,34.99999236607482,40.000001987826096))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999998306842,-1.7784242052348106e-05,4.727828788296975e-06,-0.9999999999115247,-1.28376630751902e-05,3.484991313141948e-06))
push(move(20.40471024034045,34.99998916792781,40.00000285601484))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub132 inherits .../COPOLYFF



DPDPoly_sub133 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999999982842182,5.6607936668797336e-05,-1.5070015181966332e-05))
push(move(20.15558317833953,34.999992617464166,40.000001960985706))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999982842182,5.6607936668797336e-05,-1.5070015181966332e-05,-0.9999999973783895,6.995919171923781e-05,-1.8679735800790013e-05))
push(move(19.90644831320517,35.00000672047486,39.9999982065195))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999973783895,6.995919171923781e-05,-1.8679735800790013e-05,-0.9999999976397337,6.636779932938172e-05,-1.777210268585773e-05))
push(move(19.657308563802708,35.000027476353544,39.999992653347526))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999976397337,6.636779932938172e-05,-1.777210268585773e-05,-0.9999999999998352,5.487515976638257e-07,-1.685489054443313e-07))
push(move(19.408174984983315,35.000039789779194,39.999989351154724))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999998352,5.487515976638257e-07,-1.685489054443313e-07,-0.9999999912259984,-0.00012796255136875268,3.4257678438818465e-05))
push(move(19.159059229740464,35.00002774976866,39.999992569368146))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999912259984,-0.00012796255136875268,3.4257678438818465e-05,-0.9999999640180629,-0.00025912495277313703,6.941276405240149e-05))
push(move(18.909972516777273,34.999976038519705,40.00000641841483))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999640180629,-0.00025912495277313703,6.941276405240149e-05,-0.9999999666794775,-0.00024935424162593137,6.680947654162744e-05))
push(move(18.66090459322054,34.999898665467356,40.00002714765964))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999666794775,-0.00024935424162593137,6.680947654162744e-05,-0.9999999999704272,-7.427158017847284e-06,1.9957383310638557e-06))
push(move(18.411814324180817,34.99985182065724,40.00003970010402))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999999704272,-7.427158017847284e-06,1.9957383310638557e-06,-0.9999998821113879,0.0004690263659531796,-0.00012566414817880912))
push(move(18.16265818010932,34.999894964912514,40.0000281420291))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999998821113879,0.0004690263659531796,-0.00012566414817880912,-0.9999996865757366,0.0007647629384718946,-0.00020490504298464096))
push(move(17.91339407076982,35.000085592924975,39.999977066540055))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub133 inherits .../COPOLYFF



DPDPoly_sub134 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999997267784609,0.0007140306733162567,-0.0001913196304227265))
push(move(17.664058130331586,35.00037434321503,39.999899698806615))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999997267784609,0.0007140306733162567,-0.0001913196304227265,-0.9999999988337257,4.665050918760041e-05,-1.2501138335316527e-05))
push(move(17.41480328139155,35.00055231887127,39.999852011448006))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999988337257,4.665050918760041e-05,-1.2501138335316527e-05,-0.9999984082657514,-0.0017234345213208992,0.0004617785339308813))
push(move(17.16579198915209,35.00039758758425,39.99989346991265))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999984082657514,-0.0017234345213208992,0.0004617785339308813,-0.9999931213605516,-0.003582697285905809,0.0009599540294122516))
push(move(16.9171819731582,34.999694699765016,40.00008180265194))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999931213605516,-0.003582697285905809,0.0009599540294122516,-0.9999933298570582,-0.0035279823414670628,0.0009452946582758187))
push(move(16.668846213524496,34.99861716905581,40.000370518293806))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999933298570582,-0.0035279823414670628,0.0009452946582758187,-0.9999999681207509,-0.00024390090409665146,6.535171127242131e-05))
push(move(16.42021634424822,34.99794140210716,40.00055158473981))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999999681207509,-0.00024390090409665146,6.535171127242131e-05,-0.9999788374567095,0.006284072554058476,-0.0016837668671869227))
push(move(16.17068603406905,34.998495667333785,40.00040307391506))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999788374567095,0.006284072554058476,-0.0016837668671869227,-0.9999074528253934,0.013141080803871535,-0.0035210480740351037))
push(move(15.91966451538094,35.0010869726851,39.99970875431862))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999074528253934,0.013141080803871535,-0.0035210480740351037,-0.9999081946522593,0.013088309964534901,-0.0035069088285168536))
push(move(15.667596801268136,35.00510741549219,39.99863150858747))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999081946522593,0.013088309964534901,-0.0035069088285168536,-0.9999440637441311,0.010216453714122555,-0.002737417830711181))
push(move(15.416594910608257,35.00767190813839,39.99794437310065))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub134 inherits .../COPOLYFF



DPDPoly_sub135 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9991671315094076,-0.039414617744273815,0.010560834215862987))
push(move(15.16892170323978,35.00568930927434,39.99847559470927))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9991671315094076,-0.039414617744273815,0.010560834215862987,-0.9986026836565489,-0.05104522868733507,0.013677164260039095))
push(move(14.926789293383253,34.99613779774335,40.0010348464682))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9986026836565489,-0.05104522868733507,0.013677164260039095,-0.9985819057046647,-0.051423079582966595,0.013778406491467174))
push(move(14.688644447064782,34.98113914255036,40.005053617210685))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9985819057046647,-0.051423079582966595,0.013778406491467174,-0.9999847634062984,-0.0053321436078016815,0.0014287056362908836))
push(move(14.446640600187607,34.97141200978264,40.00765992532593))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999847634062984,-0.0053321436078016815,0.0014287056362908836,-0.996596646249724,0.07962386710386982,-0.02133458392441578))
push(move(14.19233264465751,34.978492696422855,40.00576271148432))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.996596646249724,0.07962386710386982,-0.02133458392441578,-0.986337596535012,0.15912361468275846,-0.04263591105897753))
push(move(13.917439879015445,35.01369291455234,39.99633109210018))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.986337596535012,0.15912361468275846,-0.04263591105897753,-0.9859010375720375,0.1616281228651847,-0.043306974189575374))
push(move(13.627360644060808,35.06963835207394,39.98134095563432))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9859010375720375,0.1616281228651847,-0.043306974189575374,-0.9997177955246902,0.022946204256883103,-0.0061482535288598155))
push(move(13.35124037706733,35.10651537763894,39.971460048980674))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997177955246902,0.022946204256883103,-0.0061482535288598155,-0.9226310057897105,-0.3725954782395436,0.09962247111426739))
push(move(13.120596650572725,35.08126994466603,39.97822436260656))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9226310057897105,-0.3725954782395436,0.09962247111426739,-0.7526398995750738,-0.6361056431355164,0.17000821256272816))
push(move(12.966747107008354,34.9512415434208,40.0129762883545))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub135 inherits .../COPOLYFF



DPDPoly_sub136 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.012048236609897303,-0.9917010830616061,0.12799922597043034))
push(move(12.902238142203828,34.710718462553466,40.068881428240104))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.012048236609897303,-0.9917010830616061,0.12799922597043034,0.08901380697400392,-0.9957485320844327,0.023693944789594364))
push(move(12.905762498244737,34.42062557875391,40.10632382415969))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08901380697400392,-0.9957485320844327,0.023693944789594364,0.2256731826709655,-0.9243012931678067,-0.3077965790444676))
push(move(12.952463570374924,34.14887420406347,40.08225057357356))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2256731826709655,-0.9243012931678067,-0.3077965790444676,0.2663698749914478,-0.5480273532970537,-0.7929143142454088))
push(move(13.017484744354658,33.96303901338175,39.953945394659115))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2663698749914478,-0.5480273532970537,-0.7929143142454088,0.15880244486395614,-0.10133667493933723,-0.9820960552906571))
push(move(13.075968394070859,33.89477631986513,39.71460861484979))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15880244486395614,-0.10133667493933723,-0.9820960552906571,-0.003679726662901536,0.11688147007902307,-0.9931390544953173))
push(move(13.10305499723319,33.90843402976291,39.42474568445172))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.003679726662901536,0.11688147007902307,-0.9931390544953173,-0.2836762209179428,0.2056649735394025,-0.9366054240419235))
push(move(13.073884823027317,33.96095809609284,39.1522636458554))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2836762209179428,0.2056649735394025,-0.9366054240419235,-0.7572630134709823,0.1649911453087015,-0.6319261431516896))
push(move(12.963743218890485,34.00943492830092,38.9647840887759))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7572630134709823,0.1649911453087015,-0.6319261431516896,-0.9917664457363541,0.033125350469975764,-0.12370136728315045))
push(move(12.765646065317933,34.02811661929853,38.89504240849911))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9917664457363541,0.033125350469975764,-0.12370136728315045,-0.9986904815020293,-0.013254907514155099,0.04941284836999617))
push(move(12.507139680708432,34.02468564815854,38.907832694400476))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub136 inherits .../COPOLYFF



DPDPoly_sub137 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9845973421480951,-0.04521132522146507,0.1688905263969111))
push(move(12.219751015774435,34.01067831346742,38.96011683406063))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9845973421480951,-0.04521132522146507,0.1688905263969111,-0.9918451540267779,-0.03293041909393414,0.12312098899820108))
push(move(11.934920554649942,33.99759929927591,39.00897453908778))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9918451540267779,-0.03293041909393414,0.12312098899820108,-0.9994727468530268,-0.00833932491814636,0.03137967428089733))
push(move(11.671876776278463,33.99248824796766,39.028126258656314))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9994727468530268,-0.00833932491814636,0.03137967428089733,-0.9993352131973292,0.009448967527602242,-0.03521148500860091))
push(move(11.42512601962007,33.99334571429073,39.0249801645636))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993352131973292,0.009448967527602242,-0.03521148500860091,-0.9982614771841013,0.01515149935853556,-0.05696011971023579))
push(move(11.18618878994093,33.99708055088148,39.01101308679573))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9982614771841013,0.01515149935853556,-0.05696011971023579,-0.9991950213476245,0.010147290361003227,-0.0388116195545814))
push(move(10.946605117424795,34.0006086502132,38.997676087930515))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9991950213476245,0.010147290361003227,-0.0388116195545814,-0.9999479423797821,0.0023920269508211915,-0.009919210528389575))
push(move(10.701133954976505,34.002006508423534,38.992172156531325))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999479423797821,0.0023920269508211915,-0.009919210528389575,-0.9999585066744857,-0.002409485932022532,0.008785175403813697))
push(move(10.451309477791646,34.00179347241085,38.99276289043783))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999585066744857,-0.002409485932022532,0.008785175403813697,-0.9998663617546024,-0.003869383147071881,0.015883529383466034))
push(move(10.199522714093774,34.00079783304332,38.996579082125))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998663617546024,-0.003869383147071881,0.015883529383466034,-0.9998548199018725,-0.0037848129376144304,0.01661367840128169))
push(move(9.9481595669397,33.99984633241298,39.00075575498353))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub137 inherits .../COPOLYFF



DPDPoly_sub138 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999972897336908,0.0002117386792352031,0.002318553860572909))
push(move(9.698608271400268,33.99946422692222,39.00325152499425))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999972897336908,0.0002117386792352031,0.002318553860572909,-0.9999986051810528,0.0006395861405013803,-0.0015429081365517226))
push(move(9.450073269045461,33.99951685153799,39.00382776834522))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999986051810528,0.0006395861405013803,-0.0015429081365517226,-0.9999568057410683,0.0010468200186344618,-0.009235302916965345))
push(move(9.201469941715516,33.9997821901513,39.002484485150504))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999568057410683,0.0010468200186344618,-0.009235302916965345,-0.9998836309049699,0.000719536384691775,-0.015238337038042995))
push(move(8.951717291284089,34.00003856308686,38.99922510112131))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998836309049699,0.000719536384691775,-0.015238337038042995,-0.9998958265570258,0.00018113201284634224,-0.0144327137100439))
push(move(8.700577387052423,34.00014264251472,38.99485082726084))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998958265570258,0.00018113201284634224,-0.0144327137100439,-0.999996218399501,-0.00016766171132644693,-0.0027450093347809587))
push(move(8.449731859932363,34.000129498191484,38.99197933428752))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999996218399501,-0.00016766171132644693,-0.0027450093347809587,-0.9997848225861135,-0.00028174728549356607,0.020741965792102593))
push(move(8.201128154339639,34.00005890368497,38.99347982927023))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997848225861135,-0.00028174728549356607,0.020741965792102593,-0.9988106336001684,-0.00019648970843372395,0.04875735430706537))
push(move(7.9567054832170685,33.99999055945169,39.002207871478134))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9988106336001684,-0.00019648970843372395,0.04875735430706537,-0.9985598823265446,-4.7245749206115955e-05,0.05364847785200132))
push(move(7.716074301064262,33.999963482103546,39.017157933794316))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9985598823265446,-4.7245749206115955e-05,0.05364847785200132,-0.9989711745529944,1.731261482405619e-05,0.04534966496551007))
push(move(7.473328320873817,33.99996768899936,39.02817772010425))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub138 inherits .../COPOLYFF



DPDPoly_sub139 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9932319356506033,5.786792988873733e-05,-0.11614783103897504))
push(move(7.221762383142072,33.999986101976916,39.02379040201831))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9932319356506033,5.786792988873733e-05,-0.11614783103897504,-0.9877607695942262,3.221628993928671e-05,-0.15597647583123822))
push(move(6.954694824247743,34.00000166193448,38.9925597129989))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9877607695942262,3.221628993928671e-05,-0.15597647583123822,-0.9850316406840578,-4.550022680590868e-06,-0.17237362568145614))
push(move(6.673664459535817,34.000003978452845,38.937240717959035))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9850316406840578,-4.550022680590868e-06,-0.17237362568145614,-0.9986579378182323,-1.634502568326755e-05,-0.051791147558980045))
push(move(6.400476660376684,33.9999991019099,38.89557542297281))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9986579378182323,-1.634502568326755e-05,-0.051791147558980045,-0.9561260143015743,6.34483419601895e-06,0.29295570439151536))
push(move(6.160004620368568,33.999995571386776,38.910601934529794))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9561260143015743,6.34483419601895e-06,0.29295570439151536,-0.6439316005388961,5.476016223888107e-05,0.7650830613918598))
push(move(5.977107361854121,34.00000191138058,39.02529519757493))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6439316005388961,5.476016223888107e-05,0.7650830613918598,-0.2522295869413532,6.37645083798874e-05,0.9676674177657744))
push(move(5.870381009330818,34.00002020107713,39.25471630754501))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2522295869413532,6.37645083798874e-05,0.9676674177657744,0.0399599186367344,2.11458060454043e-05,0.9992012832534797))
push(move(5.842348935568525,34.00003597877492,39.542289813342514))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0399599186367344,2.11458060454043e-05,0.9992012832534797,0.35227891216649954,-8.665544811502582e-05,0.9358950585047562))
push(move(5.892992102978512,34.00003216631172,39.82010869469996))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.35227891216649954,-8.665544811502582e-05,0.9358950585047562,0.5424965093595985,-0.0001697206964874613,0.8400580387851403))
push(move(6.022280960314974,33.99999171813457,40.02031301317392))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub139 inherits .../COPOLYFF



DPDPoly_sub140 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9997473744406544,-0.0002334916707946499,-0.02247515919092586))
push(move(6.224165167395182,33.99991626283453,40.10200487835336))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997473744406544,-0.0002334916707946499,-0.02247515919092586,0.9945381785376433,-7.796347325937877e-05,-0.10437339389290652))
push(move(6.476506155089109,33.99985732842737,40.09633204138093))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9945381785376433,-7.796347325937877e-05,-0.10437339389290652,0.983871278515276,0.0003015919354771361,-0.17887765750652185))
push(move(6.754506880153389,33.999874688480894,40.04634732223526))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.983871278515276,0.0003015919354771361,-0.17887765750652185,0.9908867603115117,0.0007988435531583284,-0.13469517470323328))
push(move(7.033379866903345,34.000028030250085,39.995086820312366))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9908867603115117,0.0007988435531583284,-0.13469517470323328,0.999153368188515,0.0009879651337308933,-0.04112870971037639))
push(move(7.295662238211683,34.00031096282258,39.972785924086864))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999153368188515,0.0009879651337308933,-0.04112870971037639,0.999557720721314,0.00033001342355453984,0.02973640929150497))
push(move(7.5442749504255815,34.00053320447617,39.974056559842204))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999557720721314,0.00033001342355453984,0.02973640929150497,0.9984202400863399,-0.0012956064481872748,0.05617246291437472))
push(move(7.785656636806438,34.00047273910188,39.98736304523265))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9984202400863399,-0.0012956064481872748,0.05617246291437472,0.9991544626253793,-0.0033337467032259083,0.04097860354756136))
push(move(8.026244359001003,33.999907773772236,40.00117280572953))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9991544626253793,-0.0033337467032259083,0.04097860354756136,0.9999230672445377,-0.0038375573238765854,0.011795454466092018))
push(move(8.270802730354351,33.99885401622124,40.00726047868644))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999230672445377,-0.0038375573238765854,0.011795454466092018,0.9999937078467719,-0.003374233720776794,-0.0010949034946149629))
push(move(8.51924786334731,33.99801569900091,40.00698845353048))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub140 inherits .../COPOLYFF



DPDPoly_sub141 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.999858495607353,0.008196669328620437,-0.014690247571721268))
push(move(8.770622268177195,33.99822111297942,40.00344663966601))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999858495607353,0.008196669328620437,-0.014690247571721268,0.9998737184934983,0.011822760348733174,-0.010619293937032813))
push(move(9.023968223702033,34.000297999891224,39.99972439814453))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998737184934983,0.011822760348733174,-0.010619293937032813,0.9998970359600072,0.013990583667506908,-0.003190775303005679))
push(move(9.277968234450896,34.00422010031373,39.998058303275144))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998970359600072,0.013990583667506908,-0.003190775303005679,0.9999858224608882,0.0049401992520255915,0.001987286736115557))
push(move(9.530218028722423,34.00738145948664,39.998108902431554))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999858224608882,0.0049401992520255915,0.001987286736115557,0.9998470813567126,-0.017023927533567906,0.003999974224312718))
push(move(9.778108932465267,34.006690930046254,39.99905224034208))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998470813567126,-0.017023927533567906,0.003999974224312718,0.9989030264318298,-0.04672251814867563,0.003122512318239841))
push(move(10.019033480820712,33.99905862793672,40.00006445068018))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9989030264318298,-0.04672251814867563,0.003122512318239841,0.9984223131818343,-0.05614135236844068,0.0010164127497447094))
push(move(10.253321504901821,33.98446341901402,40.00053772699289))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9984223131818343,-0.05614135236844068,0.0010164127497447094,0.9998061281551776,-0.019683762931516656,-0.0005055494126061237))
push(move(10.490550043432382,33.97254522059431,40.00054446343593))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998061281551776,-0.019683762931516656,-0.0005055494126061237,0.9983581148454119,0.05727082037061755,-0.0010619116685030067))
push(move(10.742111282419788,33.97484033126423,40.00029057169152))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9983581148454119,0.05727082037061755,-0.0010619116685030067,0.9949245034793454,0.10061812031995129,-0.0011073570597562594))
push(move(11.01939477202515,34.00288240221764,39.99998195347105))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub141 inherits .../COPOLYFF



DPDPoly_sub142 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9885275886885223,0.15104027356915092,-0.00020533341604483973))
push(move(11.322819100899313,34.057186064937135,39.99978300964863))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9885275886885223,0.15104027356915092,-0.00020533341604483973,0.9975709236769428,0.06965810318644587,2.9913166958345556e-05))
push(move(11.616798776749516,34.10210415439895,39.99972194524155))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9975709236769428,0.06965810318644587,2.9913166958345556e-05,0.961695399125573,-0.2741193759228908,0.0007259782020422541))
push(move(11.858373729596906,34.09458262362019,39.99979906879254))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.961695399125573,-0.2741193759228908,0.0007259782020422541,0.47754513543455074,-0.8786060365463267,0.001440891096335006))
push(move(12.004586513628718,33.991570057510756,40.00001468392393))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.47754513543455074,-0.8786060365463267,0.001440891096335006,-0.012161448153772425,-0.9999254554232894,0.0010875547482517532))
push(move(12.033950712228243,33.771549290492196,40.00032883507477))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.012161448153772425,-0.9999254554232894,0.0010875547482517532,-0.11949050468716634,-0.9928352913567143,0.0003217549293620443))
push(move(11.998445928432162,33.48668549346914,40.000563814463575))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11949050468716634,-0.9928352913567143,0.0003217549293620443,0.01035348814671708,-0.9999456690251065,-0.0012100748439780843))
push(move(11.965751678846916,33.20488997848521,40.0005124762371))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.01035348814671708,-0.9999456690251065,-0.0012100748439780843,0.5372119063808765,-0.8434356282894284,-0.00443943404516702))
push(move(12.003546462845515,32.99407303049324,39.999967684125956))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5372119063808765,-0.8434356282894284,-0.00443943404516702,0.9740084278378084,-0.22646329021234263,-0.0046862231189984845))
push(move(12.159018625638689,32.90145621843871,39.99891534882201))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9740084278378084,-0.22646329021234263,-0.0046862231189984845,0.9999851868856021,-0.004099681276046483,-0.003580310433783142))
push(move(12.406246528447344,32.90044264782051,39.99803018307))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub142 inherits .../COPOLYFF



DPDPoly_sub143 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9851113970527478,0.17180302355344076,0.006265500353468889))
push(move(12.703009329426768,32.947978272048765,39.99814046174008))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9851113970527478,0.17180302355344076,0.006265500353468889,0.9910377041038657,0.13321525214433141,0.009897759375788956))
push(move(13.007086304855525,33.00100917183121,40.00007445052828))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9910377041038657,0.13321525214433141,0.009897759375788956,0.9987325931871095,0.04846877807774582,0.01356410179120041))
push(move(13.28532408354729,33.02625300012046,40.0039561953831))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987325931871095,0.04846877807774582,0.01356410179120041,0.9996753892267874,-0.02472335922445377,0.006153997313102985))
push(move(13.538310979476506,33.02678965705745,40.00728918008623))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996753892267874,-0.02472335922445377,0.006153997313102985,0.9981964043240595,-0.057880771886928126,-0.015929677972014323))
push(move(13.774482266114994,33.014155439656804,40.00696745101032))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9981964043240595,-0.057880771886928126,-0.015929677972014323,0.997816138605671,-0.046311902550151676,-0.04709735895200044))
push(move(14.002273216941845,32.99988664246578,39.999885057007866))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.997816138605671,-0.046311902550151676,-0.04709735895200044,0.9982003620558912,-0.01525457056443782,-0.05799426927190448))
push(move(14.230126743335365,32.99300749284565,39.985460832037276))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9982003620558912,-0.01525457056443782,-0.05799426927190448,0.999697980759632,0.006412432915642349,-0.023723995641902057))
push(move(14.46651540187045,32.992792059616306,39.97291313102632))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999697980759632,0.006412432915642349,-0.023723995641902057,0.9986329820641031,0.013499637692000629,0.050496801046615386))
push(move(14.71991894050521,32.99614920130901,39.97383749361434))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9986329820641031,0.013499637692000629,0.050496801046615386,0.9955919327229622,0.013702687593321666,0.09278437287429679))
push(move(14.99881710719754,32.999987776455036,39.999829459440704))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub143 inherits .../COPOLYFF



DPDPoly_sub144 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9875367626470515,0.00025688931895855146,0.1573882982577136))
push(move(15.303318981297487,33.00186203990395,40.053449019694696))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9875367626470515,0.00025688931895855146,0.1573882982577136,0.9966040250860043,-0.0014977738928763343,0.08232966570890941))
push(move(15.599645118224249,33.001939123636305,40.10067588575604))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9966040250860043,-0.0014977738928763343,0.08232966570890941,0.971181650368532,-0.0046872430758194885,-0.23829442238500376))
push(move(15.845441253222813,33.00104729647005,40.09823385328707))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.971181650368532,-0.0046872430758194885,-0.23829442238500376,0.5194243623303755,-0.004262654357378611,-0.85450579962661))
push(move(15.998353120989542,33.00001482726546,40.00284671735775))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5194243623303755,-0.004262654357378611,-0.85450579962661,0.0023303579743774194,-0.0010785525263582848,-0.9999967030726448))
push(move(16.03346619471213,32.99950427039299,39.788913739274236))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0023303579743774194,-0.0010785525263582848,-0.9999967030726448,-0.12033419382215009,0.0003689564338384775,-0.9927333708848127))
push(move(15.999512176945604,32.99947838490624,39.50547586383095))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12033419382215009,0.0003689564338384775,-0.9927333708848127,-0.004865160307072013,0.0010281280648043911,-0.9999876365075065))
push(move(15.964659694917916,32.99971523786601,39.22127368361018))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004865160307072013,0.0010281280648043911,-0.9999876365075065,0.5050359760989862,0.0011487225238226166,-0.8630975282564002))
push(move(15.997077484584894,32.99999289529998,39.005047901391485))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5050359760989862,0.0011487225238226166,-0.8630975282564002,0.9698437845238959,0.00036112639989837,-0.24372710806984563))
push(move(16.14786572672301,33.00013194658617,38.90817782371911))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9698437845238959,0.00036112639989837,-0.24372710806984563,0.9999432149395475,3.4067128492603396e-05,-0.01065672256337014))
push(move(16.392937816531322,33.000140295962666,38.905566010138))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub144 inherits .../COPOLYFF



DPDPoly_sub145 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9876604159742389,-0.0002463668113884933,0.15661047864363212))
push(move(16.68751085442437,33.00007740890312,38.95106364410517))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9876604159742389,-0.0002463668113884933,0.15661047864363212,0.9943235021522543,-0.0001971050817266447,0.10639893898560479))
push(move(16.98680131648493,33.00000275243656,38.99852127403412))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9943235021522543,-0.0001971050817266447,0.10639893898560479,0.9999902005505545,-7.908431506764879e-05,0.00442634708680162))
push(move(17.255134167390743,32.99996488874318,39.01180294888112))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999902005505545,-7.908431506764879e-05,0.00442634708680162,0.9988323606835232,2.92533938309066e-05,-0.04831060334563139))
push(move(17.498690006019732,32.999962269673446,39.00078709324759))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9988323606835232,2.92533938309066e-05,-0.04831060334563139,0.9999859511709203,7.571051988552164e-05,-0.005300163083070097))
push(move(17.735664580716506,32.99997896232147,38.9885610965869))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999859511709203,7.571051988552164e-05,-0.005300163083070097,0.9945279882038632,5.8033412447284095e-05,0.10447046142953441))
push(move(17.984254673893638,32.999999032543364,38.9982134851643))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9945279882038632,5.8033412447284095e-05,0.10447046142953441,0.9859334055216916,1.9972015551472387e-05,0.16713862353602835))
push(move(18.256266434564747,33.00000934085527,39.043247859089))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9859334055216916,1.9972015551472387e-05,0.16713862353602835,0.9950947706902332,-6.808174887986e-06,0.09892622149157917))
push(move(18.53286836297523,33.00001014579003,39.09121625424849))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9950947706902332,-6.808174887986e-06,0.09892622149157917,0.9848633843235434,-2.1266642786861223e-05,-0.17333237945204089))
push(move(18.78605853672572,33.000005716158014,39.09591654189849))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9848633843235434,-2.1266642786861223e-05,-0.17333237945204089,0.9219379703529287,-2.464893747164064e-05,-0.3873375507408908))
push(move(18.987833350083797,33.00000032150575,39.01114406856452))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub145 inherits .../COPOLYFF



DPDPoly_sub146 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.16070834067096257,-8.569388785210069e-07,-0.9870019398349993))
push(move(19.114030243534827,32.99999751565055,38.80592027097058))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16070834067096257,-8.569388785210069e-07,-0.9870019398349993,0.020904609593307536,1.6418465599589685e-06,-0.9997814747708901))
push(move(19.15970068832373,32.9999972721238,38.525431919142804))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.020904609593307536,1.6418465599589685e-06,-0.9997814747708901,-0.27483079204230804,4.9394390435622985e-06,-0.9614926082508382))
push(move(19.125891761791962,32.999998447253354,38.2386326513091))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.27483079204230804,4.9394390435622985e-06,-0.9614926082508382,-0.6703498903839327,4.962273651392427e-06,-0.7420451633409014))
push(move(19.013652527156086,32.99999989699703,38.014483977801135))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6703498903839327,4.962273651392427e-06,-0.7420451633409014,-0.9652626306228875,1.8811343619194527e-06,-0.261281560618893))
push(move(18.826905922804265,33.00000066049986,37.90766967374947))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9652626306228875,1.8811343619194527e-06,-0.261281560618893,-0.9977458706322471,-4.616863412134563e-07,0.06710571984626801))
push(move(18.584577269976055,33.00000073319247,37.8983399883186))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977458706322471,-4.616863412134563e-07,0.06710571984626801,-0.985004981640693,-1.241579919741836e-06,0.17252589991498865))
push(move(18.310471305413454,33.00000042153038,37.94240368545886))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.985004981640693,-1.241579919741836e-06,0.17252589991498865,-0.9899053483668824,-1.070994646605837e-06,0.1417300295402998))
push(move(18.028395381982953,33.00000003213585,37.99575653192084))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9899053483668824,-1.070994646605837e-06,0.1417300295402998,-0.9988536704657933,-4.357661279000144e-07,0.047867995537964884))
push(move(17.758864394336538,32.99999982473792,38.021380189556496))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9988536704657933,-4.357661279000144e-07,0.047867995537964884,-0.9999979524941165,-8.325175602006171e-08,-0.0020236125044191364))
push(move(17.504453563038858,32.99999980355773,38.020865359562904))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub146 inherits .../COPOLYFF



DPDPoly_sub147 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9993053394621002,4.430588132567326e-07,-0.037267123880714875))
push(move(17.261657880701787,32.99999988621804,38.00888836326055))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993053394621002,4.430588132567326e-07,-0.037267123880714875,-0.9999797203391436,3.419766398524295e-07,-0.006368587781548941))
push(move(17.026967449944493,32.99999999027199,38.0001360460145))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999797203391436,3.419766398524295e-07,-0.006368587781548941,-0.999234091713605,1.2889730361871427e-07,0.039130933508799794))
push(move(16.79615301550236,33.00000004541306,38.005923694541316))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999234091713605,1.2889730361871427e-07,0.039130933508799794,-0.9993877674860268,-3.5176630533107945e-08,0.03498700043293231))
push(move(16.560893352006303,33.00000005039373,38.018387939827804))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993877674860268,-3.5176630533107945e-08,0.03498700043293231,-0.9996624098774057,-9.1650850240957e-08,-0.025982037604647096))
push(move(16.311422343786337,33.00000002835142,38.02289335614108))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9996624098774057,-9.1650850240957e-08,-0.025982037604647096,-0.9932724532303492,-6.245509195342777e-08,-0.11580083615311262))
push(move(16.037972227499957,33.00000000245138,38.00479679527046))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9932724532303492,-6.245509195342777e-08,-0.11580083615311262,-0.9867416427863349,-1.1594704968481789e-08,-0.16229889214447768))
push(move(15.736510200270391,32.999999992202035,37.955867127116804))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9867416427863349,-1.1594704968481789e-08,-0.16229889214447768,-0.9947677694546122,1.725178225594338e-08,-0.1021620519287613))
push(move(15.437068989123947,32.99999999539047,37.90596045792985))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9947677694546122,1.725178225594338e-08,-0.1021620519287613,-0.9855071827381271,1.3692841722316282e-08,0.16963370175634168))
push(move(15.182210144585028,33.000000001814996,37.89894084460959))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9855071827381271,1.3692841722316282e-08,0.16963370175634168,-0.903073255934848,-2.9805451975302146e-09,0.42948654742055936))
push(move(15.014514617405133,33.000000001261526,37.97869403463381))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub147 inherits .../COPOLYFF



DPDPoly_sub148 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.10182372237101196,-6.582877462802914e-08,0.9948024575575327))
push(move(14.965049143804231,32.9999999864272,38.177419570437145))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10182372237101196,-6.582877462802914e-08,0.9948024575575327,0.11752870066953938,-3.9619046455376546e-08,0.9930694862490379))
push(move(14.993441764145258,32.99999996807144,38.45481120211248))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11752870066953938,-3.9619046455376546e-08,0.9930694862490379,0.03734946733331914,4.519446273785947e-08,0.9993022652280517))
push(move(15.031960606877128,32.999999963871275,38.74279408644415))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03734946733331914,4.519446273785947e-08,0.9993022652280517,-0.40357995737384483,2.564810249658739e-07,0.9149443797335769))
push(move(15.012818209637887,32.999999991517775,38.97323695903294))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.40357995737384483,2.564810249658739e-07,0.9149443797335769,-0.9414348112204162,3.5949607055910506e-07,0.3371950418114863))
push(move(14.879227746867695,33.000000060935264,39.08905030980962))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9414348112204162,3.5949607055910506e-07,0.3371950418114863,-0.9987931377266493,1.5702365264636023e-07,-0.049114845313100335))
push(move(14.645714304396598,33.000000131699984,39.10472308553014))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9987931377266493,1.5702365264636023e-07,-0.049114845313100335,-0.9869948979879448,-1.6006122745133806e-07,-0.16075158271612996))
push(move(14.355235894146267,33.0000001433138,39.063283433947504))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9869948979879448,-1.6006122745133806e-07,-0.16075158271612996,-0.9891265294775383,-6.249264643136068e-07,-0.1470670210595503))
push(move(14.050824260210764,33.000000035226506,39.007833510579054))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9891265294775383,-6.249264643136068e-07,-0.1470670210595503,-0.9977283437015352,-9.857234532486177e-07,-0.06736580863924803))
push(move(13.770358073207305,32.999999773790165,38.97632161840028))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977283437015352,-9.857234532486177e-07,-0.06736580863924803,-0.9998393953536361,-1.0495417950567607e-06,-0.017921593059040453))
push(move(13.516801981201159,32.9999995076297,38.971776759376226))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub148 inherits .../COPOLYFF



DPDPoly_sub149 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.997969681997374,1.6924080028518944e-06,0.063690767079663))
push(move(13.278631914790193,32.999999461010184,38.98273702753492))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.997969681997374,1.6924080028518944e-06,0.063690767079663,-0.9987587702841538,2.876058133569195e-06,0.04980882223274453))
push(move(13.044276937260603,32.999999858441335,38.99769364250735))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9987587702841538,2.876058133569195e-06,0.04980882223274453,-0.9997816434165661,4.028868657192829e-06,0.0208965420832847))
push(move(12.803494913449518,33.000000829230096,39.006432453437654))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997816434165661,4.028868657192829e-06,0.0208965420832847,-0.9999961521736127,2.3794816079865487e-06,-0.0027741002698075594))
push(move(12.555456994817442,33.0000018282628,39.00791051992821))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999961521736127,2.3794816079865487e-06,-0.0027741002698075594,-0.9998999833780129,-2.50270074751929e-06,-0.014142957059469044))
push(move(12.30339909457487,33.00000201920348,39.00504513215341))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998999833780129,-2.50270074751929e-06,-0.014142957059469044,-0.9998950048012821,-1.003772972457043e-05,-0.014490661568340406))
push(move(12.050573215482242,33.0000005645634,39.00076925607196))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998950048012821,-1.003772972457043e-05,-0.014490661568340406,-0.9999660684283431,-1.4712552174338995e-05,-0.008237825896612674))
push(move(11.799832429736925,32.99999696400663,38.99774735180425))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999660684283431,-1.4712552174338995e-05,-0.008237825896612674,-0.9999995412703023,-9.105564195290854e-06,-0.0009577976161126356))
push(move(11.551073847586133,32.99999321540352,38.996654327617776))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999995412703023,-9.105564195290854e-06,-0.0009577976161126356,-0.9999850309924962,9.137995370911051e-06,0.005471536112761918))
push(move(11.302866722433638,32.9999924388514,38.99727135901615))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999850309924962,9.137995370911051e-06,0.005471536112761918,-0.9999643285865489,2.1360534936509828e-05,0.008446365974790771))
push(move(11.05377397995098,32.999997759795434,38.999375362533605))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub149 inherits .../COPOLYFF



DPDPoly_sub150 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9999367360880019,5.5853603703285925e-05,0.011248142159871266))
push(move(10.802675835288223,33.00001111065056,39.0025966401674))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999367360880019,5.5853603703285925e-05,0.011248142159871266,-0.9999791825983259,3.427785532367305e-05,0.00645237901960365))
push(move(10.550912674539518,33.000025173420035,39.00542868715649))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999791825983259,3.427785532367305e-05,0.00645237901960365,-0.9999727696916055,-3.293694819826161e-05,-0.007379619939844346))
push(move(10.300974289812622,33.00002830826156,39.00583387608437))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999727696916055,-3.293694819826161e-05,-0.007379619939844346,-0.9995937540021105,-0.00014203833300281495,-0.028500996212067232))
push(move(10.055356975661187,33.000008850883184,39.00177157485545))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9995937540021105,-0.00014203833300281495,-0.028500996212067232,-0.99912452910141,-0.00021347999184301422,-0.041834552396060494))
push(move(9.815713116002794,32.9999593545612,38.99199782836874))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.99912452910141,-0.00021347999184301422,-0.041834552396060494,-0.9996608105898215,-0.00013450011647716875,-0.026043150358963575))
push(move(9.576844672446047,32.99990660857043,38.98173568599681))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9996608105898215,-0.00013450011647716875,-0.026043150358963575,-0.9997458220634161,0.0001148885805025217,0.022545023117271176))
push(move(9.3302256220342,32.999894034280764,38.97934991452748))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997458220634161,0.0001148885805025217,0.022545023117271176,-0.995939140344359,0.00046290130223468996,0.09002785375939676))
push(move(9.067307860881739,32.99996516341477,38.99322612580891))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.995939140344359,0.00046290130223468996,0.09002785375939676,-0.9917457764965506,0.0006604275031226789,0.12821809013070967))
push(move(8.782453253945858,33.00014863271178,39.02886576208283))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9917457764965506,0.0006604275031226789,0.12821809013070967,-0.9912171619011856,0.0006815141349859113,0.1322424799035576))
push(move(8.494765948132862,33.00034643292439,39.0672473440608))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub150 inherits .../COPOLYFF



DPDPoly_sub151 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9691745724235669,-0.0012694354214686434,-0.24637174493295133))
push(move(8.2358458543907,33.000396593915454,39.07696441350654))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9691745724235669,-0.0012694354214686434,-0.24637174493295133,-0.8531705743904369,-0.0025979662998135,-0.5216255568560626))
push(move(8.03738909370848,33.00013665308662,39.02651515512293))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8531705743904369,-0.0025979662998135,-0.5216255568560626,-0.3626531897417917,-0.0037039467119454206,-0.9319168121398279))
push(move(7.92718438660107,32.99945669735146,38.88824985296182))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3626531897417917,-0.0037039467119454206,-0.9319168121398279,-0.004134382512666214,-0.0018995430266585415,-0.9999896492551954))
push(move(7.898202290730348,32.99871507314242,38.66884417526565))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004134382512666214,-0.0018995430266585415,-0.9999896492551954,0.14306620024495556,0.0012734008084548437,-0.9897123020342081))
push(move(7.925136778793853,32.99851592345848,38.39299170820182))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14306620024495556,0.0012734008084548437,-0.9897123020342081,0.18943597530026496,0.005479656375475086,-0.9818777849753216))
push(move(7.982520048022352,32.999465566970585,38.08554552380954))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18943597530026496,0.005479656375475086,-0.9818777849753216,0.1722525716310204,0.008554196629198676,-0.9850156736248054))
push(move(8.045069826029923,33.001985126633194,37.77135901895766))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1722525716310204,0.008554196629198676,-0.9850156736248054,0.0859011943889263,0.0064720290640221355,-0.9962826394363954))
push(move(8.08923745654598,33.004765236447945,37.47528862576121))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0859011943889263,0.0064720290640221355,-0.9962826394363954,-0.12941767130052634,-0.006063976756022331,-0.9915716285478581))
push(move(8.09241990910358,33.005552610368625,37.22219243195342))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12941767130052634,-0.006063976756022331,-0.9915716285478581,-0.30989764578156487,-0.01779546977346485,-0.9506033717563731))
push(move(8.032023696489496,33.00208443630975,37.03692854197624))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub151 inherits .../COPOLYFF



DPDPoly_sub152 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9951819072431124,-0.04719231686110988,-0.08594100723892942))
push(move(7.888235748770188,32.99274984365047,36.94092266416477))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9951819072431124,-0.04719231686110988,-0.08594100723892942,-0.9994987292444608,-0.02744031308622208,0.015789852958087467))
push(move(7.668503856804302,32.98232998272387,36.92194725878348))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9994987292444608,-0.02744031308622208,0.015789852958087467,-0.9930121324789962,0.016494759826480746,0.11685387305426782))
push(move(7.395724743549568,32.97922840956933,36.94870324069292))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9930121324789962,0.016494759826480746,0.11685387305426782,-0.9911710246525061,0.07645564731009827,0.10832605357759037))
push(move(7.092971583326788,32.991890053857844,36.989673697387694))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9911710246525061,0.07645564731009827,0.10832605357759037,-0.9913190194764273,0.12100868368409264,0.05141497930893385))
push(move(6.783317332068307,33.026467487284215,37.01563384743729))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9913190194764273,0.12100868368409264,0.05141497930893385,-0.9956504566779734,0.09311419544291226,-0.003148765466337091))
push(move(6.489832697467843,33.0655142265233,37.02095562855979))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9956504566779734,0.09311419544291226,-0.003148765466337091,-0.9962944043799489,-0.07598893186057158,-0.04028823694197))
push(move(6.235587063750834,33.07769175269989,37.013901638967766))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9962944043799489,-0.07598893186057158,-0.04028823694197,-0.8579870573489974,-0.511087888152995,-0.051452696770138084))
push(move(6.043649798147804,33.031483159215554,37.002912846939985))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8579870573489974,-0.511087888152995,-0.051452696770138084,-0.37533137608492834,-0.926610872702049,-0.022773860378542246))
push(move(5.934625968577666,32.898414490612126,36.99585327817151))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.37533137608492834,-0.926610872702049,-0.022773860378542246,-0.14761199688355406,-0.9890211585497628,-0.006917103218438915))
push(move(5.902464379591817,32.68292731700063,36.994346185012546))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub152 inherits .../COPOLYFF



DPDPoly_sub153 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.17447733517108835,-0.9846150259919237,0.009534678941580487))
push(move(5.924816843011681,32.40958696228013,36.99619936239425))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17447733517108835,-0.9846150259919237,0.009534678941580487,0.18637071867533833,-0.9824483779218741,0.007819203227719233))
push(move(5.97910129289491,32.10324754587214,36.999165849707055))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18637071867533833,-0.9824483779218741,0.007819203227719233,0.17956095111718365,-0.9837388816673418,0.003959486049985708))
push(move(6.042587135043899,31.788763942458033,37.00114042746141))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17956095111718365,-0.9837388816673418,0.003959486049985708,0.10026690197571114,-0.9949605752741969,4.492473955796205e-05))
push(move(6.09085434281833,31.49099961740781,37.00163010844183))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10026690197571114,-0.9949605752741969,4.492473955796205e-05,-0.11387476986980631,-0.9934906467253534,-0.002978532581285593))
push(move(6.0984103449619,31.234823489933415,37.00116543913642))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11387476986980631,-0.9934906467253534,-0.002978532581285593,-0.5786578824756394,-0.8155576042984896,-0.004566083630162787))
push(move(6.03974546071228,31.045104566247637,37.00029329370473))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5786578824756394,-0.8155576042984896,-0.004566083630162787,-0.9496612677182297,-0.3132650151999744,-0.0029166500586442277))
push(move(5.8920815377266536,30.944024672838538,36.99953733621468))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9496612677182297,-0.3132650151999744,-0.0029166500586442277,-0.9999861243797861,0.005217833424480534,-0.0007247497840523313))
push(move(5.665338194421643,30.92159874164206,36.99914339424868))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999861243797861,0.005217833424480534,-0.0007247497840523313,-0.993235752534341,0.11611123029824078,0.0009602531802012927))
push(move(5.390987338432613,30.94663933518049,36.9991741632627))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.993235752534341,0.11611123029824078,0.0009602531802012927,-0.9901846176135229,0.1397545487480574,0.0017575965942323165))
push(move(5.100881181450197,30.987584886481645,36.99968910722811))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub153 inherits .../COPOLYFF



DPDPoly_sub154 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9997082567881842,0.023783060941928783,0.004215130100331378))
push(move(4.82504266669243,31.01466682889595,37.00071000949212))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997082567881842,0.023783060941928783,0.004215130100331378,-0.9999951735488941,-0.0012119863495935685,0.0028607635354111))
push(move(4.570429972307724,31.02072406528069,37.00178354832181))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999951735488941,-0.0012119863495935685,0.0028607635354111,-0.999343311046546,-0.03619504678148099,-0.00169270641667981))
push(move(4.328219187264465,31.014064682714498,37.00213131084544))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999343311046546,-0.03619504678148099,-0.00169270641667981,-0.9993011886781148,-0.03622253089181388,-0.009222936750225083))
push(move(4.089279722863958,31.003297365571957,37.00096856701797))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993011886781148,-0.03622253089181388,-0.009222936750225083,-0.9997722282218258,-0.015602814997553234,-0.014561725190296037))
push(move(3.845057560062315,30.996551107062476,36.99767202551855))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997722282218258,-0.015602814997553234,-0.014561725190296037,-0.9999404994001688,0.0020915705079661297,-0.010706212782846808))
push(move(3.5946632223209143,30.995578197610634,36.99376445656943))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999404994001688,0.0020915705079661297,-0.010706212782846808,-0.9999521614685493,0.008325628902984581,0.005134070290350634))
push(move(3.342650837166733,30.997601988675175,36.99229283217446))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999521614685493,0.008325628902984581,0.005134070290350634,-0.999455011398837,0.0036043162219970793,0.03281294095814252))
push(move(3.09369054770455,30.999749309729904,36.99633660854243))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999455011398837,0.0036043162219970793,0.03281294095814252,-0.9984445336653429,-0.005770356905232305,0.05545463168196287))
push(move(2.8518972588646454,30.99937178427688,37.008404681138316))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9984445336653429,-0.005770356905232305,0.05545463168196287,-0.9980789388042605,-0.010039829814091725,0.061136190040476684))
push(move(2.613596419040381,30.99697467941536,37.02300152800471))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub154 inherits .../COPOLYFF



DPDPoly_sub155 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9983755404024633,0.00810185018498858,-0.0563971661492773))
push(move(2.369371754636187,30.99538785892214,37.02873145439271))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9983755404024633,0.00810185018498858,-0.0563971661492773,-0.9939101949899274,0.018991068920115213,-0.10854429324637896))
push(move(2.1096732819323294,30.997495320527488,37.01406136551224))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9939101949899274,0.018991068920115213,-0.10854429324637896,-0.9848865495784686,0.03242882779786621,-0.1701377547373751))
push(move(1.8265206494719104,31.0057603481103,36.969447034286055))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9848865495784686,0.03242882779786621,-0.1701377547373751,-0.9902985110735893,0.02688979327154295,-0.1363297399074962))
push(move(1.5351971762539265,31.01641078516959,36.914821432941096))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9902985110735893,0.02688979327154295,-0.1363297399074962,-0.9977676597539747,-0.012264699353814296,0.06564506301952254))
push(move(1.2687813910558705,31.020904764859925,36.89266569291695))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977676597539747,-0.012264699353814296,0.06564506301952254,-0.8224321314142177,-0.10780725366558182,0.55855437092064))
push(move(1.0608030856525825,31.010579466786425,36.94603273716526))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8224321314142177,-0.10780725366558182,0.55855437092064,-0.3246294349087104,-0.15729740538344814,0.9326699610529369))
push(move(0.9425744739159456,30.97814443179378,37.114208957623475))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3246294349087104,-0.15729740538344814,0.9326699610529369,-0.015410873487358267,-0.102591277030313,0.994604210153791))
push(move(0.9106460457416676,30.93782169981225,37.377438350784125))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.015410873487358267,-0.102591277030313,0.994604210153791,0.12777737554057977,0.0389063879174067,0.9910394721095533))
push(move(0.9339767122415882,30.920908522972766,37.66910092829792))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12777737554057977,0.0389063879174067,0.9910394721095533,0.18042465753464354,0.14754932260598028,0.972458811648094))
push(move(0.9807658673377764,30.959172185124505,37.92128667044972))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub155 inherits .../COPOLYFF



DPDPoly_sub156 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.08717274928093106,0.9799049160991322,0.17940810234645674))
push(move(1.0202453536402387,31.08256775935521,38.069588438260965))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08717274928093106,0.9799049160991322,0.17940810234645674,0.03482880984565258,0.9992600492614793,0.01631894465587079))
push(move(1.0387848230150702,31.29096909270906,38.107744066556336))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03482880984565258,0.9992600492614793,0.01631894465587079,-0.04043143840750647,0.9880044242534256,-0.14903877496798246))
push(move(1.0368678191179237,31.559476552555104,38.07737684950374))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04043143840750647,0.9880044242534256,-0.14903877496798246,-0.09722074646163191,0.983422768677978,-0.15306137495522248))
push(move(1.0153983971847065,31.86245240119269,38.02153678841038))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09722074646163191,0.983422768677978,-0.15306137495522248,-0.13091548814897708,0.9880112944366857,-0.0818218615545993))
push(move(0.976080120700477,32.17436595481699,37.98167455304164))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13091548814897708,0.9880112944366857,-0.0818218615545993,-0.10178903004547309,0.9947949381981409,-0.00469300519484374))
push(move(0.9346877669320734,32.47157066059955,37.971092840884474))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10178903004547309,0.9947949381981409,-0.00469300519484374,0.04871640778219752,0.9975875235568871,0.04945547953903519))
push(move(0.9190190490503019,32.73202983294214,37.97904374002026))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04871640778219752,0.9975875235568871,0.04945547953903519,0.43559279747841256,0.8972997652376808,0.07149857403706318))
push(move(0.9572583521894643,32.93375856149766,37.99400584223653))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.43559279747841256,0.8972997652376808,0.07149857403706318,0.8877886772839078,0.4586539528890158,0.03831208667992547))
push(move(1.076257853620915,33.05593404633643,38.00485305177925))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8877886772839078,0.4586539528890158,0.03831208667992547,0.9774108883203795,0.21084973268327717,0.014503296871993449))
push(move(1.2779755700791413,33.099449140245184,38.00784623710294))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub156 inherits .../COPOLYFF



DPDPoly_sub157 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9854066097226138,-0.1697139390058398,-0.013076407079411975))
push(move(1.5423026541722715,33.08444604395265,38.005794273583426))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9854066097226138,-0.1697139390058398,-0.013076407079411975,0.9818277379033508,-0.18944603345300282,-0.011157665190927353))
push(move(1.848366087428408,33.03173355924731,38.001732792763335))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9818277379033508,-0.18944603345300282,-0.011157665190927353,0.9805259604757066,-0.19628529601828332,-0.006397140002199945))
push(move(2.174876280437353,32.96238943489941,37.99860559428868))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9805259604757066,-0.19628529601828332,-0.006397140002199945,0.9913331786232534,-0.13136711933082884,-0.001099508724972864))
push(move(2.492266755352397,32.90283515338714,37.997531860930565))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9913331786232534,-0.13136711933082884,-0.001099508724972864,0.9969600970946725,0.07782443505316902,0.003731234331474588))
push(move(2.7633597752843766,32.88440618652356,37.997952894721024))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9969600970946725,0.07782443505316902,0.003731234331474588,0.7723746289767596,0.6351093625678037,0.008574968905556524))
push(move(2.950694451686051,32.93862081480314,37.99924757770202))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7723746289767596,0.6351093625678037,0.008574968905556524,0.10095184109260796,0.9948678121166593,0.006838288837450627))
push(move(3.0194844974882864,33.09501280532496,38.00079641319826))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10095184109260796,0.9948678121166593,0.006838288837450627,-0.1436253253372685,0.9896278839633406,0.0029012418038993275))
push(move(2.9915375160697053,33.3411241239427,38.0020142104671))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1436253253372685,0.9896278839633406,0.0029012418038993275,-0.07396532315941413,0.9972598455536339,-0.0013897540306116096))
push(move(2.942648554061458,33.62443887922426,38.00234850472939))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07396532315941413,0.9972598455536339,-0.0013897540306116096,0.030454470474261416,0.9995276288485256,-0.004128485990790136))
push(move(2.950765606823894,33.89084372470442,38.00124813627463))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub157 inherits .../COPOLYFF



DPDPoly_sub158 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9361564481391105,0.35132994092568154,-0.013355793376733432))
push(move(3.0902784995072006,34.08736721205705,37.99823400671172))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9361564481391105,0.35132994092568154,-0.013355793376733432,0.9848769691513372,0.17298769049133775,-0.009623646593107715))
push(move(3.3552620295058677,34.186812820882125,37.99445358594772))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9848769691513372,0.17298769049133775,-0.009623646593107715,0.9850952857004426,-0.1719958254828638,0.0021711994914216776))
push(move(3.6603130135582345,34.18749033116198,37.99266396001459))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9850952857004426,-0.1719958254828638,0.0021711994914216776,0.787309099626593,-0.6159258729176428,0.027923121526848723))
push(move(3.9166375133724087,34.08879769366038,37.99569088571228))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.787309099626593,-0.6159258729176428,0.027923121526848723,0.23081173989653223,-0.971678239841884,0.050668914964834846))
push(move(4.0389796915310265,33.89125267267965,38.00609395297697))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.23081173989653223,-0.971678239841884,0.050668914964834846,-0.12407164857787527,-0.9915673595089023,0.03742188631952432))
push(move(4.027428871037078,33.62238488704337,38.02001234303012))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12407164857787527,-0.9915673595089023,0.03742188631952432,-0.13106411959632291,-0.9913493676375421,-0.006973366409872407))
push(move(3.9696844698839837,33.3374526648397,38.02699444020902))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13106411959632291,-0.9913493676375421,-0.006973366409872407,0.2657965169139553,-0.9566670849296254,-0.11891299428011373))
push(move(3.9574370912762555,33.092977549478924,38.01628837702436))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2657965169139553,-0.9566670849296254,-0.11891299428011373,0.8721699408539355,-0.4432718543714958,-0.20695327345296646))
push(move(4.079069751529357,32.94374811317411,37.97805726254527))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8721699408539355,-0.4432718543714958,-0.20695327345296646,0.9670377244246707,-0.1644479912414068,-0.19440909885141863))
push(move(4.337538738221297,32.899794599690466,37.926095770749576))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub158 inherits .../COPOLYFF



DPDPoly_sub159 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9715171961349014,0.18932931246843743,0.14250876834219145))
push(move(4.6448303452258575,32.92348459594879,37.899363571896046))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9715171961349014,0.18932931246843743,0.14250876834219145,0.8890630436481783,0.20594447353556025,0.40884444259302105))
push(move(4.908513252618896,32.97487113214704,37.93804237914204))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8890630436481783,0.20594447353556025,0.40884444259302105,0.3030039105403195,0.12883096526577373,0.9442410775781591))
push(move(5.039192469837138,33.0148354857599,38.08071489919326))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3030039105403195,0.12883096526577373,0.9442410775781591,-0.12410148069534847,0.01198684205342835,0.992197126637045))
push(move(5.03161288270568,33.02721053641301,38.321653690149034))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12410148069534847,0.01198684205342835,0.992197126637045,-0.1326016657600783,-0.03559119412415846,0.9905301939559789))
push(move(4.973468380849583,33.021183711980775,38.60618205622399))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1326016657600783,-0.03559119412415846,0.9905301939559789,0.20552008072945058,-0.05271503162748931,0.9772321228129338))
push(move(4.957256486158203,33.00725277096018,38.877093589579125))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20552008072945058,-0.05271503162748931,0.9772321228129338,0.7736357565950381,-0.03329786842701372,0.6327550616754007))
push(move(5.072713400636224,32.995727784081396,39.07808446605412))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7736357565950381,-0.03329786842701372,0.6327550616754007,0.9828112815648166,-0.005903012725777203,0.1845186691629932))
push(move(5.327293472657994,32.991326099028896,39.17974606423383))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9828112815648166,-0.005903012725777203,0.1845186691629932,0.9885827653331546,0.009380213952192643,-0.15038659405832683))
push(move(5.634153544264147,32.992355632810074,39.183492482893286))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9885827653331546,0.009380213952192643,-0.15038659405832683,0.9463955011692539,0.015648241188877293,-0.322630884935543))
push(move(5.901272002423718,32.996772321239085,39.09243048562875))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub159 inherits .../COPOLYFF



DPDPoly_sub160 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.00585220621377055,0.01958702784982902,-0.9997910281766094))
push(move(6.039103335643751,33.00252832712631,38.91023356116098))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00585220621377055,0.01958702784982902,-0.9997910281766094,-0.10850218236046512,0.012616312980631868,-0.9940161493002974))
push(move(6.037631456698863,33.00745462890585,38.658777732383385))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10850218236046512,0.012616312980631868,-0.9940161493002974,-0.14268359588843288,-0.003507776105855143,-0.989762136561678))
push(move(5.981398104141839,33.00923812084115,38.3815812265798))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14268359588843288,-0.003507776105855143,-0.989762136561678,0.17661086277944563,-0.03252864735698863,-0.9837431017544288))
push(move(5.960455053605477,33.00555730117857,38.12342339720401))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17661086277944563,-0.03252864735698863,-0.9837431017544288,0.7504786765272835,-0.05824602644631922,-0.6583229879634096))
push(move(6.062726469878456,32.99425885123376,37.928572745044484))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7504786765272835,-0.05824602644631922,-0.6583229879634096,0.9769444825812755,-0.04258430910662643,-0.20920338088069995))
push(move(6.302287863754042,32.97902702986924,37.823566247361654))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9769444825812755,-0.04258430910662643,-0.20920338088069995,0.9912565222842857,0.00295779091503022,0.13191572499806986))
push(move(6.602116215574292,32.97074723919316,37.8130675547047))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9912565222842857,0.00295779091503022,0.13191572499806986,0.8502714923836759,0.0923224809905086,0.5181842806795607))
push(move(6.87956319044139,32.98074955040592,37.900389644263974))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8502714923836759,0.0923224809905086,0.5181842806795607,0.43069434004248514,0.1852953772507472,0.8832711976651745))
push(move(7.0535115398740755,33.01975974475187,38.08816317242165))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.43069434004248514,0.1852953772507472,0.8832711976651745,0.170582869523884,0.20363302297226626,0.9640721324569931))
push(move(7.100434380396254,33.07577380928629,38.35335394479767))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub160 inherits .../COPOLYFF



DPDPoly_sub161 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.20063569514841817,-0.13636192735216285,0.9701292401536584))
push(move(7.070518632400437,33.10769432992541,38.64007758842277))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.20063569514841817,-0.13636192735216285,0.9701292401536584,-0.15836970288748203,-0.3981654578123846,0.9035393214533526))
push(move(7.018768705243342,33.072522523621174,38.890302841081734))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15836970288748203,-0.3981654578123846,0.9035393214533526,0.0141552438265514,-0.8875452909530863,0.4605029702175786))
push(move(6.999192349995008,32.928369235729896,39.04701211965807))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0141552438265514,-0.8875452909530863,0.4605029702175786,0.1033517555222461,-0.9935316839182434,0.04704474126881165))
push(move(7.025049495759853,32.67871185425382,39.09463154948184))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1033517555222461,-0.9935316839182434,0.04704474126881165,0.037092976185257684,-0.9914300376407327,-0.12526209155772317))
push(move(7.055478545318936,32.387283908838704,39.072633063227336))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.037092976185257684,-0.9914300376407327,-0.12526209155772317,-0.22587283802262909,-0.9581416591247962,-0.1759148148769336))
push(move(7.045878773444414,32.121981883175316,39.02429157796341))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22587283802262909,-0.9581416591247962,-0.1759148148769336,-0.7766562309706209,-0.624164438306077,-0.08499325178253322))
push(move(6.952324028014314,31.94970743341245,38.99229401947944))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7766562309706209,-0.624164438306077,-0.08499325178253322,-0.996256373094402,-0.0800949481250588,0.03252750149691714))
push(move(6.760963741667413,31.89300820900315,38.99311194652958))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.996256373094402,-0.0800949481250588,0.03252750149691714,-0.9908040715084588,0.13119607984709844,0.033088978754478506))
push(move(6.49940341941662,31.913294464190756,39.00708175501822))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9908040715084588,0.13119607984709844,0.033088978754478506,-0.9840507319916227,0.17718879550943806,0.015757144813259932))
push(move(6.198272975515564,31.967516201862818,39.01190361618652))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub161 inherits .../COPOLYFF



DPDPoly_sub162 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9834256357526004,0.05190226357163,-0.17372441964425953))
push(move(5.888076051118084,32.01306021136018,38.98582362889675))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9834256357526004,0.05190226357163,-0.17372441964425953,-0.9878810089932853,0.01827121311578466,-0.15413395097020718))
push(move(5.5931550861454085,32.02862525776564,38.933725156355315))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9878810089932853,0.01827121311578466,-0.15413395097020718,-0.9990514964504024,-0.04079681376382347,-0.015222595932739206))
push(move(5.329038074665368,32.02339981897951,38.89859983243886))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9990514964504024,-0.04079681376382347,-0.015222595932739206,-0.9152551479869286,-0.0651153646373575,0.3975776696088065))
push(move(5.110574662192974,32.00891882245975,38.92637205511381))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9152551479869286,-0.0651153646373575,0.3975776696088065,-0.5413052329375581,-0.036548930349760436,0.8400314401763214))
push(move(4.952528407358323,31.996613229108796,39.06215186100965))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5413052329375581,-0.036548930349760436,0.8400314401763214,-0.18515246552220507,-0.0053659092371861,0.982695156968379))
push(move(4.865048182555194,31.992340874091127,39.30739545880837))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.18515246552220507,-0.0053659092371861,0.982695156968379,0.0877871427440712,0.009264816099051595,0.9960961704330976))
push(move(4.851429876111441,31.993683289498467,39.598731467188394))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0877871427440712,0.009264816099051595,0.9960961704330976,0.41693498816114094,0.014623899161125276,0.9088186602509845))
push(move(4.914413569015096,31.997550762611397,39.867530700343835))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.41693498816114094,0.014623899161125276,0.9088186602509845,0.8289156002517469,0.010505691807883983,0.5592750290321602))
push(move(5.05655990318208,32.0008781781885,40.04586591661852))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8289156002517469,0.010505691807883983,0.5592750290321602,0.9608802172829575,0.005303141722158371,0.27691349682189753))
push(move(5.2698172082703,32.002055154976894,40.10732396832217))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub162 inherits .../COPOLYFF



DPDPoly_sub163 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9819653172633316,-0.003619490562064648,-0.18902649279927905))
push(move(5.529772692311454,32.00171409153853,40.08949445514703))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9819653172633316,-0.003619490562064648,-0.18902649279927905,0.9837598048610651,-0.0034377154672708726,-0.17945703790067716))
push(move(5.810616385838435,32.00067891129309,40.035432567747435))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9837598048610651,-0.0034377154672708726,-0.17945703790067716,0.9926005228221046,-0.0023289795067842583,-0.12140336876603347))
push(move(6.0867237148567,31.99976784496975,39.987895690623574))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9926005228221046,-0.0023289795067842583,-0.12140336876603347,0.9996241139068422,-0.0005298835819864774,-0.027410766486004306))
push(move(6.344623390170296,31.99942594865508,39.970119032463145))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9996241139068422,-0.0005298835819864774,-0.027410766486004306,0.9992504102961802,0.0007405123028737439,0.03870489845542333))
push(move(6.590298841251782,31.999500908440247,39.974087119976126))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992504102961802,0.0007405123028737439,0.03870489845542333,0.9981045543603663,0.0011872629212571215,0.061529578024318396))
push(move(6.831481287680098,31.999786743365938,39.98897695365204))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9981045543603663,0.0011872629212571215,0.061529578024318396,0.9988870137964965,0.000922274007150925,0.047158064839150186))
push(move(7.075839861090742,32.00007846802264,40.00401898826956))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9988870137964965,0.000922274007150925,0.047158064839150186,0.999819255031426,0.0003831783818506031,0.019008167789987016))
push(move(7.326509313986595,32.00024380354909,40.01234752854122))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999819255031426,0.0003831783818506031,0.019008167789987016,0.9999620077787593,-0.0001648263377945993,-0.008715264273135))
push(move(7.579086590431359,32.00027133615001,40.01358651582309))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999620077787593,-0.0001648263377945993,-0.008715264273135,0.9997466092287495,-0.0004420815706014308,-0.02250604140010311))
push(move(7.828456781576824,32.00016106624287,40.00797275750267))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub163 inherits .../COPOLYFF



DPDPoly_sub164 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9979023116242837,-0.0013328456394414022,-0.06472402936632246))
push(move(8.069579915361208,31.999913859296647,39.99578354181368))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9979023116242837,-0.0013328456394414022,-0.06472402936632246,0.9987087354327173,-0.0010493854021277683,-0.050791343363417334))
push(move(8.30354750345767,31.999601361093234,39.98060838401885))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987087354327173,-0.0010493854021277683,-0.050791343363417334,0.9999953491017685,-6.74217703770214e-05,-0.003049135801691163))
push(move(8.542037779876098,31.999417427886215,39.97175574595093))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999953491017685,-6.74217703770214e-05,-0.003049135801691163,0.9971992498802779,0.001543955496044371,0.07477481019459112))
push(move(8.79777916043108,31.999568038964966,39.9791013975704))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9971992498802779,0.001543955496044371,0.07477481019459112,0.9897896518658622,0.002949924459853468,0.14250523851752384))
push(move(9.083287950202068,32.00025544112711,40.01234129468532))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9897896518658622,0.002949924459853468,0.14250523851752384,0.9895801916993296,0.0029825389273922223,0.14395189702766903))
push(move(9.391514500741735,32.00133758100833,40.06458460718747))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9895801916993296,0.0029825389273922223,0.14395189702766903,0.9997334083944587,0.00047947189050534744,0.023084242389660267))
push(move(9.680314335727275,32.00205484500609,40.099189315182116))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997334083944587,0.00047947189050534744,0.023084242389660267,0.9209382186806356,-0.008055965046592062,-0.38962533131266747))
push(move(9.90388870074923,32.00158331554542,40.07641553143974))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9209382186806356,-0.008055965046592062,-0.38962533131266747,0.30421168139633814,-0.0179417705693655,-0.9524354811591434))
push(move(10.016822140803143,31.99911122179597,39.95682149681769))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.30421168139633814,-0.0179417705693655,-0.9524354811591434,-0.013283696759689465,-0.01785752491100838,-0.9997522954234461))
push(move(10.013837394507865,31.99509877087322,39.73218470978897))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub164 inherits .../COPOLYFF



DPDPoly_sub165 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.06474353771577492,0.0059411795700780555,-0.9978842501559797))
push(move(9.964461779934584,31.992376724387373,39.452465243226655))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06474353771577492,0.0059411795700780555,-0.9978842501559797,0.14349734610501289,0.021285414034666696,-0.9894217719507648))
push(move(9.946393321606026,31.994034773349043,39.173978298787176))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14349734610501289,0.021285414034666696,-0.9894217719507648,0.6745820049201849,0.051116341321952405,-0.7364280265495883))
push(move(10.036915837659096,32.00312406333836,38.952890692723486))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6745820049201849,0.051116341321952405,-0.7364280265495883,0.9595585465156417,0.04649440707681765,-0.27764305487327484))
push(move(10.263689632353504,32.0180778495089,38.82759210074017))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9595585465156417,0.04649440707681765,-0.27764305487327484,0.9964392990110758,0.007650956648469956,0.08396538720615264))
push(move(10.5582641045035,32.02838544904065,38.802041402719055))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9964392990110758,0.007650956648469956,0.08396538720615264,0.8840192152775587,-0.07321499445562349,0.4616812662507678))
push(move(10.841183065029872,32.02251201546619,38.876254833865815))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8840192152775587,-0.07321499445562349,0.4616812662507678,0.5026318159722647,-0.1756193946458107,0.8464745039259378))
push(move(11.033287532408588,31.989043727685143,39.050123586798215))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5026318159722647,-0.1756193946458107,0.8464745039259378,0.0764878410427068,-0.17161298730135693,0.9821907109936084))
push(move(11.096511737503034,31.933300259523687,39.30624992073018))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0764878410427068,-0.17161298730135693,0.9821907109936084,-0.1299637282782047,-0.03310149024146718,0.9909660542500046))
push(move(11.075519478240054,31.894289446679352,39.59242971464003))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1299637282782047,-0.03310149024146718,0.9909660542500046,-0.19061922063440245,0.07822048645478766,0.9785427268257167))
push(move(11.024900331811207,31.91506098401128,39.85228282604833))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub165 inherits .../COPOLYFF



DPDPoly_sub166 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.09489802612877263,0.957339487356715,0.2729385839056924))
push(move(10.999057984210209,32.03845980992925,40.02960692785015))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09489802612877263,0.957339487356715,0.2729385839056924,0.10867652598265938,0.9882996369234335,0.10701981291961814))
push(move(11.022439446446116,32.27433402126637,40.09685493555532))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10867652598265938,0.9882996369234335,0.10701981291961814,0.05907691242636111,0.9929247049502207,-0.10300703237005371))
push(move(11.056789299631522,32.56346590074871,40.086458161546915))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05907691242636111,0.9929247049502207,-0.10300703237005371,-0.1713870698522943,0.9658276586866816,-0.19443098005011372))
push(move(11.055974001380418,32.83796009270814,40.03838378593424))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1713870698522943,0.9658276586866816,-0.19443098005011372,-0.6983610773219898,0.6957667650135794,-0.1679297900439603))
push(move(10.973986470002476,33.03008956811274,39.9925220476407))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6983610773219898,0.6957667650135794,-0.1679297900439603,-0.9891960875665663,0.14229484537703962,-0.03526013786306945))
push(move(10.788840814425381,33.10410091777846,39.974148218609734))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9891960875665663,0.14229484537703962,-0.03526013786306945,-0.9934005655396557,-0.11129996213144193,0.027706223398938492))
push(move(10.530836917557492,33.09383617794739,39.97672587283818))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9934005655396557,-0.11129996213144193,0.027706223398938492,-0.9844609755641369,-0.1704450862192497,0.04224997248543886))
push(move(10.237150794450262,33.042289921830246,39.98953500966928))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9844609755641369,-0.1704450862192497,0.04224997248543886,-0.9916977360074074,-0.12487200514870858,0.030701510189621365))
push(move(9.944900601272977,32.992389834794096,40.00187241887273))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9916977360074074,-0.12487200514870858,0.030701510189621365,-0.9968905631279618,-0.07657887110383507,0.01857098938876746))
push(move(9.678082103161543,32.97189344318328,40.006842957947356))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub166 inherits .../COPOLYFF



DPDPoly_sub167 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9982049385564103,0.05815911433642266,-0.014297484435941279))
push(move(9.430981143715877,32.97421207583171,40.00617319008172))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9982049385564103,0.05815911433642266,-0.014297484435941279,-0.9981848832794927,0.058593555625631906,-0.013918837288063122))
push(move(9.193795782417858,32.98803137286565,40.00277593779353))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9981848832794927,0.058593555625631906,-0.013918837288063122,-0.9990404579370719,0.04283981261892377,-0.00910570478662653))
push(move(8.956735720233198,33.00205033111538,39.99956024192488))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9990404579370719,0.04283981261892377,-0.00910570478662653,-0.9999041446010789,0.013735905554853477,-0.0017396862282890045))
push(move(8.713210572682545,33.00863932739734,39.998395667695455))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999041446010789,0.013735905554853477,-0.0017396862282890045,-0.9999687433844874,-0.007563103248788844,0.002304717617673751))
push(move(8.464167507494754,33.00881685017226,39.99870324564097))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999687433844874,-0.007563103248788844,0.002304717617673751,-0.9998084822203178,-0.019399352603919232,0.002581472225973584))
push(move(8.2116382716913,33.00484576572431,39.99955168634732))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998084822203178,-0.019399352603919232,0.002581472225973584,-0.9997505796222952,-0.022333080159716,0.00010988841904838069))
push(move(7.957654336989414,32.99898894035963,40.0000110457897))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997505796222952,-0.022333080159716,0.00010988841904838069,-0.9998621641599069,-0.016477969311004696,-0.002032045484999946))
push(move(7.704153846891667,32.99350924782688,39.99960746692126))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998621641599069,-0.016477969311004696,-0.002032045484999946,-0.9999979360357534,-0.0015567278039073016,-0.0013055737351374398))
push(move(7.452846166888476,32.990669580118755,39.9989851112163))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999979360357534,-0.0015567278039073016,-0.0013055737351374398,-0.9999652306227553,0.008338105413854225,-0.0001163773483001346))
push(move(7.2054062494116105,32.992732831972255,39.99895631381357))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub167 inherits .../COPOLYFF



DPDPoly_sub168 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9978860592551092,0.0639138441749178,0.011765766744796718))
push(move(6.963502882269387,33.001953855159165,40.000331555468826))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9978860592551092,0.0639138441749178,0.011765766744796718,-0.9984168120496908,0.05526172317300557,0.01048863043883964))
push(move(6.726173674439108,33.017154610663,40.00312983095846))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9984168120496908,0.05526172317300557,0.01048863043883964,-0.9998879125653678,0.014639688761309734,0.003137167296061594))
push(move(6.4857424352865465,33.02839758611956,40.00535055425392))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998879125653678,0.014639688761309734,0.003137167296061594,-0.9977558300170776,-0.06578740274524852,-0.012462796915902992))
push(move(6.233477608062474,33.024368336296675,40.0046756742144))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977558300170776,-0.06578740274524852,-0.012462796915902992,-0.9882371419262268,-0.15012445853465795,-0.02915472975622407))
push(move(5.9606662474467855,32.99377649185769,39.998791917664136))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9882371419262268,-0.15012445853465795,-0.02915472975622407,-0.985270785030546,-0.16781884562929117,-0.03283771028777043))
push(move(5.668848139437288,32.93859469993562,39.98801811412909))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.985270785030546,-0.16781884562929117,-0.03283771028777043,-0.9983377068602366,-0.05654506405571392,-0.011157006407615674))
push(move(5.386801502737304,32.8960314653455,39.97966580074537))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9983377068602366,-0.05654506405571392,-0.011157006407615674,-0.9534781917750951,0.29585531918937963,0.057870267984909116))
push(move(5.147777611911303,32.90908167427904,39.98219484693756))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9534781917750951,0.29585531918937963,0.057870267984909116,-0.5577009337230238,0.8164421999415176,0.14963890763809617))
push(move(4.98500691497051,33.02070454862914,40.0040522635607))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5577009337230238,0.8164421999415176,0.14963890763809617,-0.2850006701688976,0.9438369816332407,0.16717167853656556))
push(move(4.9164567695208685,33.2477221283891,40.04426144226878))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub168 inherits .../COPOLYFF



DPDPoly_sub169 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.14140731527437642,0.9894693922453955,-0.030891633113525552))
push(move(4.917864933171731,33.53464064414709,40.07577270177839))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14140731527437642,0.9894693922453955,-0.030891633113525552,0.17413768327874643,0.9682986589488112,-0.1790915250374651))
push(move(4.9577264417149625,33.8135635736697,40.067064615532075))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17413768327874643,0.9682986589488112,-0.1790915250374651,0.19579556065544695,0.738455941931601,-0.6452495023272247))
push(move(5.004543404336417,34.01661930498725,39.98662841493296))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19579556065544695,0.738455941931601,-0.6452495023272247,0.08927419761966632,0.19036816993513692,-0.977645169534894))
push(move(5.03397940957146,34.10115669894306,39.81577092227535))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08927419761966632,0.19036816993513692,-0.977645169534894,-0.00813203445189991,-0.09945406002023613,-0.9950089245635761))
push(move(5.0423383007165405,34.09721308738589,39.57273505196466))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00813203445189991,-0.09945406002023613,-0.9950089245635761,-0.07582615135405023,-0.1648655877439315,-0.9833970371872597))
push(move(5.029620082738468,34.04784251845592,39.28237806350519))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07582615135405023,-0.1648655877439315,-0.9833970371872597,-0.12913886173540054,-0.11816367024421161,-0.9845610704390574))
push(move(4.995829462392466,33.99609089103725,38.96955721695414))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12913886173540054,-0.11816367024421161,-0.9845610704390574,-0.13748230414781187,-0.03706783925092922,-0.9898103815072238))
push(move(4.947872517793284,33.97304247625606,38.65913058426747))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13748230414781187,-0.03706783925092922,-0.9898103815072238,-0.04663415352039191,0.027093945305120954,-0.9985445277268508))
push(move(4.913380039008004,33.9738609612198,38.37595867551943))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04663415352039191,0.027093945305120954,-0.9985445277268508,0.04522424525239596,0.056694885870318935,-0.997366761807061))
push(move(4.923856970377507,33.98699525290228,38.14490245655196))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub169 inherits .../COPOLYFF



DPDPoly_sub170 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9422005910886697,0.032322133261659024,-0.3334866202017358))
push(move(5.010802233513878,34.00089562560153,37.990817648255835))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9422005910886697,0.032322133261659024,-0.3334866202017358,0.9895504933965441,0.013769851165522842,-0.1435277402369853))
push(move(5.192054999508885,34.00711349057842,37.92666424726502))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9895504933965441,0.013769851165522842,-0.1435277402369853,0.9975964275039649,-0.006851250347377529,0.06895236181599625))
push(move(5.442704529744661,34.006905657809924,37.92817308287505))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9975964275039649,-0.006851250347377529,0.06895236181599625,0.9918148296049365,-0.012200868333232837,0.12710028555296807))
push(move(5.7294996191919045,34.00342245126053,37.96381160951567))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9918148296049365,-0.012200868333232837,0.12710028555296807,0.9950118850497329,-0.009002862102470574,0.09934936881400233))
push(move(6.01919128954255,33.99981397210187,38.002049404947186))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9950118850497329,-0.009002862102470574,0.09934936881400233,0.999446714543262,-0.0022894504474143406,0.03318166971880994))
push(move(6.287051948652927,33.998377720828195,38.01948177069165))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999446714543262,-0.0022894504474143406,0.03318166971880994,0.9997983122770563,0.002339181338529809,-0.019946503418276047))
push(move(6.5361533307309205,33.99862975791689,38.01921256478179))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997983122770563,0.002339181338529809,-0.019946503418276047,0.999148714445038,0.0028667703643359024,-0.04115371247537767))
push(move(6.775226734251202,33.9995198805362,38.009742426355814))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999148714445038,0.0028667703643359024,-0.04115371247537767,0.9995343171979227,-0.00019972719501342055,-0.030514076304717287))
push(move(7.0130031813089975,33.99999794165181,37.99957170315538))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9995343171979227,-0.00019972719501342055,-0.030514076304717287,0.9998251261037715,-0.002360663118234369,-0.01855113153474856))
push(move(7.25618294453006,33.99942377574705,37.99505965434172))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub170 inherits .../COPOLYFF



DPDPoly_sub171 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9999510734956238,-0.0004746055713915126,0.009880554868080328))
push(move(7.5045591951881905,33.99855166991374,37.99528314602217))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999510734956238,-0.0004746055713915126,0.009880554868080328,0.9999506584017853,0.003092668496211518,0.009440135772791484))
push(move(7.7564579444133805,33.998432111514354,37.997772167214194))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999506584017853,0.003092668496211518,0.009440135772791484,0.9999294562300557,0.010701121927406057,0.005154469221934025))
push(move(8.010205199434553,34.00011554254528,38.0000567484924))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999294562300557,0.010701121927406057,0.005154469221934025,0.9999029752057377,0.01389795403216483,-0.0009418324870342491))
push(move(8.264059205979665,34.00386439771883,38.00038876687876))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999029752057377,0.01389795403216483,-0.0009418324870342491,0.9999788606322634,0.00588932001727984,-0.0027557573069054587))
push(move(8.516037878143035,34.00714626401624,37.99958029261455))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999788606322634,0.00588932001727984,-0.0027557573069054587,0.9998842303250609,-0.01518455093638249,0.0009774252508866882))
push(move(8.76410587292979,34.00680939481945,37.9990107304917))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998842303250609,-0.01518455093638249,0.0009774252508866882,0.9989524833749487,-0.04487077028433867,0.008974961454680448))
push(move(9.00622788247942,33.99970208711695,38.000059472176986))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9989524833749487,-0.04487077028433867,0.008974961454680448,0.9983280958527014,-0.05624592496367758,0.013319495339531069))
push(move(9.242502326472273,33.98532086785846,38.00330882254518))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9983280958527014,-0.05624592496367758,0.013319495339531069,0.9997216097900438,-0.022807494073363216,0.006043271704713935))
push(move(9.480920123671186,33.972957869169136,38.00639272185766))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997216097900438,-0.022807494073363216,0.006043271704713935,0.9999881563118155,0.004839537991448087,-0.0005158566907070288))
push(move(9.73129663492617,33.974169590158766,38.0062635619294))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub171 inherits .../COPOLYFF



DPDPoly_sub172 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9829974657784945,0.17821023558553004,-0.044239057467439814))
push(move(10.00344720737519,34.000512514013145,37.999873738614944))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9829974657784945,0.17821023558553004,-0.044239057467439814,0.9847952592399708,0.16857059082760437,-0.041979200641643406))
push(move(10.299060189208246,34.054104980900014,37.986569899951355))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9847952592399708,0.16857059082760437,-0.041979200641643406,0.9965927549599243,0.07999791806031586,-0.020080185940458843))
push(move(10.588469741799006,34.10065271406995,37.974935785144886))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9965927549599243,0.07999791806031586,-0.020080185940458843,0.9698233920153922,-0.23658375216514113,0.05891278733197014))
push(move(10.83444976474297,34.097081463701855,37.97578242214378))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9698233920153922,-0.23658375216514113,0.05891278733197014,0.5778505228087674,-0.7940710388370105,0.18852044602627394))
push(move(10.99977415763541,34.00031697997464,37.99992083889629))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5778505228087674,-0.7940710388370105,0.18852044602627394,0.09986661323394934,-0.9778676735974482,0.18385176772143094))
push(move(11.061057533616747,33.785681440104945,38.04971191770511))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09986661323394934,-0.9778676735974482,0.18385176772143094,-0.0811925061789206,-0.9940492975428612,0.07262073391897243))
push(move(11.050611878537712,33.50252735579592,38.09351172530115))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0811925061789206,-0.9940492975428612,0.07262073391897243,-0.09945462599214977,-0.9789038291421868,-0.17848269008373316))
push(move(11.014757655753048,33.21882664977111,38.0911237581453))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09945462599214977,-0.9789038291421868,-0.17848269008373316,0.04961111194432848,-0.736152908729794,-0.6749945426003909))
push(move(10.999815328730236,33.002551244904154,38.00235151262963))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04961111194432848,-0.736152908729794,-0.6749945426003909,0.16015457093485005,-0.4364580763201707,-0.88535578217097))
push(move(11.035973839702512,32.9040109781516,37.80246245184834))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub172 inherits .../COPOLYFF



DPDPoly_sub173 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.027833107239871896,0.1595174795638895,-0.9868026610497955))
push(move(11.085709714775785,32.89937869133396,37.53163438015343))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.027833107239871896,0.1595174795638895,-0.9868026610497955,-0.14960818850273375,0.183634604180097,-0.9715429594621895))
push(move(11.093735847989091,32.9453781742446,37.247073639429345))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14960818850273375,0.183634604180097,-0.9715429594621895,-0.6130804214237476,0.15706404888946507,-0.7742501413712032))
push(move(11.004765063178258,32.9987331398128,37.00598663885844))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6130804214237476,0.15706404888946507,-0.7742501413712032,-0.9312776492570882,0.048014608735324996,-0.3611322989462243))
push(move(10.784394525653063,33.0246278107965,36.85641108655509))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9312776492570882,0.048014608735324996,-0.3611322989462243,-0.9997792765083777,-0.019834870620479405,-0.00692648336846589))
push(move(10.489663230351237,33.02529064710589,36.80623964693972))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997792765083777,-0.019834870620479405,-0.00692648336846589,-0.9327666398908389,-0.0479799584521334,0.35727345142577477))
push(move(10.20263021562375,33.01308604343627,36.8523806161178))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9327666398908389,-0.0479799584521334,0.35727345142577477,-0.5630303057003471,-0.03698704599195771,0.8256081596567239))
push(move(10.005355145358578,33.00037864789599,36.991742015569656))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5630303057003471,-0.03698704599195771,0.8256081596567239,-0.016917240731242816,-0.0011964556009648327,0.9998561773875461))
push(move(9.955232484061067,32.99683378990218,37.215156089819246))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.016917240731242816,-0.0011964556009648327,0.9998561773875461,0.15986318808563865,0.011306182670903608,0.9870744304906839))
push(move(9.996997473856354,32.99978755960691,37.48570374448461))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15986318808563865,0.011306182670903608,0.9870744304906839,0.1670829250340356,0.011816872695554054,0.9858720290594352))
push(move(10.043238225142638,33.00305791815004,37.75854708432053))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub173 inherits .../COPOLYFF



DPDPoly_sub174 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7757829303242574,-0.05100382489081772,0.6289351754068264))
push(move(10.006540413133955,33.00046256016892,37.98884761422331))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7757829303242574,-0.05100382489081772,0.6289351754068264,-0.9142708472943174,-0.0489221514385614,0.4021385841800726))
push(move(9.823082779634985,32.98840114369775,38.137578598618866))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9142708472943174,-0.0489221514385614,0.4021385841800726,-0.9993411929369654,-0.02423195436639117,0.02701837313584966))
push(move(9.541469301694473,32.975576849976065,38.19340738866083))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993411929369654,-0.02423195436639117,0.02701837313584966,-0.9463993654732541,0.03846454904424081,-0.32070035780872624))
push(move(9.243754882205668,32.97435364193068,38.153241414693476))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9463993654732541,0.03846454904424081,-0.32070035780872624,-0.6599089065905259,0.14712177600737866,-0.736800799420665))
push(move(9.01200000182203,32.997096092903895,38.01398948104958))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6599089065905259,0.14712177600737866,-0.736800799420665,-0.189309206082803,0.18750712238648817,-0.9638480707801605))
push(move(8.909987580575429,33.048764576074205,37.78058389756402))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.189309206082803,0.18750712238648817,-0.9638480707801605,0.08654430653947288,0.09124173533130396,-0.9920610005132416))
push(move(8.910625070626676,33.097506009695024,37.4978495960438))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08654430653947288,0.09124173533130396,-0.9920610005132416,0.17625880304088165,-0.168861081579198,-0.9697519113043805))
push(move(8.958630676433584,33.10004790891784,37.222986058090974))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17625880304088165,-0.168861081579198,-0.9697519113043805,0.0699551039046857,-0.6849427481408259,-0.7252308013363593))
push(move(8.998713954770029,33.01311428573613,37.01319656147807))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0699551039046857,-0.6849427481408259,-0.7252308013363593,-0.0446395216629059,-0.8985154060975293,-0.43666620903282505))
push(move(8.988502233930102,32.80757022622024,36.91330495733981))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub174 inherits .../COPOLYFF



DPDPoly_sub175 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.05240147362732495,-0.9885838631796395,0.14126581689320442))
push(move(8.952646670299272,32.527651747058755,36.903904469914224))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05240147362732495,-0.9885838631796395,0.14126581689320442,0.07040839342298587,-0.9817527562069959,0.17664706002524122))
push(move(8.937469075506955,32.24131771377807,36.94482078730749))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07040839342298587,-0.9817527562069959,0.17664706002524122,0.516939952272758,-0.8334026817536451,0.19548159962019707))
push(move(8.989302164503012,32.01653892776094,36.99586914869852))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.516939952272758,-0.8334026817536451,0.19548159962019707,0.954294898369465,-0.2899449795555698,0.07247865738638289))
push(move(9.144334291163393,31.907812778182276,37.02304717140589))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.954294898369465,-0.2899449795555698,0.07247865738638289,0.9980096342315576,0.0611789560623542,-0.015293963387988994))
push(move(9.383817906190043,31.896672564802024,37.025832602683366))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9980096342315576,0.0611789560623542,-0.015293963387988994,0.9852579301910582,0.16596732531407174,-0.04149286593771258))
push(move(9.670495272959004,31.940066955379457,37.014984036025474))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9852579301910582,0.16596732531407174,-0.04149286593771258,0.9885950861886026,0.14610065490419077,-0.03652881328918167))
push(move(9.967094552197954,31.994925886992817,37.001268659642875))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9885950861886026,0.14610065490419077,-0.03652881328918167,0.9979400429129323,0.06223674454196757,-0.015564651610381373))
push(move(10.241813446444732,32.02449986473847,36.99387369956969))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9979400429129323,0.06223674454196757,-0.015564651610381373,0.9998508759807041,-0.016754349224475627,0.004185401137658299))
push(move(10.493771251777495,32.02777219217991,36.99305419886592))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998508759807041,-0.016754349224475627,0.004185401137658299,0.9987735947105322,-0.04803254947516117,0.012007526802711683))
push(move(10.732942222766367,32.01627009444937,36.99592957708956))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub175 inherits .../COPOLYFF



DPDPoly_sub176 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9994143242571722,-0.03319299033782978,0.008320688794358252))
push(move(10.96931242424903,32.001534444550074,36.999615842219136))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9994143242571722,-0.03319299033782978,0.008320688794358252,0.999821216564489,-0.018338854217581402,0.00460666185989087))
push(move(11.211471515281604,31.993491749769973,37.00163195344178))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999821216564489,-0.018338854217581402,0.00460666185989087,0.9999906911484715,0.004188779991126188,-0.0010352480806065667))
push(move(11.459765796826797,31.992538483320995,37.00187559907174))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999906911484715,0.004188779991126188,-0.0010352480806065667,0.9998975068095766,0.013885782914192773,-0.0034872494680881216))
push(move(11.711527326788026,31.99558639304638,37.001114266803654))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998975068095766,0.013885782914192773,-0.0034872494680881216,0.9999209079713333,0.01218778996693359,-0.00310412266296313))
push(move(11.964083685086175,31.999542049854988,37.00011673651272))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999209079713333,0.01218778996693359,-0.00310412266296313,0.9999871201889436,0.004904361529315843,-0.0013064050722077186))
push(move(12.215117143614037,32.001724525440686,36.99955093859361))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999871201889436,0.004904361529315843,-0.0013064050722077186,0.9999993948390279,-0.0010771980654061652,0.00022353054787557468))
push(move(12.464496934122046,32.001996288952455,36.999462985685796))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999993948390279,-0.0010771980654061652,0.00022353054787557468,0.9999924681852803,-0.003751268988523681,0.0009957678880895074))
push(move(12.712925041505983,32.00118828741162,36.9996622139331))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999924681852803,-0.003751268988523681,0.0009957678880895074,0.9999940738734917,-0.003283409138685605,0.0010351049828737785))
push(move(12.961105081243913,32.000133364179504,36.99995749585622))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999940738734917,-0.003283409138685605,0.0010351049828737785,0.9999969264464499,-0.002317656884744397,0.0008806612391715608))
push(move(13.20965612087991,31.999557306380737,37.000176385795555))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub176 inherits .../COPOLYFF



DPDPoly_sub177 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9999996077191051,0.0008692090861247001,-0.0001704030527751531))
push(move(13.458652577314002,31.999496253914728,37.00026678479443))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999996077191051,0.0008692090861247001,-0.0001704030527751531,0.9999994507974928,0.0009487289855640242,-0.0004453291195262357))
push(move(13.707952950262879,31.999712948149075,37.00022430323315))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999994507974928,0.0009487289855640242,-0.0004453291195262357,0.9999992919916639,0.0006990285906679774,-0.0009630032191480821))
push(move(13.957415197892933,31.999969444729665,37.000044671153766))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999992919916639,0.0006990285906679774,-0.0009630032191480821,0.999999340858929,8.967790637590206e-05,-0.0011446569707027898))
push(move(14.2068979051854,32.00006172518467,36.9997438172952))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999999340858929,8.967790637590206e-05,-0.0011446569707027898,0.9999997897746441,-0.00023326182084179594,-0.0006050120581939615))
push(move(14.456263877217388,32.00001418046431,36.999473660159275))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999997897746441,-0.00023326182084179594,-0.0006050120581939615,0.9999996992221228,-7.977666820258378e-05,0.0007714864529948984))
push(move(14.705377660381046,31.999945448864878,36.99944223096914))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999996992221228,-7.977666820258378e-05,0.0007714864529948984,0.999995955838104,0.000487914899098505,0.002801829132576128))
push(move(14.95410380653319,31.999974464441507,36.999857737036024))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999995955838104,0.000487914899098505,0.002801829132576128,0.9999916714914078,0.0009492688942752905,0.003969362214094076))
push(move(15.202380857445185,32.00018794511032,37.000834754637246))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999916714914078,0.0009492688942752905,0.003969362214094076,0.999996985092323,0.00064912786047631,0.00236821436636022))
push(move(15.450668165116735,32.000445841466984,37.00182879725384))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999996985092323,0.00064912786047631,0.00236821436636022,0.9999996941547381,0.00026064289968658034,0.0007373979313112797))
push(move(15.699648703044303,32.0005107364962,37.0020123950436))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub177 inherits .../COPOLYFF



DPDPoly_sub178 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9998919054506538,-0.0037386787656925337,-0.014219693925956437))
push(move(15.950006305634904,32.000144838331515,37.000556988719595))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998919054506538,-0.0037386787656925337,-0.014219693925956437,0.9998876524501605,-0.003832344971112306,-0.014491225266672556))
push(move(16.202143328268296,31.9992020770916,36.99697128983584))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998876524501605,-0.003832344971112306,-0.014491225266672556,0.9999572259911026,-0.0023857005331601264,-0.008936141289454982))
push(move(16.45438984932337,31.99821164940531,36.993247031911466))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999572259911026,-0.0023857005331601264,-0.008936141289454982,0.999954814099101,0.0024286746465670118,0.009190826921079814))
push(move(16.704150278964086,31.998004387611694,36.99248509290351))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999954814099101,0.0024286746465670118,0.009190826921079814,0.9992065733082651,0.010237070097759593,0.03848930050504855))
push(move(16.94882472770628,31.999412525121468,36.99779150264843))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992065733082651,0.010237070097759593,0.03848930050504855,0.99824459905189,0.015242170193104235,0.05723108169111963))
push(move(17.18681440029107,32.00294937754239,37.01107724882503))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.99824459905189,0.015242170193104235,0.05723108169111963,0.9993357765329094,0.009384439056427208,0.03521275400992243))
push(move(17.424232324517817,32.00667151105395,37.025047438754214))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9993357765329094,0.009384439056427208,0.03521275400992243,0.9994564034284988,-0.008484025557692478,-0.031857792706121844))
push(move(17.67077442988085,32.00749408965026,37.02813014122893))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9994564034284988,-0.008484025557692478,-0.031857792706121844,0.9919277438463983,-0.032646571975068164,-0.12252980178744535))
push(move(17.936156439910494,32.00232597155499,37.00872979619022))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9919277438463983,-0.032646571975068164,-0.12252980178744535,0.9849426016138302,-0.044512201563118144,-0.16705309167502497))
push(move(18.2265532906337,31.989202157911933,36.95947647762473))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub178 inherits .../COPOLYFF



DPDPoly_sub179 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9987840204968392,-0.01269525783746831,-0.0476372840179809))
push(move(18.51958616239128,31.975239135206643,36.90707678121095))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987840204968392,-0.01269525783746831,-0.0476372840179809,0.9910254321244825,0.03441800227586244,0.1291665359209637))
push(move(18.779081577335273,31.9719407632536,36.89470007460635))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9910254321244825,0.03441800227586244,0.1291665359209637,0.7201353131097323,0.17430827125983206,0.6715815344265778))
push(move(18.968776530828976,31.990839375747434,36.96562256821036))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7201353131097323,0.17430827125983206,0.6715815344265778,0.19934068281459946,0.2087815313864184,0.9574307099351634))
push(move(19.058153568482126,32.03948995220225,37.154956157897914))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19934068281459946,0.2087815313864184,0.9574307099351634,-0.04537301208700035,0.11531674122112241,0.9922919625635862))
push(move(19.065223326029084,32.09185392689111,37.4288552726217))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04537301208700035,0.11531674122112241,0.9922919625635862,-0.11809374293357679,-0.10468559381652466,0.9874688827133844))
push(move(19.032369698135717,32.10502035822235,37.71884041710171))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11809374293357679,-0.10468559381652466,0.9874688827133844,-0.04735512016720622,-0.5772687672415834,0.8151798960728437))
push(move(19.00216040251704,32.03595105319375,37.95617088710016))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04735512016720622,-0.5772687672415834,0.8151798960728437,0.09026439256934907,-0.9505233177901156,0.29725033519132876))
push(move(19.01138801339755,31.849249255948994,38.08002306269316))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09026439256934907,-0.9505233177901156,0.29725033519132876,0.09345698815377228,-0.9950461036593521,-0.033897536157775555))
push(move(19.045729194290107,31.577152723869958,38.09964759579762))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09345698815377228,-0.9950461036593521,-0.033897536157775555,0.06293632017612646,-0.9892128041705224,-0.13227640631563775))
push(move(19.064176316891853,31.287206793973148,38.06087635722196))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub179 inherits .../COPOLYFF



DPDPoly_sub180 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7107440043937746,-0.6938169452488709,-0.11602157861288999))
push(move(19.025490092280467,31.047263327271768,38.00985879891509))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7107440043937746,-0.6938169452488709,-0.11602157861288999,-0.9156171523604419,-0.40039817162915464,-0.03642162076823327))
push(move(18.893042994071436,30.917970585414807,37.98823818541443))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9156171523604419,-0.40039817162915464,-0.03642162076823327,-0.9987629869156106,0.02461008021293791,0.043206942952731656))
push(move(18.673007412265648,30.893123116764528,37.99583766522862))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9987629869156106,0.02461008021293791,0.043206942952731656,-0.9873217566425543,0.15760646189120908,0.01886669102931311))
push(move(18.394774128430097,30.930248209747795,38.009793524103316))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9873217566425543,0.15760646189120908,0.01886669102931311,-0.9867447626810187,0.14818955299566308,-0.06614098354670657))
push(move(18.087964003238067,30.986513767916755,38.00701723578158))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9867447626810187,0.14818955299566308,-0.06614098354670657,-0.9861271581978814,0.0728377108921765,-0.14915728522790395))
push(move(17.78133238210373,31.022375030801285,37.96867484581371))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9861271581978814,0.0728377108921765,-0.14915728522790395,-0.9916608354786184,-0.0029450116744553965,-0.12884143077475477))
push(move(17.49520703915377,31.030296215261778,37.91735940734866))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9916608354786184,-0.0029450116744553965,-0.12884143077475477,-0.9939205531014133,-0.05707599156051801,0.09415022734951041))
push(move(17.24516572249581,31.02078273531526,37.8990134484023))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9939205531014133,-0.05707599156051801,0.09415022734951041,-0.806741333428733,-0.07106278908656855,0.5866161444631983))
push(move(17.046732855660764,31.004542538438933,37.95984162205335))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.806741333428733,-0.07106278908656855,0.5866161444631983,-0.5917533407756765,-0.05767395813559843,0.804053293155248))
push(move(16.91459539951346,30.99166404737035,38.139385275537634))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub180 inherits .../COPOLYFF



DPDPoly_sub181 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.04737226231355133,0.004807842834540435,0.9988657334249557))
push(move(16.854879147634144,30.9859024414108,38.40906847958361))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04737226231355133,0.004807842834540435,0.9988657334249557,0.18748894942715277,0.01828500315066055,0.9820965087518043))
push(move(16.868697443338426,30.98730486955636,38.700433540048394))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18748894942715277,0.01828500315066055,0.9820965087518043,0.5528041155683299,0.05216583546055835,0.8316768215006467))
push(move(16.957100309130922,30.995871638346106,38.94451894817534))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5528041155683299,0.05216583546055835,0.8316768215006467,0.9211152281836767,0.07127930752918475,0.3827087622805269))
push(move(17.120006476299796,31.011019862433606,39.078520265276254))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9211152281836767,0.07127930752918475,0.3827087622805269,0.9991133767386575,0.03819248000024963,-0.017714256781127584))
push(move(17.345184295778125,31.02590301442695,39.10576168702737))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9991133767386575,0.03819248000024963,-0.017714256781127584,0.9866754602476713,-0.02420676317382764,-0.16088992747121297))
push(move(17.613013650807638,31.02986573827788,39.069779259613135))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9866754602476713,-0.02420676317382764,-0.16088992747121297,0.9829128291050255,-0.10910481136704453,-0.14825151101191675))
push(move(17.9037700278392,31.01219886035294,39.014677210379695))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9829128291050255,-0.10910481136704453,-0.14825151101191675,0.9828986644969546,-0.17284574262902064,-0.0635182224650958))
push(move(18.19797482471873,30.96493416281485,38.98155029835867))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9828986644969546,-0.17284574262902064,-0.0635182224650958,0.9909858874315962,-0.13339560579380746,0.012352459929705377))
push(move(18.478926409574754,30.911055847833147,38.97750866765307))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9909858874315962,-0.13339560579380746,0.012352459929705377,0.9965969252358278,-0.07082731047821744,0.04216705705780188))
push(move(18.731676675107007,30.89309309772124,38.98820279543753))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub181 inherits .../COPOLYFF



DPDPoly_sub182 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.6505004080180181,0.7594310908331389,-0.010660086509064323))
push(move(18.941305075706854,30.953882300473854,38.99894585838542))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6505004080180181,0.7594310908331389,-0.010660086509064323,0.4614105782033195,0.8867005355452785,-0.029367304707699632))
push(move(19.09296596907399,31.130939833823383,38.99646051291383))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4614105782033195,0.8867005355452785,-0.029367304707699632,0.13154384085270338,0.9906889879422597,-0.03509340541554343))
push(move(19.172703778785078,31.398565113648395,38.98421807245401))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.13154384085270338,0.9906889879422597,-0.03509340541554343,-0.20003796038797197,0.9797576386439709,0.0077320063767534145))
push(move(19.167146471013325,31.689611421295265,38.976670559909486))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.20003796038797197,0.9797576386439709,0.0077320063767534145,-0.630682046077138,0.7682976994187435,0.10935630674003714))
push(move(19.062932164441882,31.93621095571974,38.98846104124075))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.630682046077138,0.7682976994187435,0.10935630674003714,-0.9300480318507093,0.3198823771481181,0.18079248668208253))
push(move(18.850381196471623,32.07549529606212,39.03159566954728))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9300480318507093,0.3198823771481181,0.18079248668208253,-0.9917915334747528,-0.003464013810379611,0.12781844442849322))
push(move(18.565896222610597,32.10716238312577,39.08508009833959))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9917915334747528,-0.003464013810379611,0.12781844442849322,-0.9827264533594918,-0.17156138009982033,-0.06939316051110123))
push(move(18.277244029289076,32.07349350940096,39.105459479310575))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9827264533594918,-0.17156138009982033,-0.06939316051110123,-0.7930522564248329,-0.22945214845192463,-0.5642870104390822))
push(move(18.052792687383324,32.01758633646827,39.048848371945006))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7930522564248329,-0.22945214845192463,-0.5642870104390822,-0.4845597143518408,-0.18489989916637803,-0.8549935148967656))
push(move(17.954881199989227,31.980224947128228,38.876085997615505))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub182 inherits .../COPOLYFF



DPDPoly_sub183 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.16034012242548526,0.030302154638600677,-0.9865965865361783))
push(move(17.966309868586045,31.971671449813876,38.61034185591416))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16034012242548526,0.030302154638600677,-0.9865965865361783,0.10316108128543465,0.04348457759419135,-0.9937136825159824))
push(move(18.01368759337671,31.980625210864538,38.31881967887427))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.10316108128543465,0.04348457759419135,-0.9937136825159824,-0.22559483143011802,0.05957252413435261,-0.9723981110637138))
push(move(18.022441126775508,31.99533196230352,38.06964958529541))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22559483143011802,0.05957252413435261,-0.9723981110637138,-0.86937866800659,0.029841855940833727,-0.49324455926963245))
push(move(17.922687703724637,32.004655429501,37.92657611441082))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.86937866800659,0.029841855940833727,-0.49324455926963245,-0.9999894964260561,-0.0026817943558402066,-0.003716855740540549))
push(move(17.709838973415383,32.006062186969324,37.89229382878209))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999894964260561,-0.0026817943558402066,-0.003716855740540549,-0.988917024209239,-0.009532333901716667,0.14816293004503475))
push(move(17.427181602199614,32.00332657007687,37.924734370368))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.988917024209239,-0.009532333901716667,0.14816293004503475,-0.9877401122616635,-0.004136480071047356,0.15605242760667987))
push(move(17.11910335494183,32.000367989149815,37.980799859088314))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9877401122616635,-0.004136480071047356,0.15605242760667987,-0.996194798794886,0.0066595388005763504,0.08689978939548819))
push(move(16.827982769609157,32.00081723184221,38.01940141009237))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.996194798794886,0.0066595388005763504,0.08689978939548819,-0.9999390291294268,0.010824771786814999,0.002182278502563398))
push(move(16.566654161753057,32.004061099013306,38.02899095444224))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999390291294268,0.010824771786814999,0.002182278502563398,-0.999339210844306,0.009099257160726057,-0.03519012913023325))
push(move(16.32547158178807,32.00625713244617,38.020498096320765))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub183 inherits .../COPOLYFF



DPDPoly_sub184 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9977847698013145,-0.048021060291572555,-0.046038363578771196))
push(move(16.0942257951436,32.0034819588128,38.00541565994831))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977847698013145,-0.048021060291572555,-0.046038363578771196,-0.9980922220334497,-0.054545770059816534,-0.028925339840920498))
push(move(15.8629359025793,31.99235051422493,37.994743811180676))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9980922220334497,-0.054545770059816534,-0.028925339840920498,-0.9990842854290055,-0.04275358401613042,-0.0016497462196267184))
push(move(15.625171483483072,31.977848126522957,37.9918221712214))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9990842854290055,-0.04275358401613042,-0.0016497462196267184,-0.9998142957696509,0.014601606198784135,0.012576449063728259))
push(move(15.377305429351324,31.97156904108923,37.99394190983058))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998142957696509,0.014601606198784135,0.012576449063728259,-0.9942667238595735,0.10591632891929466,0.014676957920843768))
push(move(15.11578691360256,31.98528734090967,37.99822961020688))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9942667238595735,0.10591632891929466,0.014676957920843768,-0.9847853620016831,0.17350941343873924,0.009605947915667325))
push(move(14.837957173384178,32.02902423486189,38.001903547756854))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9847853620016831,0.17350941343873924,0.009605947915667325,-0.989749015151566,0.14278600348075765,0.0030073603872178187))
push(move(14.555843237807576,32.083943862924215,38.003691500678585))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.989749015151566,0.14278600348075765,0.0030073603872178187,-0.9983895381443437,-0.056547868402513586,-0.004546284533096087))
push(move(14.293503163019338,32.10756981664978,38.003557875670666))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9983895381443437,-0.056547868402513586,-0.004546284533096087,-0.8625910012207818,-0.5057105544529151,-0.013914011925188978))
push(move(14.075349489916457,32.056729137422906,38.00150351571798))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8625910012207818,-0.5057105544529151,-0.013914011925188978,-0.6729418275666182,-0.7394904583488142,-0.01741145376930335))
push(move(13.925032155458632,31.891546606032428,37.9976142593032))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub184 inherits .../COPOLYFF



DPDPoly_sub185 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.017353467912966068,-0.9998345719701259,-0.00544847177737585))
push(move(13.852892249135099,31.629698647799536,37.993459273357395))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.017353467912966068,-0.9998345719701259,-0.00544847177737585,0.155671319150399,-0.9878004944093418,0.0040772096628088755))
push(move(13.857958921668224,31.33777807095131,37.99186848917291))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.155671319150399,-0.9878004944093418,0.0040772096628088755,0.5035307982427015,-0.8633358294095416,0.033286346732658796))
push(move(13.938901413352276,31.083934049663256,37.99571195161149))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5035307982427015,-0.8633358294095416,0.033286346732658796,0.8892205394857821,-0.45306929948809876,0.06336435920908719))
push(move(14.093901367656203,30.933239623629234,38.00746567229163))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8892205394857821,-0.45306929948809876,0.06336435920908719,0.9987920529385779,-0.020454708852001097,0.044677062039945155))
push(move(14.312107434013265,30.89378078302437,38.02230598458989))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9987920529385779,-0.020454708852001097,0.044677062039945155,0.988383958681293,0.1515529984336862,-0.0113507218825704))
push(move(14.574703083845593,30.923393070393992,38.02897245945509))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.988383958681293,0.1515529984336862,-0.0113507218825704,0.9832553187595002,0.15603911892883882,-0.09413167105212485))
push(move(14.862598815079098,30.978189902253437,38.015984074455325))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9832553187595002,0.15603911892883882,-0.09413167105212485,0.9830333397203508,0.07625161245232712,-0.16682669030066352))
push(move(15.156806965249878,31.015770884219577,37.97324490829204))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9830333397203508,0.07625161245232712,-0.16682669030066352,0.9889654336469399,-0.004089136997506167,-0.1480900064492388))
push(move(15.440345483300845,31.023004369129403,37.917936978189914))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9889654336469399,-0.004089136997506167,-0.1480900064492388,0.9943841931853152,-0.03654439462016891,-0.0993206099711188))
push(move(15.698066992756319,31.01353290265981,37.892195360717295))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub185 inherits .../COPOLYFF



DPDPoly_sub186 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.7091707469738595,0.0014036691389437905,0.7050353759560483))
push(move(15.914891684317823,31.00198506727276,37.93907410074006))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7091707469738595,0.0014036691389437905,0.7050353759560483,0.5148507408034297,0.024680171780019026,0.8569245029844044))
push(move(16.075780074320782,31.002303515359944,38.099024305985736))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5148507408034297,0.024680171780019026,0.8569245029844044,0.17503833762460055,0.037200655104402916,0.9838585729775492))
push(move(16.166538237639333,31.014048136569567,38.357918011299965))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17503833762460055,0.037200655104402916,0.9838585729775492,-0.14847354618573705,0.0015741608052292986,0.9889151268439528))
push(move(16.173774649642727,31.023130166527487,38.64983394200138))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.14847354618573705,0.0015741608052292986,0.9889151268439528,-0.5687963743859922,-0.09304130262857382,0.8171988745039536))
push(move(16.084129472298393,31.01492185887054,38.906805518359576))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5687963743859922,-0.09304130262857382,0.8171988745039536,-0.9070534078588196,-0.17786521167739305,0.38159937338347133))
push(move(15.886011081760742,30.976059020489174,39.06326847566952))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9070534078588196,-0.17786521167739305,0.38159937338347133,-0.9893427172780943,-0.14262626164338751,0.02930421912334479))
push(move(15.607369068999958,30.9214333285179,39.107379673725134))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9893427172780943,-0.14262626164338751,0.02930421912334479,-0.9876951958612773,0.02883278574031368,-0.15371034623279667))
push(move(15.315077698970585,30.89375175465231,39.08017945774067))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9876951958612773,0.02883278574031368,-0.15371034623279667,-0.8485898300620376,0.47608333712295287,-0.23073785218111686))
push(move(15.077656133101653,30.93689670188311,39.02494294717012))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8485898300620376,0.47608333712295287,-0.23073785218111686,-0.5875716065522224,0.7823483820764301,-0.2066170763417983))
push(move(14.960771778163059,31.092527581518084,38.98384105691844))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub186 inherits .../COPOLYFF



DPDPoly_sub187 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.15958225651762864,0.9868506348821875,0.025677379877339992))
push(move(14.961960019016729,31.349193724875654,38.97266386008455))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15958225651762864,0.9868506348821875,0.025677379877339992,0.11754088511010877,0.9923061200796321,0.03889350048579663))
push(move(15.009181533898373,31.64120978579594,38.9802619778356))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11754088511010877,0.9923061200796321,0.03889350048579663,-0.15508281203960209,0.9864967975933441,0.05266298271050026))
push(move(15.027256669727178,31.900442475980288,38.99427008938722))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15508281203960209,0.9864967975933441,0.05266298271050026,-0.8097444503306347,0.5863719077133424,0.021952471463449346))
push(move(14.943222379048652,32.060782362379065,39.002660371221474))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8097444503306347,0.5863719077133424,0.021952471463449346,-0.9989593536241962,0.04462763145306716,-0.009411924225013692))
push(move(14.740801955128696,32.10787705290639,39.00203598262085))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9989593536241962,0.04462763145306716,-0.009411924225013692,-0.9904184848644018,-0.13784991294435758,-0.008284101649295607))
push(move(14.46376782893444,32.082201573164134,38.998143080424164))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9904184848644018,-0.13784991294435758,-0.008284101649295607,-0.9864935913957841,-0.16340275890731568,0.011398794520707923))
push(move(14.158782296758101,32.026869518753514,38.99716782831486))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9864935913957841,-0.16340275890731568,0.011398794520707923,-0.9939371200044146,-0.10237643290562386,0.040100716487991066))
push(move(13.871420402663663,31.984085169237634,39.00498757151445))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9939371200044146,-0.10237643290562386,0.040100716487991066,-0.998887450837853,-0.012778523993570963,0.04539350045107275))
push(move(13.617433683938753,31.97111011624865,39.01900871422899))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.998887450837853,-0.012778523993570963,0.04539350045107275,-0.9989928005195631,0.028106886070716066,0.034976956206742016))
push(move(13.379800098637496,31.977795990366225,39.02732879371506))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub187 inherits .../COPOLYFF



DPDPoly_sub188 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.987799584682765,0.04391205684608141,-0.14941121699559146))
push(move(13.139818691973524,31.992590274785105,39.01756847602323))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.987799584682765,0.04391205684608141,-0.14941121699559146,-0.984393045476793,0.027708128883460068,-0.17378892833176252))
push(move(12.879498977344678,32.0041626365113,38.97819339835185))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.984393045476793,0.027708128883460068,-0.17378892833176252,-0.9879056936743836,0.0033149913457433326,-0.15502048651101777))
push(move(12.601799566662987,32.00773412747115,38.92258429502018))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9879056936743836,0.0033149913457433326,-0.15502048651101777,-0.9997806002621061,-0.011410609467143201,0.017565572325746955))
push(move(12.333561656717428,32.005994569968905,38.89252583960605))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997806002621061,-0.011410609467143201,0.017565572325746955,-0.9029332353005051,-0.016147556116116017,0.42947739058213524))
push(move(12.102926770361904,32.00204043562428,38.931349204223736))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9029332353005051,-0.016147556116116017,0.42947739058213524,-0.5279798431601251,-0.008657531703241917,0.8492127721374763))
push(move(11.937633259896181,31.998914006583167,39.080847952555594))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5279798431601251,-0.008657531703241917,0.8492127721374763,-0.16292312545921947,-0.000947997997546961,0.9866383108770893))
push(move(11.852610085517073,31.997935876211702,39.333963297551676))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16292312545921947,-0.000947997997546961,0.9866383108770893,0.12351619647638641,0.002699551459460496,0.9923388844693755))
push(move(11.847636132285956,31.998390341839325,39.62585722437544))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12351619647638641,0.002699551459460496,0.9923388844693755,0.46548025784955865,0.0038938581713549823,0.8850496977124221))
push(move(11.921614840875245,31.999444033792255,39.888352955820515))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.46548025784955865,0.0038938581713549823,0.8850496977124221,0.6735218949468211,0.003701666127425016,0.7391580038767924))
push(move(12.073166477486618,32.00027695929031,40.05467361449898))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub188 inherits .../COPOLYFF



DPDPoly_sub189 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9960658165919939,-0.0004870772021712298,-0.08861518928899005))
push(move(12.291192350998605,32.00052823988504,40.106088909144404))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9960658165919939,-0.0004870772021712298,-0.08861518928899005,0.9899894339534608,-0.0007258447478617655,-0.1411396252294452))
push(move(12.552667597583438,32.00040037822227,40.08282671292751))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9899894339534608,-0.0007258447478617655,-0.1411396252294452,0.9855919191718056,-0.0007923993147186289,-0.1691388215832277))
push(move(12.833836931697762,32.00013038137732,40.02872580795774))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9855919191718056,-0.0007923993147186289,-0.1691388215832277,0.9953005128162453,-0.00033578686688082724,-0.09683375669103733))
push(move(13.11125104480285,31.999951286532106,39.9869674184459))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9953005128162453,-0.00033578686688082724,-0.09683375669103733,0.9999861959009946,0.00013412899746771692,-0.005252620000531694))
push(move(13.372836261490715,31.999948537910072,39.976286037972976))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999861959009946,0.00013412899746771692,-0.005252620000531694,0.999131163832694,0.0002084631802506124,0.04167582034500126))
push(move(13.621002703516128,32.00001965995488,39.984289849726615))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999131163832694,0.0002084631802506124,0.04167582034500126,0.9995095629945616,-0.00019447935660012753,0.0313144640733347))
push(move(13.859099495079542,32.00004999403894,39.996569079776705))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9995095629945616,-0.00019447935660012753,0.0313144640733347,0.9998672037930266,-0.0007968868660627822,-0.016276969940287756))
push(move(14.090546984349983,31.9999282984782,39.99900059193198))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9998672037930266,-0.0007968868660627822,-0.016276969940287756,0.9991415132992622,-0.0008680559294606539,-0.041418388198524336))
push(move(14.321642437979923,31.999681350688313,39.989039282270475))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9991415132992622,-0.0008680559294606539,-0.041418388198524336,0.9992059086857342,-0.0006765545595316864,-0.0398383523936963))
push(move(14.562484102086088,31.999518278668262,39.97943692203387))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub189 inherits .../COPOLYFF



DPDPoly_sub190 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9939946813459756,0.0022568782265057563,0.10940511851181017))
push(move(14.823430765410691,31.99966070985306,39.9839938248332))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9939946813459756,0.0022568782265057563,0.10940511851181017,0.9905694575929663,0.002731525162504853,0.13698426352783324))
push(move(15.114338831239305,32.00032122050971,40.01601294124831))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9905694575929663,0.002731525162504853,0.13698426352783324,0.9905442509346262,0.002650937274137119,0.13716799725857662))
push(move(15.422946215074445,32.001313891791504,40.06689985602187))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9905442509346262,0.002650937274137119,0.13716799725857662,0.9999939469627597,2.6283784699883887e-05,0.0034792739191038496))
push(move(15.70666410560973,32.00190642697248,40.09803660807023))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999939469627597,2.6283784699883887e-05,0.0034792739191038496,0.8920627655411885,-0.008713698759217963,-0.45182750446264375))
push(move(15.92070822367656,32.00132697494016,40.06863171687934))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8920627655411885,-0.008713698759217963,-0.45182750446264375,0.24405112250004105,-0.016644276901682936,-0.9696195221079711))
push(move(16.021276988746692,31.998833277867597,39.93868598908847))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.24405112250004105,-0.016644276901682936,-0.9696195221079711,-0.11171735117360053,-0.01152912358619209,-0.9936731418107712))
push(move(16.01189263527422,31.99510820167577,39.70635440099851))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11171735117360053,-0.01152912358619209,-0.9936731418107712,-0.10696957238034493,-0.0002599743261870344,-0.9942622606727642))
push(move(15.963421310911974,31.992862627356175,39.42408702517031))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10696957238034493,-0.0002599743261870344,-0.9942622606727642,0.17875938060482527,0.022784698866840498,-0.9836289652828075))
push(move(15.951872766291673,31.99496233192375,39.148480892748104))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.17875938060482527,0.022784698866840498,-0.9836289652828075,0.4260963492724351,0.03913718210485363,-0.9038308371114556))
push(move(16.05217388305577,32.004175044210115,38.93572327939868))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub190 inherits .../COPOLYFF



DPDPoly_sub191 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9981744790795991,0.029118193915786645,-0.05291351526078767))
push(move(16.28199347838976,32.01808407160907,38.82033512279591))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9981744790795991,0.029118193915786645,-0.05291351526078767,0.9928808412133342,0.0017157511968784252,0.11909950188532246))
push(move(16.57442276410015,32.02661465701917,38.804833362536115))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9928808412133342,0.0017157511968784252,0.11909950188532246,0.8699426455722785,-0.07547733939270405,0.4873427589006566))
push(move(16.855744171430945,32.01907554349314,38.88915850915923))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8699426455722785,-0.07547733939270405,0.4873427589006566,0.5212954908209003,-0.16155955620088353,0.837943626415268))
push(move(17.052925049460903,31.98509918519332,39.07289083169786))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5212954908209003,-0.16155955620088353,0.837943626415268,0.12665771533376888,-0.15088104192485532,0.980404372865656))
push(move(17.132864124713866,31.933190709545514,39.334608168123765))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12665771533376888,-0.15088104192485532,0.980404372865656,-0.13595429253103464,-0.009861013957834666,0.9906660339115847))
push(move(17.123693750000893,31.900795949144857,39.620681728514455))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13595429253103464,-0.009861013957834666,0.9906660339115847,-0.32250188761091025,0.3234149909297562,0.8896039996140449))
push(move(17.058737295111488,31.92781415476559,39.87475243956605))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.32250188761091025,0.3234149909297562,0.8896039996140449,-0.36414314760969657,0.7876188943498391,0.49704752822244247))
push(move(16.971317393757626,32.05360373032529,40.04100365892178))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.36414314760969657,0.7876188943498391,0.49704752822244247,-0.20871215347147035,0.9747300732677204,0.07962739014187106))
push(move(16.89470914595924,32.28259680089138,40.09864731890184))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.20871215347147035,0.9747300732677204,0.07962739014187106,-0.11504020043777877,0.9917587054067746,-0.05639523502136044))
push(move(16.862111969110202,32.56361625138515,40.082667466272596))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub191 inherits .../COPOLYFF



DPDPoly_sub192 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.57243757980444,0.8038725242169174,-0.1615678867744362))
push(move(16.90671853010948,32.840524912957946,40.03302272910695))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.57243757980444,0.8038725242169174,-0.1615678867744362,0.7700564066279464,0.6283243066918546,-0.11055178077016763))
push(move(17.061196511448113,33.057457918713865,39.989422025941046))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7700564066279464,0.6283243066918546,-0.11055178077016763,0.9690395036619059,0.24605888607013798,-0.0204319585113583))
push(move(17.32047282688564,33.1781260022094,39.973622828117605))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9690395036619059,0.24605888607013798,-0.0204319585113583,0.9937556050514653,-0.10721330130564304,0.030904780405971922))
push(move(17.61707341341253,33.19860639694681,39.97770149880522))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9937556050514653,-0.10721330130564304,0.030904780405971922,0.8421993788876753,-0.5367405657928725,0.05108592011074121))
push(move(17.877672810944475,33.118011372943684,39.99095117631712))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8421993788876753,-0.5367405657928725,0.05108592011074121,0.36222592177010154,-0.9314836388598077,0.033624576343674606))
push(move(18.029579536388695,32.935712864382495,40.00272319244667))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.36222592177010154,-0.9314836388598077,0.033624576343674606,-0.03857782926649375,-0.9992378881410761,0.005949285036688882))
push(move(18.051121274231214,32.671979225527366,40.00705198728884))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03857782926649375,-0.9992378881410761,0.005949285036688882,-0.13776348673426855,-0.9904301053037957,-0.008332360453619559))
push(move(18.008239406487515,32.38296361071643,40.00601416339854))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13776348673426855,-0.9904301053037957,-0.008332360453619559,0.04526558334297526,-0.9988446299570134,-0.016137910975627404))
push(move(17.975505951993302,32.128354108727486,40.002478539449804))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04526558334297526,-0.9988446299570134,-0.016137910975627404,0.30508262024788535,-0.9521402424002868,-0.018803021688213958))
push(move(18.02707080555257,31.967424023207165,39.999300465723294))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub192 inherits .../COPOLYFF



DPDPoly_sub193 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9956137542896795,0.0935533806690735,0.0010085804861556138))
push(move(18.198822245598834,31.921850244471116,39.998114507935384))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9956137542896795,0.0935533806690735,0.0010085804861556138,0.9932193765481168,0.11623602111782079,0.002111265986947582))
push(move(18.45839319171497,31.946240967708924,39.99837745949657))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9932193765481168,0.11623602111782079,0.002111265986947582,0.9968475400349045,0.0792888428424685,0.002874252435278875))
push(move(18.766358183244634,31.988268722393475,39.99932090739739))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9968475400349045,0.0792888428424685,0.002874252435278875,0.9983444352522721,-0.05748627736221443,0.0019278267184380442))
push(move(19.083386326210714,31.995952664260756,40.000179528485766))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9983444352522721,-0.05748627736221443,0.0019278267184380442,0.9881728507570501,-0.1533434256932722,0.0004591550248774948))
push(move(19.379867295339743,31.952941881538962,40.000505608004254))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9881728507570501,-0.1533434256932722,0.0004591550248774948,0.9978220268895933,-0.06596043274013681,-0.0006511272361925081))
push(move(19.644207719496645,31.90892510265283,40.00044011443547))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9978220268895933,-0.06596043274013681,-0.0006511272361925081,0.9452017589291476,0.32648471246030286,-0.00116937887752185))
push(move(19.86676884517048,31.9207555436318,40.000187881143255))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9452017589291476,0.32648471246030286,-0.00116937887752185,0.5997288961328722,0.8002029444476175,-0.0007062864927722801))
push(move(20.037898018533486,32.044910740497045,39.9999530511015))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5997288961328722,0.8002029444476175,-0.0007062864927722801,0.24627589325175606,0.9691997543198406,-0.00014362941895237487))
push(move(20.14630982014014,32.29373992491951,39.99985867236897))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.24627589325175606,0.9691997543198406,-0.00014362941895237487,0.10336096417077982,0.9946439107848819,4.271115305904059e-05))
push(move(20.177573866281165,32.59459425005224,39.99987159139958))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub193 inherits .../COPOLYFF



DPDPoly_sub194 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7260967950268444,0.6875924218279474,0.00032511001613827153))
push(move(20.116902054356185,32.8651568996058,39.99994088774744))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7260967950268444,0.6875924218279474,0.00032511001613827153,-0.9264656953755018,0.37637912879060365,0.00025826965388924005))
push(move(19.94969634589436,33.02349581366267,40.00001575414397))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9264656953755018,0.37637912879060365,0.00025826965388924005,-0.9980302755898921,-0.06273403592816228,9.870221802541305e-05))
push(move(19.687090447281683,33.03976899698003,40.000060705778))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9980302755898921,-0.06273403592816228,9.870221802541305e-05,-0.9888755137253614,-0.14874547925574802,-2.7484184736011258e-05))
push(move(19.391735401754726,32.988423589129724,40.00007093481745))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9888755137253614,-0.14874547925574802,-2.7484184736011258e-05,-0.994980204220063,0.10007171569741208,-0.00021196126571702684))
push(move(19.132422373226227,32.956336484638385,40.000045289682035))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.994980204220063,0.10007171569741208,-0.00021196126571702684,-0.525812325087832,0.8506005026626459,-0.0004285507933365068))
push(move(18.977670216825096,33.03006885331762,39.99998272624776))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.525812325087832,0.8506005026626459,-0.0004285507933365068,0.03404629763050854,0.9994202204556927,-0.00026937325364151285))
push(move(18.95309265440786,33.24643609183906,39.99989913127227))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03404629763050854,0.9994202204556927,-0.00026937325364151285,0.12882986192085788,0.9916667108185101,-3.6494522208173174e-05))
push(move(18.99499758257435,33.538709172596185,39.999845632665966))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.12882986192085788,0.9916667108185101,-3.6494522208173174e-05,-0.03220590733538379,0.9994811691328065,0.0004148272205340464))
push(move(19.02854560287653,33.827234488374245,39.99987775719593))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03220590733538379,0.9994811691328065,0.0004148272205340464,-0.23419701938116394,0.9721888120754284,0.0008184059788239172))
push(move(18.979084572252646,34.032555037428715,40.00005059971668))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub194 inherits .../COPOLYFF



DPDPoly_sub195 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9990726031600832,-0.04305005994733733,0.0007911722097307614))
push(move(18.806679828180698,34.11166482065636,40.00033917771953))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9990726031600832,-0.04305005994733733,0.0007911722097307614,-0.9930880952735913,-0.11737119922592126,0.00019135866698217653))
push(move(18.54654217017003,34.10045548338047,40.00054518245339))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9930880952735913,-0.11737119922592126,0.00019135866698217653,-0.9841736865107308,-0.1772026599632581,-0.0011713589644044146))
push(move(18.24370087349795,34.04512740533082,40.000447658430176))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9841736865107308,-0.1772026599632581,-0.0011713589644044146,-0.9914653990470762,-0.13033697792769697,-0.002938482107630155))
push(move(17.94311213374513,33.99180656396532,39.99982698281826))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9914653990470762,-0.13033697792769697,-0.002938482107630155,-0.9993238838390648,-0.03659143339181272,-0.0035836003041468454))
push(move(17.673586150730113,33.970180735372324,39.99875796566454))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993238838390648,-0.03659143339181272,-0.0035836003041468454,-0.9993388332144711,0.03634630813346048,-0.0009177769920663614))
push(move(17.427583136452313,33.97292985615211,39.99797828301095))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993388332144711,0.03634630813346048,-0.0009177769920663614,-0.9980823623124753,0.06165131129335677,0.005542008350629026))
push(move(17.192593965552227,33.987674591901474,39.9983162300427))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9980823623124753,0.06165131129335677,0.005542008350629026,-0.99903185837561,0.042036263129306334,0.012972992434241505))
push(move(16.95612732532077,34.00205157002129,40.00059611510668))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.99903185837561,0.042036263129306334,0.012972992434241505,-0.9998473488420586,0.010543365192587754,0.013932568461067963))
push(move(16.710450687224004,34.00796173444244,40.00457713258503))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998473488420586,0.010543365192587754,0.013932568461067963,-0.9999278337200763,-0.002655097167407183,0.011716561394316202))
push(move(16.45897764704006,34.00729400089792,40.00752374454538))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub195 inherits .../COPOLYFF



DPDPoly_sub196 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9993070191827855,-0.015614868459709332,-0.033788419539863675))
push(move(16.206715430930345,34.00336532727081,40.006343725735036))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9993070191827855,-0.015614868459709332,-0.033788419539863675,-0.998817834791124,-0.011188634219124395,-0.047304834504325106))
push(move(15.958661245560725,33.99948930778823,39.99795655470251))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.998817834791124,-0.011188634219124395,-0.047304834504325106,-0.9985642478863814,-0.0029977258105949194,-0.05348323553292128))
push(move(15.716519823526085,33.997874216523655,39.98312765842497))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9985642478863814,-0.0029977258105949194,-0.05348323553292128,-0.9998955349918721,0.002447275764414777,-0.014245348175836598))
push(move(15.47397090973217,33.998034249956014,39.97199647507166))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998955349918721,0.002447275764414777,-0.014245348175836598,-0.9977079638962618,0.00404228133693117,0.0675461230535735))
push(move(15.223494724893353,33.99908091095613,39.97610361046829))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9977079638962618,0.00404228133693117,0.0675461230535735,-0.9878151379166059,0.0026897776389532384,0.15560854217892406))
push(move(14.95759156860564,34.00012639580324,40.006956026142944))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9878151379166059,0.0026897776389532384,0.15560854217892406,-0.9849329002647425,0.0007212518841004734,0.17293542659560127))
push(move(14.677042668476417,34.00056887612865,40.06218510953203))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9849329002647425,0.0007212518841004734,0.17293542659560127,-0.9985432759952181,-0.0006130564576283097,0.05395322165095827))
push(move(14.403638104030453,34.000532047782094,40.10421968611884))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9985432759952181,-0.0006130564576283097,0.05395322165095827,-0.9576928974457714,-0.0012697085473298432,-0.28778933618556496))
push(move(14.162449766248407,34.000252941397186,40.08998955785326))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9576928974457714,-0.0012697085473298432,-0.28778933618556496,-0.8509605700023127,-0.0013163411885618072,-0.525227927234657))
push(move(13.978537941563925,33.99996845029568,39.97647592411026))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub196 inherits .../COPOLYFF



DPDPoly_sub197 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.10002800117769674,1.6154510812140367e-05,-0.9949846223532435))
push(move(13.870809514489585,33.999842657114456,39.74791387081592))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10002800117769674,1.6154510812140367e-05,-0.9949846223532435,0.03719691664238097,0.00014163069654565762,-0.9993079451965972))
push(move(13.841917838740013,33.9998473231168,39.4605266117846))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03719691664238097,0.00014163069654565762,-0.9993079451965972,0.3493169299035283,0.0003170807293463163,-0.9370045794672428))
push(move(13.891863706978679,33.999922822897446,39.18228575608991))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3493169299035283,0.0003170807293463163,-0.9370045794672428,0.7587636164905033,0.00032045845457459647,-0.6513660043298478))
push(move(14.020639450549274,34.000009551666786,38.981125373598715))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7587636164905033,0.00032045845457459647,-0.6513660043298478,0.9858186384307055,0.00014429273442020666,-0.16781415703758873))
push(move(14.222296698236926,34.000062378937585,38.89862321279328))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9858186384307055,0.00014429273442020666,-0.16781415703758873,0.9946730618821702,-1.9752938341820992e-05,0.10308006391038828))
push(move(14.47454576697693,34.000075989225394,38.903857707015945))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9946730618821702,-1.9752938341820992e-05,0.10308006391038828,0.9840288918044632,-0.00014961648219089302,0.1780087573940917))
push(move(14.752311595134698,34.000051853517746,38.95354977262421))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9840288918044632,-0.00014961648219089302,0.1780087573940917,0.9911049098967805,-0.0002639793180775907,0.13308263558186018))
push(move(15.030526848263849,33.999991455189615,39.00443351555041))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9911049098967805,-0.0002639793180775907,0.13308263558186018,0.9992593265314819,-0.0002782745013867046,0.03848013647521824))
push(move(15.291574749338679,33.999908221579,39.02596043381357))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9992593265314819,-0.0002782745013867046,0.03848013647521824,0.9999693093833047,-0.00023591987613714416,-0.007831004615538912))
push(move(15.539186694340177,33.99984980320671,39.02402132401693))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub197 inherits .../COPOLYFF



DPDPoly_sub198 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9988368195665279,0.0006255533551412022,-0.04821427756612451))
push(move(15.780893559842669,33.999869941527855,39.01099233435574))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9988368195665279,0.0006255533551412022,-0.04821427756612451,0.999600656133582,0.0008742997631765423,-0.0282447137927891))
push(move(16.024224225291068,34.00002233510326,38.99924665977261))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.999600656133582,0.0008742997631765423,-0.0282447137927891,0.9999964801070826,0.000996842327139613,0.002458877552787923))
push(move(16.273937253726466,34.00030118172578,38.99706089289896))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999964801070826,0.000996842327139613,0.002458877552787923,0.9999234220389098,0.0003385766371972885,0.012370748718528618))
push(move(16.52652078677046,34.00052304733897,39.00048174985986))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999234220389098,0.0003385766371972885,0.012370748718528618,0.9999961302861541,-0.001201114354172217,-0.002509329995342538))
push(move(16.77692637976081,34.000471495134875,39.00328372151681))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999961302861541,-0.001201114354172217,-0.002509329995342538,0.9993496619145608,-0.0032846242184115856,-0.03590911409373687))
push(move(17.02010735879742,33.9999301911281,38.99924317347644))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9993496619145608,-0.0032846242184115856,-0.03590911409373687,0.9985627763688627,-0.003954463348648939,-0.0534485160704477))
push(move(17.254773481367657,33.998900925571036,38.986113488969686))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9985627763688627,-0.003954463348648939,-0.0534485160704477,0.9997619420476596,-0.001371942182689741,-0.02177560579501112))
push(move(17.49132140467243,33.99806411047911,38.97402123240313))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9997619420476596,-0.001371942182689741,-0.02177560579501112,0.998491826256561,0.004058027451645018,0.05475039097613113))
push(move(17.742414030785962,33.99823175162912,38.97549229213552))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.998491826256561,0.004058027451645018,0.05475039097613113,0.9951082244039839,0.007093777799207626,0.09853578050680618))
push(move(18.020710890613515,34.000215632414566,39.00304929309602))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub198 inherits .../COPOLYFF



DPDPoly_sub199 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9884070646187842,0.010516766471134703,0.15146244496465155))
push(move(18.32697921454231,34.00404304612344,39.0577026273326))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9884070646187842,0.010516766471134703,0.15146244496465155,0.9975310237064682,0.004832187767997143,0.0700607358261417))
push(move(18.623419877175316,34.00719720935543,39.103128878476056))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9975310237064682,0.004832187767997143,0.0700607358261417,0.9589865285940057,-0.01972734692669999,-0.2827643360794497))
push(move(18.86442971487723,34.006646535811385,39.09545000222996))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9589865285940057,-0.01972734692669999,-0.2827643360794497,0.4320982272692896,-0.059094638575750646,-0.8998882962247807))
push(move(19.004409195377125,33.99935986416712,38.99079133420143))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4320982272692896,-0.059094638575750646,-0.8998882962247807,-0.05459094300571152,-0.051032280402924665,-0.9972038584455158))
push(move(19.021818520732367,33.98512172036223,38.76767188279425))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05459094300571152,-0.051032280402924665,-0.9972038584455158,-0.13327935404368269,-0.01760388879300137,-0.9909221548058467))
push(move(18.97646416119289,33.973236504836066,38.48032394934612))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13327935404368269,-0.01760388879300137,-0.9909221548058467,0.05924342306529778,0.058469236059483516,-0.9965297613509225))
push(move(18.945327291924006,33.975018557008504,38.19896524538298))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05924342306529778,0.058469236059483516,-0.9965297613509225,0.6567849285379024,0.20193482538943366,-0.7265369116159216))
push(move(19.005387166426043,34.00178154718892,37.99381196183356))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6567849285379024,0.20193482538943366,-0.7265369116159216,0.9694530218818354,0.19600779549637073,-0.1474509493656472))
push(move(19.20462245263748,34.05474134102482,37.912132376545536))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9694530218818354,0.19600779549637073,-0.1474509493656472,0.9874156442343537,0.15558452930769776,0.0283513626014418))
push(move(19.488769107248515,34.09951359450304,37.92029099230568))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub199 inherits .../COPOLYFF



DPDPoly_sub200 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.907008754795219,-0.3986311918855983,0.1357508437568384))
push(move(19.781042747835247,34.0938725362431,37.96683216190954))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.907008754795219,-0.3986311918855983,0.1357508437568384,0.7193682841603005,-0.6932784284920618,0.04329309797002403))
push(move(20.004659441522286,33.995592791247574,38.000300587308566))
mon[1] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7193682841603005,-0.6932784284920618,0.04329309797002403,0.20285948219348182,-0.9748142565571773,-0.09265633112243149))
push(move(20.104822286460763,33.78183574693955,37.98631789626154))
mon[2] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20285948219348182,-0.9748142565571773,-0.09265633112243149,-0.08334111023955346,-0.9937341957926892,-0.0744755493856598))
push(move(20.107575504569333,33.50104334055287,37.95329354227229))
mon[3] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08334111023955346,-0.9937341957926892,-0.0744755493856598,-0.20930591650611374,-0.9734038159942855,0.09314528610347705))
push(move(20.0575382957756,33.21803574088817,37.94406382533182))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.20930591650611374,-0.9734038159942855,0.09314528610347705,-0.22184334223440516,-0.8203430787446586,0.5270889532725984))
push(move(19.99932983522396,32.99763307215483,38.00146501305029))
mon[5] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22184334223440516,-0.8203430787446586,0.5270889532725984,-0.08587270913494692,-0.3032903453872746,0.9490209925079067))
push(move(19.968263936468645,32.88791268184481,38.15617534568326))
mon[6] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08587270913494692,-0.3032903453872746,0.9490209925079067,0.01755297463640032,0.06199464059856668,0.9979221200166214))
push(move(19.9639695576699,32.87274553919592,38.39224860469145))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.01755297463640032,0.06199464059856668,0.9979221200166214,0.05792902845956863,0.2045971907307948,0.9771306039659167))
push(move(19.977522858842192,32.92061389498778,38.68256381461655))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05792902845956863,0.2045971907307948,0.9771306039659167,0.06853133880210868,0.24204306146301854,0.9678422454096536))
push(move(20.0,33.0,39.0))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub200 inherits .../COPOLYFF





# Now instantiate all the polymers (once each)

polymers[0] = new DPDPoly_sub1
polymers[1] = new DPDPoly_sub2
polymers[2] = new DPDPoly_sub3
polymers[3] = new DPDPoly_sub4
polymers[4] = new DPDPoly_sub5
polymers[5] = new DPDPoly_sub6
polymers[6] = new DPDPoly_sub7
polymers[7] = new DPDPoly_sub8
polymers[8] = new DPDPoly_sub9
polymers[9] = new DPDPoly_sub10
polymers[10] = new DPDPoly_sub11
polymers[11] = new DPDPoly_sub12
polymers[12] = new DPDPoly_sub13
polymers[13] = new DPDPoly_sub14
polymers[14] = new DPDPoly_sub15
polymers[15] = new DPDPoly_sub16
polymers[16] = new DPDPoly_sub17
polymers[17] = new DPDPoly_sub18
polymers[18] = new DPDPoly_sub19
polymers[19] = new DPDPoly_sub20
polymers[20] = new DPDPoly_sub21
polymers[21] = new DPDPoly_sub22
polymers[22] = new DPDPoly_sub23
polymers[23] = new DPDPoly_sub24
polymers[24] = new DPDPoly_sub25
polymers[25] = new DPDPoly_sub26
polymers[26] = new DPDPoly_sub27
polymers[27] = new DPDPoly_sub28
polymers[28] = new DPDPoly_sub29
polymers[29] = new DPDPoly_sub30
polymers[30] = new DPDPoly_sub31
polymers[31] = new DPDPoly_sub32
polymers[32] = new DPDPoly_sub33
polymers[33] = new DPDPoly_sub34
polymers[34] = new DPDPoly_sub35
polymers[35] = new DPDPoly_sub36
polymers[36] = new DPDPoly_sub37
polymers[37] = new DPDPoly_sub38
polymers[38] = new DPDPoly_sub39
polymers[39] = new DPDPoly_sub40
polymers[40] = new DPDPoly_sub41
polymers[41] = new DPDPoly_sub42
polymers[42] = new DPDPoly_sub43
polymers[43] = new DPDPoly_sub44
polymers[44] = new DPDPoly_sub45
polymers[45] = new DPDPoly_sub46
polymers[46] = new DPDPoly_sub47
polymers[47] = new DPDPoly_sub48
polymers[48] = new DPDPoly_sub49
polymers[49] = new DPDPoly_sub50
polymers[50] = new DPDPoly_sub51
polymers[51] = new DPDPoly_sub52
polymers[52] = new DPDPoly_sub53
polymers[53] = new DPDPoly_sub54
polymers[54] = new DPDPoly_sub55
polymers[55] = new DPDPoly_sub56
polymers[56] = new DPDPoly_sub57
polymers[57] = new DPDPoly_sub58
polymers[58] = new DPDPoly_sub59
polymers[59] = new DPDPoly_sub60
polymers[60] = new DPDPoly_sub61
polymers[61] = new DPDPoly_sub62
polymers[62] = new DPDPoly_sub63
polymers[63] = new DPDPoly_sub64
polymers[64] = new DPDPoly_sub65
polymers[65] = new DPDPoly_sub66
polymers[66] = new DPDPoly_sub67
polymers[67] = new DPDPoly_sub68
polymers[68] = new DPDPoly_sub69
polymers[69] = new DPDPoly_sub70
polymers[70] = new DPDPoly_sub71
polymers[71] = new DPDPoly_sub72
polymers[72] = new DPDPoly_sub73
polymers[73] = new DPDPoly_sub74
polymers[74] = new DPDPoly_sub75
polymers[75] = new DPDPoly_sub76
polymers[76] = new DPDPoly_sub77
polymers[77] = new DPDPoly_sub78
polymers[78] = new DPDPoly_sub79
polymers[79] = new DPDPoly_sub80
polymers[80] = new DPDPoly_sub81
polymers[81] = new DPDPoly_sub82
polymers[82] = new DPDPoly_sub83
polymers[83] = new DPDPoly_sub84
polymers[84] = new DPDPoly_sub85
polymers[85] = new DPDPoly_sub86
polymers[86] = new DPDPoly_sub87
polymers[87] = new DPDPoly_sub88
polymers[88] = new DPDPoly_sub89
polymers[89] = new DPDPoly_sub90
polymers[90] = new DPDPoly_sub91
polymers[91] = new DPDPoly_sub92
polymers[92] = new DPDPoly_sub93
polymers[93] = new DPDPoly_sub94
polymers[94] = new DPDPoly_sub95
polymers[95] = new DPDPoly_sub96
polymers[96] = new DPDPoly_sub97
polymers[97] = new DPDPoly_sub98
polymers[98] = new DPDPoly_sub99
polymers[99] = new DPDPoly_sub100
polymers[100] = new DPDPoly_sub101
polymers[101] = new DPDPoly_sub102
polymers[102] = new DPDPoly_sub103
polymers[103] = new DPDPoly_sub104
polymers[104] = new DPDPoly_sub105
polymers[105] = new DPDPoly_sub106
polymers[106] = new DPDPoly_sub107
polymers[107] = new DPDPoly_sub108
polymers[108] = new DPDPoly_sub109
polymers[109] = new DPDPoly_sub110
polymers[110] = new DPDPoly_sub111
polymers[111] = new DPDPoly_sub112
polymers[112] = new DPDPoly_sub113
polymers[113] = new DPDPoly_sub114
polymers[114] = new DPDPoly_sub115
polymers[115] = new DPDPoly_sub116
polymers[116] = new DPDPoly_sub117
polymers[117] = new DPDPoly_sub118
polymers[118] = new DPDPoly_sub119
polymers[119] = new DPDPoly_sub120
polymers[120] = new DPDPoly_sub121
polymers[121] = new DPDPoly_sub122
polymers[122] = new DPDPoly_sub123
polymers[123] = new DPDPoly_sub124
polymers[124] = new DPDPoly_sub125
polymers[125] = new DPDPoly_sub126
polymers[126] = new DPDPoly_sub127
polymers[127] = new DPDPoly_sub128
polymers[128] = new DPDPoly_sub129
polymers[129] = new DPDPoly_sub130
polymers[130] = new DPDPoly_sub131
polymers[131] = new DPDPoly_sub132
polymers[132] = new DPDPoly_sub133
polymers[133] = new DPDPoly_sub134
polymers[134] = new DPDPoly_sub135
polymers[135] = new DPDPoly_sub136
polymers[136] = new DPDPoly_sub137
polymers[137] = new DPDPoly_sub138
polymers[138] = new DPDPoly_sub139
polymers[139] = new DPDPoly_sub140
polymers[140] = new DPDPoly_sub141
polymers[141] = new DPDPoly_sub142
polymers[142] = new DPDPoly_sub143
polymers[143] = new DPDPoly_sub144
polymers[144] = new DPDPoly_sub145
polymers[145] = new DPDPoly_sub146
polymers[146] = new DPDPoly_sub147
polymers[147] = new DPDPoly_sub148
polymers[148] = new DPDPoly_sub149
polymers[149] = new DPDPoly_sub150
polymers[150] = new DPDPoly_sub151
polymers[151] = new DPDPoly_sub152
polymers[152] = new DPDPoly_sub153
polymers[153] = new DPDPoly_sub154
polymers[154] = new DPDPoly_sub155
polymers[155] = new DPDPoly_sub156
polymers[156] = new DPDPoly_sub157
polymers[157] = new DPDPoly_sub158
polymers[158] = new DPDPoly_sub159
polymers[159] = new DPDPoly_sub160
polymers[160] = new DPDPoly_sub161
polymers[161] = new DPDPoly_sub162
polymers[162] = new DPDPoly_sub163
polymers[163] = new DPDPoly_sub164
polymers[164] = new DPDPoly_sub165
polymers[165] = new DPDPoly_sub166
polymers[166] = new DPDPoly_sub167
polymers[167] = new DPDPoly_sub168
polymers[168] = new DPDPoly_sub169
polymers[169] = new DPDPoly_sub170
polymers[170] = new DPDPoly_sub171
polymers[171] = new DPDPoly_sub172
polymers[172] = new DPDPoly_sub173
polymers[173] = new DPDPoly_sub174
polymers[174] = new DPDPoly_sub175
polymers[175] = new DPDPoly_sub176
polymers[176] = new DPDPoly_sub177
polymers[177] = new DPDPoly_sub178
polymers[178] = new DPDPoly_sub179
polymers[179] = new DPDPoly_sub180
polymers[180] = new DPDPoly_sub181
polymers[181] = new DPDPoly_sub182
polymers[182] = new DPDPoly_sub183
polymers[183] = new DPDPoly_sub184
polymers[184] = new DPDPoly_sub185
polymers[185] = new DPDPoly_sub186
polymers[186] = new DPDPoly_sub187
polymers[187] = new DPDPoly_sub188
polymers[188] = new DPDPoly_sub189
polymers[189] = new DPDPoly_sub190
polymers[190] = new DPDPoly_sub191
polymers[191] = new DPDPoly_sub192
polymers[192] = new DPDPoly_sub193
polymers[193] = new DPDPoly_sub194
polymers[194] = new DPDPoly_sub195
polymers[195] = new DPDPoly_sub196
polymers[196] = new DPDPoly_sub197
polymers[197] = new DPDPoly_sub198
polymers[198] = new DPDPoly_sub199
polymers[199] = new DPDPoly_sub200


}  # DPDPoly

