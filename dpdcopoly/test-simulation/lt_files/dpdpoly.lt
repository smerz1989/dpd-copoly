import copolyff.lt
import a_bead.lt
import b_bead.lt
import a_bead_alchemical.lt
import b_bead_alchemical.lt


DPDPoly {

# Definitions of individual polymers to follow

DPDPoly_sub1 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3837331649471703,-0.9214310103416469,-0.06094055546513757))
push(move(20.218947368421052,2.888421052631579,12.997894736842104))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3837331649471703,-0.9214310103416469,-0.06094055546513757,-0.6069030321420888,-0.6001880918552857,0.5210018848064275))
push(move(19.570787492851085,1.3320410897696944,12.894960650201753))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6069030321420888,-0.6001880918552857,0.5210018848064275,-0.11288727209587497,0.041736226556296295,0.9927308553639266))
push(move(18.7660299076652,1.4515790660024483,14.245166039557798))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11288727209587497,0.041736226556296295,0.9927308553639266,0.9549486067229732,-0.06575448785937332,0.28939506879731697))
push(move(19.206156533830473,1.4668509760622692,16.101525899942857))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9549486067229732,-0.06575448785937332,0.28939506879731697,0.3910361587946091,0.6971115158519768,-0.6009378145712885))
push(move(20.28837960712617,1.3467552837316543,14.706510757909628))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3910361587946091,0.6971115158519768,-0.6009378145712885,-0.021752043746117476,0.935575773145959,-0.3524554174575956))
push(move(20.22863987902764,3.2896617281446243,14.530190633167532))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.021752043746117476,0.935575773145959,-0.3524554174575956,-0.002942320089181819,0.3246936646260381,-0.945814657797291))
push(move(20.216909623702,4.420746205193038,13.548459443860153))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.002942320089181819,0.3246936646260381,-0.945814657797291,0.0004937608293254268,-0.24888120323136156,-0.9685338935103681))
push(move(20.218841926219557,4.370894601068992,11.380619172073697))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0004937608293254268,-0.24888120323136156,-0.9685338935103681,7.064608934591e-05,-0.9932546672146879,0.11595327104212942))
push(move(20.218791342794113,3.4722616677948692,9.857383500745817))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(7.064608934591e-05,-0.9932546672146879,0.11595327104212942,8.697256325752101e-05,-0.32544727318647243,0.9455601857159928))
push(move(20.218947368421052,2.888421052631579,11.553684210526313))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub1 inherits .../COPOLYFF



DPDPoly_sub2 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.013846516381753205,0.024639685208842143,-0.9996005001483838))
push(move(20.228390834632783,1.3160681077708638,11.019355134341456))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.013846516381753205,0.024639685208842143,-0.9996005001483838,-0.15507859581038952,0.6129761234066955,-0.7747327934551225))
push(move(20.197116760479418,1.37171989202415,8.761633458831911))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15507859581038952,0.6129761234066955,-0.7747327934551225,-0.6317831502811534,0.5682114968151469,-0.5272435356720001))
push(move(19.784189893681006,3.071852452962782,8.800241438859382))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6317831502811534,0.5682114968151469,-0.5272435356720001,-0.5216175084061899,0.5827310478232264,-0.623169078843746))
push(move(18.67103599471411,2.744242466882979,7.488069549593326))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5216175084061899,0.5827310478232264,-0.623169078843746,-0.8804155306032678,0.4359323014168565,-0.18663204991096574))
push(move(18.494697177534853,4.512424192849857,7.259702681730918))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8804155306032678,0.4359323014168565,-0.18663204991096574,-0.3476125651500695,-0.9368411525883686,-0.03865435766748302))
push(move(17.23130580667007,3.457115959543097,7.182872983911159))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3476125651500695,-0.9368411525883686,-0.03865435766748302,-0.016330356094036068,-0.6495188864895821,-0.7601700701574452))
push(move(17.333093281235737,1.3818171833184405,7.130532861715627))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.016330356094036068,-0.6495188864895821,-0.7601700701574452,0.4579420638086617,0.019819417944678477,-0.8887610797435933))
push(move(17.181381072980752,1.471423960700759,4.858901106466348))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4579420638086617,0.019819417944678477,-0.8887610797435933,0.697285388602679,-0.017558108926410694,0.7165785369742379))
push(move(18.774736842105263,1.4442105263157894,4.332631578947368))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.697285388602679,-0.017558108926410694,0.7165785369742379,-0.03812093419390715,-0.005235209744086673,0.9992594192476343))
push(move(18.69530702292759,1.4333023003731928,6.414715784405049))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub2 inherits .../COPOLYFF



DPDPoly_sub3 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.96198909787528,0.270799602847367,0.03527818967596415))
push(move(18.866015402356812,1.4680925198492476,8.568654177381426))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.96198909787528,0.270799602847367,0.03527818967596415,-0.8920069481126526,0.4500633160292929,0.0420311323124693))
push(move(17.281143946668063,1.9142332939105813,8.626774790129843))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8920069481126526,0.4500633160292929,0.0420311323124693,-0.4610537261885904,0.8834381359989066,0.08346569013908414))
push(move(16.177162055142762,2.824757124675607,8.695352238472433))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4610537261885904,0.8834381359989066,0.08346569013908414,-0.15378826852301672,0.4907843137480334,0.8576012627343574))
push(move(15.942292057736175,4.479645413913252,8.869150440853913))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15378826852301672,0.4907843137480334,0.8576012627343574,0.48719091377591833,-0.08929567556986469,0.8687181912787986))
push(move(15.727221990886182,4.260650302905013,11.204445883697199))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.48719091377591833,-0.08929567556986469,0.8687181912787986,0.6056490732658499,-0.6205868656079537,0.4980573684698509))
push(move(17.420964601274093,4.208624218754921,11.505795955360993))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6056490732658499,-0.6205868656079537,0.4980573684698509,0.5620267026397436,-0.5480902990116683,0.6194537994468976))
push(move(17.15379632204974,2.7988907926333835,12.377593649737085))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5620267026397436,-0.5480902990116683,0.6194537994468976,0.4841005357188794,0.8107189194074912,0.32921346423171055))
push(move(18.774736842105263,2.888421052631579,12.997894736842104))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4841005357188794,0.8107189194074912,0.32921346423171055,-0.45475704691374086,0.8906154749981272,0.000322453335977067))
push(move(18.080791377214,4.351321277559093,13.007998350659603))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.45475704691374086,0.8906154749981272,0.000322453335977067,-0.4827851742476117,0.8757174533609041,-0.006116976851023705))
push(move(17.36239841038366,5.654404497555387,12.998896179792638))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub3 inherits .../COPOLYFF



DPDPoly_sub4 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.5971243372031377,-0.7954887614953442,-0.10315113307335343))
push(move(15.28731262878219,5.838245544679229,13.0256381226544))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5971243372031377,-0.7954887614953442,-0.10315113307335343,-0.4578810330963666,-0.6227971054384592,0.6344042283813062))
push(move(14.35866036415021,4.601095434013704,12.865216703931791))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4578810330963666,-0.6227971054384592,0.6344042283813062,-0.6717591299526189,0.25489817502453366,0.6955333145827471))
push(move(14.170353018244274,4.318988003849235,14.573210196266055))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6717591299526189,0.25489817502453366,0.6955333145827471,-0.4032338347824222,0.9145879537641526,-0.030518016255361064))
push(move(12.851197128760154,5.173100503218505,14.426030474779136))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4032338347824222,0.9145879537641526,-0.030518016255361064,-0.5064813452509965,0.7962600583511089,-0.33082709439740504))
push(move(12.864295843638127,7.2812993373378045,14.474363644595687))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5064813452509965,0.7962600583511089,-0.33082709439740504,-0.8812268544352225,-0.01927202989284578,-0.4723005609630508))
push(move(11.563666987326906,7.197279350394776,13.585032361752182))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8812268544352225,-0.01927202989284578,-0.4723005609630508,-0.33616151233454217,-0.03561786283896215,-0.9411305995831494))
push(move(10.109473684210526,7.221052631578947,12.997894736842104))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.33616151233454217,-0.03561786283896215,-0.9411305995831494,0.6096353209561398,0.5223274293677278,-0.5962539995444944))
push(move(10.780602352000198,7.114310040251526,11.392734722919664))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6096353209561398,0.5223274293677278,-0.5962539995444944,0.2164643013618328,0.9761408476388722,0.01709537384200291))
push(move(11.582809556682363,8.483387198507426,11.55689816653854))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2164643013618328,0.9761408476388722,0.01709537384200291,-0.00901778485753254,0.9988391708473514,-0.047317970552836486))
push(move(11.563304006435747,10.643885363306518,11.45454896806378))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub4 inherits .../COPOLYFF



DPDPoly_sub5 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.00893438144429426,-0.9958738329624314,0.09030772751499869))
push(move(11.555203573573865,11.705431151857585,12.718510661877934))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.00893438144429426,-0.9958738329624314,0.09030772751499869,-0.04945384303813032,-0.9272082356843799,0.3712670266638546))
push(move(11.57306787166259,9.714181156351376,12.899080987210702))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04945384303813032,-0.9272082356843799,0.3712670266638546,0.6450456858390968,-0.4574120895411459,0.6121194683409211))
push(move(11.389014509956663,8.589558673600733,13.966149181408877))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6450456858390968,-0.4574120895411459,0.6121194683409211,0.9086898454337307,-0.01289788195116334,-0.41727258410635654))
push(move(13.049826017648755,8.666988617696157,14.30045833308549))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9086898454337307,-0.01289788195116334,-0.41727258410635654,0.5823511368224829,0.6033508156094851,-0.5448256113151538))
push(move(13.77083982492366,8.55575120684504,12.872409211648538))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5823511368224829,0.6033508156094851,-0.5448256113151538,0.3535962270856895,0.934079198488947,0.049656410875251314))
push(move(14.442105263157893,10.109473684210526,12.997894736842104))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3535962270856895,0.934079198488947,0.049656410875251314,0.8867452903452617,0.46148254638463215,-0.026770308792644373))
push(move(14.944318681209314,11.655677352995344,13.037203810056454))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8867452903452617,0.46148254638463215,-0.026770308792644373,0.8437577329276088,0.11542074309810484,0.5241669010797451))
push(move(17.247984492044505,11.569717460515417,12.913186924790557))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8437577329276088,0.11542074309810484,0.5241669010797451,-0.4517239448082073,0.6032530119810094,0.657290865007838))
push(move(17.411629596868345,11.993189944851926,14.569969278378604))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4517239448082073,0.6032530119810094,0.657290865007838,-0.7670084832750335,0.6414882808152531,-0.01381202956932074))
push(move(16.125278417500954,13.069030987774482,14.5468051010411))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub5 inherits .../COPOLYFF



DPDPoly_sub6 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7377247372257717,-0.10570547679845622,0.6667747477671729))
push(move(15.657034349065444,13.027015222202541,12.794408547049574))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7377247372257717,-0.10570547679845622,0.6667747477671729,-0.5212657409942246,0.5700179719197698,0.6351075018878413))
push(move(14.289190975014932,12.831022694443005,14.030700858660659))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5212657409942246,0.5700179719197698,0.6351075018878413,-0.5090020072669217,0.8542090173328281,0.10603731091238096))
push(move(14.315996951304442,14.493475335775901,14.428321625637254))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5090020072669217,0.8542090173328281,0.10603731091238096,-0.547163829084403,0.5781887835305743,0.6052350574290362))
push(move(12.863809963509015,15.223102285054216,14.327641867395025))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.547163829084403,0.5781887835305743,0.6052350574290362,0.06797762550124725,0.1749511226935238,0.9822276452531195))
push(move(12.997894736842104,15.886315789473683,15.886315789473683))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06797762550124725,0.1749511226935238,0.9822276452531195,-0.4179394614827135,0.0013323857605065464,0.9084739023679902))
push(move(13.125255464319018,15.895973447478703,18.105340731235458))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4179394614827135,0.0013323857605065464,0.9084739023679902,-0.43125342311294634,0.029337802880348023,0.9017537237935421))
push(move(11.695674078306746,15.890467252597826,18.716949391782524))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43125342311294634,0.029337802880348023,0.9017537237935421,0.5946073291322168,-0.47192688591796145,0.6509432682577082))
push(move(12.037598755686036,15.969965806516756,20.379638011333675))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5946073291322168,-0.47192688591796145,0.6509432682577082,0.2736522298429753,-0.961439599512326,-0.027356052192258718))
push(move(13.058740410141167,14.80863119413377,20.20915914000621))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2736522298429753,-0.961439599512326,-0.027356052192258718,-0.03172044078113332,-0.9989021346587722,0.034472293378866814))
push(move(12.989425613070107,12.62585261184801,20.284487223768256))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub6 inherits .../COPOLYFF



DPDPoly_sub7 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.966459502790889,0.08966037530482984,-0.24065960725760527))
push(move(13.141769115113096,11.510951017244947,19.216800207803786))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.966459502790889,0.08966037530482984,-0.24065960725760527,-0.4660853437571404,0.8577700946675327,-0.21678311057100483))
push(move(11.44739013624297,11.668141933900438,18.794880222100407))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4660853437571404,0.8577700946675327,-0.21678311057100483,0.9139337342412447,0.40581687850296955,-0.006147400910939857))
push(move(12.253843421390355,13.145063989394421,18.80381298042289))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9139337342412447,0.40581687850296955,-0.006147400910939857,0.7621076309846496,-0.27400747080001653,0.5866104880930303))
push(move(14.442105263157893,12.997894736842104,18.774736842105263))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7621076309846496,-0.27400747080001653,0.5866104880930303,-0.00953102923181124,-0.99135559775735,0.13085579191212515))
push(move(14.418269473892494,12.366868253952795,20.46981784834308))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00953102923181124,-0.99135559775735,0.13085579191212515,-0.09108516867053704,-0.2369265393753682,-0.9672483171284776))
push(move(14.427933414942565,11.52383136791008,18.969308527489005))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09108516867053704,-0.2369265393753682,-0.9672483171284776,-0.8556553410405645,-0.031233280543975193,-0.5166027676418475))
push(move(14.111946806796915,11.570075861662213,17.216927300176977))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8556553410405645,-0.031233280543975193,-0.5166027676418475,-0.8707790389756758,0.49144097906443407,0.015153526876242905))
push(move(11.720867454683601,11.425017573929678,17.3349147474442))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8707790389756758,0.49144097906443407,0.015153526876242905,-0.7190642868449724,0.5670537109764526,0.40174200707912644))
push(move(11.314712956531595,13.148748843574637,17.265605502604764))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7190642868449724,0.5670537109764526,0.40174200707912644,-0.7754774668015104,-0.18936233146152312,0.6023093938388879))
push(move(9.955829323838712,12.816925697335506,18.32104349035268))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub7 inherits .../COPOLYFF



DPDPoly_sub8 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.8232769633163883,-0.10155267032808453,0.5584819574720221))
push(move(9.975357190070577,14.52585787546428,18.72086912293985))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8232769633163883,-0.10155267032808453,0.5584819574720221,-0.8781541710136134,-0.026702822534054815,0.47763187833320786))
push(move(8.677620774010704,14.365779792018344,19.601207582799457))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8781541710136134,-0.026702822534054815,0.47763187833320786,-0.47634487757623606,-0.8116579872414614,0.338092989211578))
push(move(7.221052631578947,14.442105263157893,20.218947368421052))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.47634487757623606,-0.8116579872414614,0.338092989211578,0.8813946396757127,-0.47238031500337185,-0.0005719687365465594))
push(move(7.79143300176217,12.855778493796924,20.230192771948058))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8813946396757127,-0.47238031500337185,-0.0005719687365465594,0.9972019372091202,-0.07432860615529159,-0.007972122263826528))
push(move(9.941570056467526,12.98405364780673,20.217181926649317))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9972019372091202,-0.07432860615529159,-0.007972122263826528,0.27592202542883565,-0.9590999930666764,0.0631999935344157))
push(move(11.779035845734683,12.558553879369407,20.198313915494268))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.27592202542883565,-0.9590999930666764,0.0631999935344157,-0.603603696634421,-0.3867280685838376,-0.6972115736121113))
push(move(10.372724147640096,11.485369788801306,20.315937855002964))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.603603696634421,-0.3867280685838376,-0.6972115736121113,-0.3544319707373153,0.018133162452176232,-0.9349059666826103))
push(move(10.197750045202897,11.54542621476353,18.37179965213483))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3544319707373153,0.018133162452176232,-0.9349059666826103,-0.9498590718043535,-0.006932675846082124,-0.312601474271292))
push(move(9.21283718884525,11.54471098933193,17.256436094485053))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9498590718043535,-0.006932675846082124,-0.312601474271292,-0.9993378130542913,-0.010270109089631345,0.03490645010815922))
push(move(7.03933456444595,11.522374089068988,17.332355628327836))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub8 inherits .../COPOLYFF



DPDPoly_sub9 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.05722393594054887,0.37525236961262426,0.9251546250522571))
push(move(5.680723666034176,12.367587305322278,17.220764415289285))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05722393594054887,0.37525236961262426,0.9251546250522571,-0.1707291005347045,0.23777892777604018,0.9561970276759322))
push(move(5.776842105263158,12.997894736842104,18.774736842105263))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1707291005347045,0.23777892777604018,0.9561970276759322,-0.5868896339137151,-0.5475513857239395,0.5964461732599341))
push(move(5.125472105297277,13.140900819799297,20.33054412083586))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5868896339137151,-0.5475513857239395,0.5964461732599341,-0.8886457930973899,-0.4572257174867473,-0.03540194456579987))
push(move(4.361835705590897,11.677733891979237,20.212784310408168))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8886457930973899,-0.4572257174867473,-0.03540194456579987,-0.9267342948215774,-0.3757154017007688,0.0012180830774417724))
push(move(2.2831292196155135,11.678459568916372,20.217310629992255))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9267342948215774,-0.3757154017007688,0.0012180830774417724,-0.2595235143545298,-0.9657255675514854,-0.004655499375520278))
push(move(1.3868090999095724,10.471602509478458,20.216694632475203))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2595235143545298,-0.9657255675514854,-0.004655499375520278,0.2930336714451104,-0.9550812986336771,0.044169903776306835))
push(move(1.3741736862463276,8.296100939390135,20.201005202222056))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2930336714451104,-0.9550812986336771,0.044169903776306835,0.5971460541319505,-0.4562228550978892,-0.6597554823728046))
push(move(2.4064041377922525,7.148448047197321,20.37038145792425))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5971460541319505,-0.4562228550978892,-0.6597554823728046,-0.5582665581228965,-0.3794661540908601,-0.7377966440565492))
push(move(2.7464293963129,7.24769006295719,18.684871550045646))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5582665581228965,-0.3794661540908601,-0.7377966440565492,-0.8527420073416471,-0.500851748061777,0.14825179721811269))
push(move(1.3188327674754985,6.409201679689535,18.933063575424395))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub9 inherits .../COPOLYFF



DPDPoly_sub10 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.018924479875970006,-0.06629586537194067,-0.9976205302097635))
push(move(1.4442105263157894,5.776842105263158,17.330526315789474))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.018924479875970006,-0.06629586537194067,-0.9976205302097635,-0.02767899810488678,0.4107393744900496,-0.9113325624092625))
push(move(1.4854541050168142,5.6323584122401265,15.156334944553413))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02767899810488678,0.4107393744900496,-0.9113325624092625,0.6030398129325264,0.6317596982502846,-0.4870550971758872))
push(move(1.3550237889266072,7.1003186483528244,14.394047993495885))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6030398129325264,0.6317596982502846,-0.4870550971758872,0.8805493400004628,0.08140652071756953,-0.46691095319065856))
push(move(2.938058424576306,7.154143287668649,13.983114996469615))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8805493400004628,0.08140652071756953,-0.46691095319065856,0.616647939556059,-0.7177393134303351,-0.32341242492801414))
push(move(4.044005058724547,7.3489141551632065,12.968216696191723))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.616647939556059,-0.7177393134303351,-0.32341242492801414,0.19376013189867788,-0.3406925197198701,0.9199921838219783))
push(move(4.293173601384664,5.576874680687375,13.27239976128394))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19376013189867788,-0.3406925197198701,0.9199921838219783,0.02269214984275216,0.4994294506875488,0.8660573249626421))
push(move(4.352479447254534,6.80651714259158,14.432883465231985))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02269214984275216,0.4994294506875488,0.8660573249626421,-0.26723393987534166,0.12985840931499018,0.9548417748029685))
push(move(4.366932130361536,7.20021939970731,16.0874311594347))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.26723393987534166,0.12985840931499018,0.9548417748029685,-0.9907783870243426,0.013960744820374443,-0.13477123361274895))
push(move(3.474938841628169,7.232945115060611,17.568385002681968))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9907783870243426,0.013960744820374443,-0.13477123361274895,-0.3292394310891473,-0.006675798363147207,-0.9442228713245137))
push(move(2.888421052631579,7.221052631578947,15.886315789473683))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub10 inherits .../COPOLYFF



DPDPoly_sub11 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.11799222147612017,0.8408281805225186,0.5282857243105487))
push(move(1.270930925857665,7.085989941642496,16.51908748572615))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11799222147612017,0.8408281805225186,0.5282857243105487,0.32891128522191276,0.8235329331646231,-0.46218056476548436))
push(move(1.475968858006085,8.547117372499004,17.43710234417245))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.32891128522191276,0.8235329331646231,-0.46218056476548436,0.9698700843524203,-0.012251587306729322,-0.24331444282387896))
push(move(1.8971047913775396,8.653813313208152,15.639198580083695))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9698700843524203,-0.012251587306729322,-0.24331444282387896,0.31022899869117365,0.6478688839174439,0.6957182458600878))
push(move(2.920699366737093,8.528867256067965,17.074658131866165))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.31022899869117365,0.6478688839174439,0.6957182458600878,-0.5280476723443841,0.8371593926787573,0.14258263211700142))
push(move(2.6277974643764312,10.179760431432578,17.277846891061436))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5280476723443841,0.8371593926787573,0.14258263211700142,-0.5332611366350755,0.5466147290197397,-0.6456352671387645))
push(move(1.3372738862173497,11.039207861753765,17.5022122800954))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5332611366350755,0.5466147290197397,-0.6456352671387645,0.05848436677548555,-0.3522592331510254,-0.9340733437491522))
push(move(1.435911027432583,11.401493344247871,15.834794200270814))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05848436677548555,-0.3522592331510254,-0.9340733437491522,0.002703175050088477,-0.8911994898891094,-0.45360352960050904))
push(move(1.48686449718478,10.138203425674822,15.113050699254018))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.002703175050088477,-0.8911994898891094,-0.45360352960050904,0.6533179008252867,-0.5866770514660005,-0.47852456336577))
push(move(1.4442105263157894,8.665263157894737,14.442105263157893))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6533179008252867,-0.5866770514660005,-0.47852456336577,0.9567227541755412,0.025062031749169388,-0.2899197582217722))
push(move(3.0794155212500414,8.708098513613603,13.94658215084004))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub11 inherits .../COPOLYFF



DPDPoly_sub12 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9584593738995584,0.01795004140503821,-0.28466370439103034))
push(move(2.7908921913382825,8.664555767592873,11.620770292270732))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9584593738995584,0.01795004140503821,-0.28466370439103034,0.8569710419846631,-0.04475424287799781,-0.5134176574136672))
push(move(4.37878556013588,8.694293858212966,11.149163857142637))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8569710419846631,-0.04475424287799781,-0.5134176574136672,0.5712650188590891,0.6137812071051886,-0.5449118351003418))
push(move(5.491305702019857,8.523530043026753,10.002932686589812))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5712650188590891,0.6137812071051886,-0.5449118351003418,0.04732993696149552,0.8633400952090836,-0.5023980066357662))
push(move(5.757096846581658,10.175185453590117,9.834435827870568))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04732993696149552,0.8633400952090836,-0.5023980066357662,0.6405382069830584,0.5473711536778104,-0.5386052594584938))
push(move(5.631031449975008,11.072251809567396,8.51977125103862))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6405382069830584,0.5473711536778104,-0.5386052594584938,0.6402967063999223,0.5440606423372387,-0.5422344006359269))
push(move(7.304584486976845,11.497589153776685,8.53320980735013))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6402967063999223,0.5440606423372387,-0.5422344006359269,-0.026608092226026277,0.47790473623828195,-0.8780085833914777))
push(move(7.184915155525992,12.39258808259424,7.203866934624548))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.026608092226026277,0.47790473623828195,-0.8780085833914777,0.011873490043386267,-0.015276194378124311,-0.9998128115399959))
push(move(7.221052631578947,12.997894736842104,5.776842105263158))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.011873490043386267,-0.015276194378124311,-0.9998128115399959,3.026050360167619e-05,-0.995559115581748,-0.0941384430845853))
push(move(7.221805872710957,12.34512522505137,4.097466749535666))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(3.026050360167619e-05,-0.995559115581748,-0.0941384430845853,-0.0004143926092377537,-0.431423224403333,0.9021495606185245))
push(move(7.221094969137187,11.605005094531718,5.645132736865558))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub12 inherits .../COPOLYFF



DPDPoly_sub13 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.004017209277458297,0.0659061383218937,-0.9978177403519726))
push(move(7.222542848388422,9.951884876889675,5.371898591750634))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004017209277458297,0.0659061383218937,-0.9978177403519726,-0.013039817967984388,-0.027187735567751156,-0.999545291711216))
push(move(7.213907007009019,10.09356406688622,3.226878221617864))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.013039817967984388,-0.027187735567751156,-0.999545291711216,0.35226772393357497,-0.6233571951914355,-0.6980925854625053))
push(move(7.169854670615621,9.842031177370968,1.3331750335729322))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.35226772393357497,-0.6233571951914355,-0.6980925854625053,0.929131106594821,-0.3624359246040182,0.07318187831911549))
push(move(8.080244999019115,8.560531137394713,1.510047278454977))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.929131106594821,-0.3624359246040182,0.07318187831911549,0.6473641061112172,0.058260410907791035,0.7599509448903132))
push(move(10.201876827398591,8.659298465040496,1.571988560494613))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6473641061112172,0.058260410907791035,0.7599509448903132,-0.48634888608122,0.0018878666661953046,0.8737626662698557))
push(move(9.26626157219547,8.667268307782152,2.902330858796233))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.48634888608122,0.0018878666661953046,0.8737626662698557,-0.17243701657520077,0.007051028866505015,0.9849953087738883))
push(move(8.665263157894737,8.665263157894737,4.332631578947368))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.17243701657520077,0.007051028866505015,0.9849953087738883,-0.0013721796802395921,-0.014694455097329596,0.9998910891253695))
push(move(8.65765375095356,8.692154561332508,6.378822511880146))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0013721796802395921,-0.014694455097329596,0.9998910891253695,-0.03453093547331798,0.6610571398478475,0.7495405741862952))
push(move(8.659446822637086,8.602976943847583,8.570926227411215))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03453093547331798,0.6610571398478475,0.7495405741862952,-0.050768424127017216,0.9982720117799937,0.02958982271632204))
push(move(8.553828738651328,10.679771309515166,8.632484576611837))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub13 inherits .../COPOLYFF



DPDPoly_sub14 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.25022114141887625,-0.9681700661636762,0.006008608129814349))
push(move(9.874728792497484,11.725893470933396,8.67145787449536))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.25022114141887625,-0.9681700661636762,0.006008608129814349,0.9534274740334424,-0.29105664428282,-0.07913331521573766))
push(move(10.343788921444494,9.91097897768862,8.682721505091004))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9534274740334424,-0.29105664428282,-0.07913331521573766,0.4661176442344885,0.6620795157464983,0.5868432981317698))
push(move(11.668305627279342,11.178361048161301,8.522593189035856))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4661176442344885,0.6620795157464983,0.5868432981317698,-0.1262404931335985,0.932943800346108,0.33716346671777353))
push(move(11.568584669055817,11.650694659978758,10.224742462582176))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1262404931335985,0.932943800346108,0.33716346671777353,0.5699099946519806,0.5371702095329658,-0.6218124829770539))
push(move(11.397599982418077,13.178932709622877,9.245594592277385))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5699099946519806,0.5371702095329658,-0.6218124829770539,0.7179901624106728,0.6957752946501964,0.019668910389954223))
push(move(12.997894736842104,12.997894736842104,8.665263157894737))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7179901624106728,0.6957752946501964,0.019668910389954223,-0.056092386539001615,0.07605435031451116,0.9955246757216001))
push(move(12.993669892063004,14.725619655773999,9.289317971332476))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.056092386539001615,0.07605435031451116,0.9955246757216001,0.6669148900885782,-0.7143355065579237,0.21201253134844242))
push(move(12.915602039281218,13.109473473900653,10.125789552088966))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6669148900885782,-0.7143355065579237,0.21201253134844242,0.5108750773000457,-0.03657057626375017,-0.8588767364094859))
push(move(14.570802800350638,13.036345579435434,9.79068920344664))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5108750773000457,-0.03657057626375017,-0.8588767364094859,-0.009986829443717756,-0.018124005035621105,-0.9997858689135044))
push(move(14.546757577699626,12.992708533377368,7.383511434281603))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub14 inherits .../COPOLYFF



DPDPoly_sub15 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.7383788692505864,0.026237802708125955,-0.6738755249697639))
push(move(12.79477237149545,12.992692927370744,6.957115131020034))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7383788692505864,0.026237802708125955,-0.6738755249697639,0.5176532406847256,0.03735304393195675,-0.8547747495788692))
push(move(14.027521147177852,13.036497836357192,5.832056894708441))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5176532406847256,0.03735304393195675,-0.8547747495788692,0.16189794376968636,0.5864126106737022,-0.7936682593161958))
push(move(14.419219002081876,13.1099104420861,4.274748147231687))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16189794376968636,0.5864126106737022,-0.7936682593161958,0.01645270339141796,-0.08052696626323169,-0.9966166345468824))
push(move(14.491683030333247,14.71774452386047,3.556607650158821))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.01645270339141796,-0.08052696626323169,-0.9966166345468824,0.7653984443255937,-0.5172340878433175,-0.38292834812383936))
push(move(14.442105263157893,12.997894736842104,2.888421052631579))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7653984443255937,-0.5172340878433175,-0.38292834812383936,0.5919924931232953,0.6149416284774224,0.5209526673808292))
push(move(16.04845397702874,13.665723832461612,2.77775614942112))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5919924931232953,0.6149416284774224,0.5209526673808292,-0.18793348270983376,0.20928819921292652,0.9596246431531252))
push(move(15.855176130561267,14.465744600563358,4.13192168164819))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.18793348270983376,0.20928819921292652,0.9596246431531252,-0.6085952286783157,0.47957043929812343,0.6321582407763057))
push(move(15.433645304510074,14.350392674205949,5.917087919716137))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6085952286783157,0.47957043929812343,0.6321582407763057,-0.3380470498809605,0.6598543574041743,0.6710561966642612))
push(move(14.409765100578515,15.604722315062617,5.633294763223124))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3380470498809605,0.6598543574041743,0.6710561966642612,0.16553219881046125,0.09778249806917491,0.9813448294194684))
push(move(14.702466050243897,15.777625413379294,7.368549689965138))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub15 inherits .../COPOLYFF



DPDPoly_sub16 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.05254612626500494,0.2728824700062677,0.9606112960910986))
push(move(15.995436764957827,16.93679667381738,7.051509470602258))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05254612626500494,0.2728824700062677,0.9606112960910986,-0.12374211639925976,0.9327798197857261,0.3385405388273914))
push(move(15.900860636602598,17.427949292357646,8.780483682334015))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12374211639925976,0.9327798197857261,0.3385405388273914,0.570062897604166,0.5370161879405277,-0.6218053607560536))
push(move(15.731115285100428,18.92927708001444,7.774654821744099))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.570062897604166,0.5370161879405277,-0.6218053607560536,0.5451386414619561,-0.27441624299296097,-0.792161339101222))
push(move(17.330526315789474,18.774736842105263,7.221052631578947))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5451386414619561,-0.27441624299296097,-0.792161339101222,-0.0022058671592846374,-0.9932871746365158,-0.11565346018465412))
push(move(17.292112489211757,18.14348984077937,5.50631142890393))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0022058671592846374,-0.9932871746365158,-0.11565346018465412,-0.015127245717516941,-0.20889360625855452,0.9778213679917708))
push(move(17.32725307724614,17.3008194981104,7.049436964718494))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.015127245717516941,-0.20889360625855452,0.9778213679917708,0.3442815890404127,-0.0332647683080402,0.9382769541224066))
push(move(17.234601510904298,17.349315152112084,9.223806638096258))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3442815890404127,-0.0332647683080402,0.9382769541224066,0.5806766122620864,0.7026321588743363,0.411245329806207))
push(move(18.469095011399105,17.19049379788963,10.161319813442423))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5806766122620864,0.7026321588743363,0.411245329806207,-0.4426041718024209,0.8959965637419308,0.035940295849439495))
push(move(18.470001736058435,18.8441780567715,10.09873867825025))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4426041718024209,0.8959965637419308,0.035940295849439495,-0.8168554291572071,0.5667623711820162,0.1073667661268301))
push(move(17.225755230824657,19.707479045501927,10.262281355158688))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub16 inherits .../COPOLYFF



DPDPoly_sub17 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.43886732260787725,-0.8968740640316591,0.05488521125338432))
push(move(17.301864786785014,20.07506404697779,8.583789466293082))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.43886732260787725,-0.8968740640316591,0.05488521125338432,0.9130670146398596,-0.4070114046418479,0.02550182872117722))
push(move(17.997301112878237,18.65386275918959,8.670761468318869))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9130670146398596,-0.4070114046418479,0.02550182872117722,0.7046072472545684,-0.003382900949942165,-0.7095894468617066))
push(move(20.218947368421052,18.774736842105263,8.665263157894737))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7046072472545684,-0.003382900949942165,-0.7095894468617066,0.0023421311945265766,0.40706258740154877,-0.9133972653557838))
push(move(20.186401580381638,18.643352634464232,6.466182114483149))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0023421311945265766,0.40706258740154877,-0.9133972653557838,0.06670406116007495,0.7455534013934608,0.6630993092255443))
push(move(20.226565968376537,20.098850118724677,5.694119448506381))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06670406116007495,0.7455534013934608,0.6630993092255443,-0.37406666055289023,0.0418563851418897,0.9264567860864653))
push(move(20.32354183225858,20.17617356735233,7.829481510428291))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.37406666055289023,0.0418563851418897,0.9264567860864653,-0.48882750228334415,0.030690675587553423,0.8718404415048701))
push(move(19.045576666288078,20.230997535988763,8.619094242031636))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.48882750228334415,0.030690675587553423,0.8718404415048701,-0.10236845738988834,-0.2766767510972443,0.9554949891725693))
push(move(18.815476289960788,20.270856354444373,10.519167590024283))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10236845738988834,-0.2766767510972443,0.9554949891725693,-0.05277662320563375,-0.9445424130225067,0.3241207460879832))
push(move(18.723086010316397,19.359384646349994,11.629183616166845))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05277662320563375,-0.9445424130225067,0.3241207460879832,-0.03629251395269555,-0.9988116597524648,-0.032528783769455664))
push(move(18.64598469267498,17.237467847119643,11.56007812258856))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub17 inherits .../COPOLYFF



DPDPoly_sub18 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9272537165348057,0.3735769106964727,0.025314757886848473))
push(move(17.34909914602299,18.185402900797307,11.513749071036834))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9272537165348057,0.3735769106964727,0.025314757886848473,-0.6440923987828221,-0.02855571307954614,-0.7644145165292903))
push(move(15.886315789473683,18.774736842105263,11.553684210526315))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6440923987828221,-0.02855571307954614,-0.7644145165292903,-0.0018008429934528404,-0.9958619754771337,-0.09086078782012397))
push(move(15.93015286956944,18.122494189528133,9.829731166236177))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0018008429934528404,-0.9958619754771337,-0.09086078782012397,-0.01664132335940288,-0.8731896209268923,0.4870964506772739))
push(move(15.88379336174999,17.379840193676305,11.426416163824179))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01664132335940288,-0.8731896209268923,0.4870964506772739,0.003516893991792305,-0.4599040326852804,-0.8879616614339083))
push(move(15.88385789185905,15.693342783434352,11.184798839635672))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.003516893991792305,-0.4599040326852804,-0.8879616614339083,0.018506309918281255,-0.4471179270153716,-0.8942835544919102))
push(move(15.894051225098476,16.038419971254786,8.836463380788759))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.018506309918281255,-0.4471179270153716,-0.8942835544919102,-0.3579623029064654,-0.6266623965257804,-0.6922118393082174))
push(move(15.94101737003197,14.312352866870256,8.422671676570776))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3579623029064654,-0.6266623965257804,-0.6922118393082174,-0.9295678399820766,0.03896981465953948,-0.3665855758434278))
push(move(14.997727743622901,14.469282058119326,7.103192249472249))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9295678399820766,0.03896981465953948,-0.3665855758434278,-0.9769324953225257,-0.0053535661160896905,0.21348123784713283))
push(move(12.819443779967752,14.44321705882989,7.19164387759551))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9769324953225257,-0.0053535661160896905,0.21348123784713283,-0.8970345053866841,0.004049212948938479,0.44194196453851387))
push(move(11.40578633237284,14.449598307274393,7.888110452541013))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub18 inherits .../COPOLYFF



DPDPoly_sub19 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9558569336761504,-0.29328189995212167,-0.017979140794289354))
push(move(11.553684210526315,14.442105263157893,10.109473684210526))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9558569336761504,-0.29328189995212167,-0.017979140794289354,-0.43698808075767226,-0.899466679028275,0.001053847034523771))
push(move(9.9232383346783,13.941841837334572,10.078805898136515))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43698808075767226,-0.899466679028275,0.001053847034523771,-0.5703398491506527,-0.8210568542681607,0.024043679628607765))
push(move(10.201193186588139,11.658229310276164,10.112735371925957))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5703398491506527,-0.8210568542681607,0.024043679628607765,-0.5129572374299608,0.8572269241007148,-0.04513173124366346))
push(move(8.519835303555759,11.921513642277123,10.13796882164673))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5129572374299608,0.8572269241007148,-0.04513173124366346,-0.01835100588946169,0.8508328531741092,0.5251158886783464))
push(move(8.657185549195386,14.238492968162307,9.976888301947755))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01835100588946169,0.8508328531741092,0.5251158886783464,-0.8535692585277623,0.029729046138637225,0.5201304689326061))
push(move(8.465732976559247,14.429934026373639,11.686112377998302))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8535692585277623,0.029729046138637225,0.5201304689326061,-0.852036206297448,0.5217792226925033,-0.042198885348541715))
push(move(6.114405587010631,14.327055697033984,11.526355226758021))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.852036206297448,0.5217792226925033,-0.042198885348541715,-0.09134187014295546,0.9958194664954236,-0.0005028991523183794))
push(move(5.7931380526862615,16.06660684807243,11.553746492673191))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09134187014295546,0.9958194664954236,-0.0005028991523183794,-0.003924490741757082,0.9999922990440689,-1.4999171416465635e-05))
push(move(5.769246107582991,18.0900236340987,11.524454888946378))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.003924490741757082,0.9999922990440689,-1.4999171416465635e-05,0.0035676400190657485,0.9998993985923732,0.013728242396783105))
push(move(5.776842105263158,20.218947368421052,11.553684210526315))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub19 inherits .../COPOLYFF



DPDPoly_sub20 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.05380542039063779,-0.898157170265584,-0.436369882367133))
push(move(5.8025651528606215,20.31843597981642,9.32974695008374))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05380542039063779,-0.898157170265584,-0.436369882367133,0.7960814118832769,-0.5442572173669963,-0.264647816914976))
push(move(5.717731792321086,18.902339042126343,8.641735904157834))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7960814118832769,-0.5442572173669963,-0.264647816914976,0.909188282141544,-0.41597372316502756,0.01850754583225235))
push(move(7.847016824036892,18.92070509326879,8.650093257021119))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.909188282141544,-0.41597372316502756,0.01850754583225235,0.8284813169069528,-0.5516251922693483,0.09658340846090432))
push(move(8.573182920443704,17.595907073730135,8.699861810159401))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8284813169069528,-0.5516251922693483,0.09658340846090432,0.8350643958808337,-0.0943161418135476,0.5420073063396702))
push(move(10.181174710404148,17.366559855979194,8.922206725304157))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8350643958808337,-0.0943161418135476,0.5420073063396702,0.9460715752173733,-0.04653803840752909,-0.3205975445116469))
push(move(11.078884497175517,17.312901228409444,10.326213704450055))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9460715752173733,-0.04653803840752909,-0.3205975445116469,0.1927249509257938,0.2364362587857582,-0.9523418445191014))
push(move(11.52066299463294,17.300669326286922,8.468291116723274))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1927249509257938,0.2364362587857582,-0.9523418445191014,-0.590051289146109,0.6163421389130727,-0.5214996107161284))
push(move(11.727664902150993,18.10882936842995,7.1202939488907795))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.590051289146109,0.6163421389130727,-0.5214996107161284,-0.9076076836817608,-0.4177087577921529,0.04204386026003585))
push(move(10.109473684210526,18.774736842105263,7.221052631578947))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9076076836817608,-0.4177087577921529,0.04204386026003585,-0.3325466904382661,-0.9430863075527696,0.0009566530400407643))
push(move(9.515696706262254,17.090814091573385,7.22276077833666))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub20 inherits .../COPOLYFF



DPDPoly_sub21 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.19244720914284663,0.9812498931145919,0.010616918372635776))
push(move(8.647715093071378,18.57954386237905,7.22207729081608))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19244720914284663,0.9812498931145919,0.010616918372635776,0.8554318500802214,0.5170229794563894,-0.030390600230460845))
push(move(8.991472080932363,20.332292104862585,7.241041659779385))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8554318500802214,0.5170229794563894,-0.030390600230460845,0.8094149626914658,-0.015033708411027304,0.5870446369592223))
push(move(11.353241839402385,20.214764130663227,7.12595907666161))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8094149626914658,-0.015033708411027304,0.5870446369592223,0.0625455121853553,-0.3200883061497542,0.9453208636075122))
push(move(11.529198071437918,20.28515752701702,9.081578963222075))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0625455121853553,-0.3200883061497542,0.9453208636075122,-0.0022056097459724256,-0.48626883132020654,0.8738064768426297))
push(move(11.548088784345568,19.21759860453422,10.070900701235967))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0022056097459724256,-0.48626883132020654,0.8738064768426297,0.2507196683869764,-0.1414346059458085,0.957672125586246))
push(move(11.52245095633943,18.79762702452637,11.754614337602009))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2507196683869764,-0.1414346059458085,0.957672125586246,0.9907370837224373,-0.015370394234903812,-0.13492139162573166))
push(move(12.369645645386477,18.754146448383267,13.208995572152288))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9907370837224373,-0.015370394234903812,-0.13492139162573166,0.19320347838313176,0.185995090347109,-0.9633681758847079))
push(move(12.997894736842104,18.774736842105263,11.553684210526315))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19320347838313176,0.185995090347109,-0.9633681758847079,-0.053623834848498,0.996673664694124,-0.06136848084583541))
push(move(13.04293633156769,19.40231677665141,9.85177433775867))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.053623834848498,0.996673664694124,-0.06136848084583541,-0.06819030781862395,0.46478579512160734,0.8827934336937359))
push(move(12.918493424659324,20.250520829175894,11.462815328813734))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub21 inherits .../COPOLYFF



DPDPoly_sub22 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7669806992162798,-0.007359183806063385,0.6416279680963222))
push(move(14.670458500009826,20.229976502533717,11.964255233798655))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7669806992162798,-0.007359183806063385,0.6416279680963222,-0.9710445668134614,-0.0033326179596653567,0.23887516178872975))
push(move(13.389493515918765,20.217685636835675,13.035863633833657))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9710445668134614,-0.0033326179596653567,0.23887516178872975,-0.8538108540676339,-0.0005247515097179217,-0.5205830866558676))
push(move(11.505353444640255,20.219113884779347,12.742865204977221))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8538108540676339,-0.0005247515097179217,-0.5205830866558676,-0.912136448944656,-0.0026706987923646795,-0.40987798900964845))
push(move(10.715306526497198,20.21604208352023,11.40536607033259))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.912136448944656,-0.0026706987923646795,-0.40987798900964845,-0.6519569447240583,0.08405457997262551,-0.7535827557818031))
push(move(8.573619810032147,20.21052988675302,11.42546024012198))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6519569447240583,0.08405457997262551,-0.7535827557818031,0.6192068537712774,-0.5788655475564877,-0.5305634270233898))
push(move(9.515900172375858,20.3706774442262,10.018998530335725))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6192068537712774,-0.5788655475564877,-0.5305634270233898,0.04900606076786713,-0.6692195135023131,0.7414469965923008))
push(move(10.109473684210526,18.774736842105263,10.109473684210526))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04900606076786713,-0.6692195135023131,0.7414469965923008,-0.887555350803128,-0.027070297667449242,0.459905096998209))
push(move(9.62714060132456,18.851594608830215,11.702032845914415))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.887555350803128,-0.027070297667449242,0.459905096998209,-0.8429715253913336,0.5339420675509283,0.0656115529373302))
push(move(7.307549943144932,18.68927861164842,11.5613482165992))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8429715253913336,0.5339420675509283,0.0656115529373302,-0.0452214177483885,0.9805601411936405,0.1909367248046677))
push(move(7.230041845873083,20.36992806026601,11.888607797916857))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub22 inherits .../COPOLYFF



DPDPoly_sub23 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9949065380419387,0.03896965307600857,0.09296422269098915))
push(move(7.317098202303019,20.210478385494252,14.241102432417915))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9949065380419387,0.03896965307600857,0.09296422269098915,-0.9534481710138144,-0.2975132151358664,0.04921861446578812))
push(move(5.3922985050854955,20.28587117222676,14.420956017499226))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9534481710138144,-0.2975132151358664,0.04921861446578812,0.28569282531207124,-0.9564176286821374,-0.06037324830786908))
push(move(4.099491713432001,19.20645899498228,14.407200745984312))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.28569282531207124,-0.9564176286821374,-0.06037324830786908,0.7422667930746893,0.15457201588463945,-0.6520333578920446))
push(move(5.8464812096579815,18.76539775879343,14.324977110187353))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7422667930746893,0.15457201588463945,-0.6520333578920446,-0.609665651461245,0.5853813032070317,-0.5344497387818361))
push(move(5.906313673260893,19.582717390590293,12.820024543880155))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.609665651461245,0.5853813032070317,-0.5344497387818361,-0.8343587596633563,0.23604023478071143,-0.49812695945681595))
push(move(4.332631578947368,20.218947368421052,12.997894736842104))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8343587596633563,0.23604023478071143,-0.49812695945681595,-0.4731894698817183,0.02636569319822475,-0.8805660542033378))
push(move(3.7442911784396,20.194353921481035,11.529258816128824))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4731894698817183,0.02636569319822475,-0.8805660542033378,-0.38150959932256845,-0.790149665956493,-0.47970191891796293))
push(move(2.8604983004174853,20.300973315402327,10.258377746617201))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.38150959932256845,-0.790149665956493,-0.47970191891796293,-0.4804887876571414,-0.6177144738886786,0.622542652100403))
push(move(2.980871564298017,18.613225283644102,10.569351504507832))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4804887876571414,-0.6177144738886786,0.622542652100403,-0.7278221128022238,0.12380500390637417,0.6744978080941773))
push(move(1.7151573554131436,18.82852755300223,11.742332435630614))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub23 inherits .../COPOLYFF



DPDPoly_sub24 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.00014411940397647782,0.7765453373777048,0.6300613606836591))
push(move(1.475350615009384,19.047466347924626,9.937267407037174))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00014411940397647782,0.7765453373777048,0.6300613606836591,0.024285066835326254,0.35605456497888555,0.9341495502790227))
push(move(1.4751139666649078,20.32257687038532,10.97184688634563))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.024285066835326254,0.35605456497888555,0.9341495502790227,0.509225002700265,-0.03197054372772249,0.8600394066312712))
push(move(1.5556573876534718,20.224880978592033,13.026348283714388))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.509225002700265,-0.03197054372772249,0.8600394066312712,-0.07847546584189852,-0.004178160037015964,0.9969072896912743))
push(move(3.1666032901107983,20.21638052673871,13.828634095036193))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07847546584189852,-0.004178160037015964,0.9969072896912743,-0.4633946607587713,0.0010420080539687816,0.8861513993666539))
push(move(1.4442105263157894,20.218947368421052,14.442105263157893))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4633946607587713,0.0010420080539687816,0.8861513993666539,0.8854067664353402,6.2897264618135915e-06,0.46481701551358295))
push(move(2.0044540405544833,20.218993782739478,16.05101659310157))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8854067664353402,6.2897264618135915e-06,0.46481701551358295,0.998949857821972,8.172436952244187e-05,-0.04581675325238152))
push(move(4.175045073858914,20.218966767642932,15.8757269750867))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.998949857821972,8.172436952244187e-05,-0.04581675325238152,0.9995160458060964,-0.0004374794104653067,0.03110438534854178))
push(move(6.2303487369339035,20.21933950437608,15.857196279640881))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9995160458060964,-0.0004374794104653067,0.03110438534854178,0.8562951213592914,-0.004402522013696644,-0.5164680851090369))
push(move(8.484160759976302,20.21708070548525,16.00982426684588))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8562951213592914,-0.004402522013696644,-0.5164680851090369,0.2329438880018693,-0.006330819017255759,-0.9724695706155249))
push(move(8.907505605168163,20.20557527548755,14.242488865357595))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub24 inherits .../COPOLYFF



DPDPoly_sub25 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.05837335361179639,-0.9760002395654285,0.20980010475769187))
push(move(10.218751993730361,20.33158996006794,15.463675775416437))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05837335361179639,-0.9760002395654285,0.20980010475769187,-0.02159816252108028,-0.9416129176971411,0.33600391753905173))
push(move(10.113508389066261,18.571920915729653,15.841932598391624))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02159816252108028,-0.9416129176971411,0.33600391753905173,-0.0012668961831673936,-0.3897975531551387,0.9208997027517861))
push(move(10.147614239329052,17.2302044410516,16.57037011297601))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0012668961831673936,-0.3897975531551387,0.9208997027517861,0.7052301199510034,0.09046178680401411,0.7031835770566023))
push(move(10.109473684210526,17.330526315789474,18.774736842105263))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7052301199510034,0.09046178680401411,0.7031835770566023,0.5950891855369989,-0.5138376012030694,-0.61793185776976))
push(move(11.706261492399404,17.43013636613686,18.124494248881614))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5950891855369989,-0.5138376012030694,-0.61793185776976,-0.04736420047200571,-0.9354388920124145,-0.35030088755844474))
push(move(11.545219139960432,16.09081297726692,17.283879877605997))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04736420047200571,-0.9354388920124145,-0.35030088755844474,0.0027564268294925595,-0.5634444331553122,-0.8261493647382553))
push(move(11.55075217395877,14.358840680998222,16.974362889532266))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0027564268294925595,-0.5634444331553122,-0.8261493647382553,0.0007344560572381803,0.5856629016421989,-0.8105543943587871))
push(move(11.553901668155955,14.316007230516089,14.681574212784858))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0007344560572381803,0.5856629016421989,-0.8105543943587871,0.0029066057676295164,0.8843543300840971,0.46680720913929713))
push(move(11.552773677957013,15.970809001804751,14.743407159993628))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0029066057676295164,0.8843543300840971,0.46680720913929713,0.006383964440962008,0.5225221745376492,0.8526017957490256))
push(move(11.561757187580376,16.70610178527647,15.943187720778454))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub25 inherits .../COPOLYFF



DPDPoly_sub26 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.43128881634708166,-0.051262070398042224,-0.9007564360205479))
push(move(11.576802865530789,18.833767178744058,15.770476639566747))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43128881634708166,-0.051262070398042224,-0.9007564360205479,-0.909628843633369,-0.01844237147623598,-0.41501234411105437))
push(move(10.889417443069743,18.75206601103182,14.334856656297314))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.909628843633369,-0.01844237147623598,-0.41501234411105437,-0.6807297956710606,-0.03441794826364653,0.731725597558919))
push(move(8.665263157894737,18.774736842105263,14.442105263157893))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6807297956710606,-0.03441794826364653,0.731725597558919,0.0013673433548089403,0.4216444875160888,0.9067601979131225))
push(move(8.692603249709174,18.64099427929222,16.696241729471677))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0013673433548089403,0.4216444875160888,0.9067601979131225,0.024787625464039953,0.5028225529407375,0.8640341740220775))
push(move(8.669559063510764,20.099455257210646,17.290955343794323))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.024787625464039953,0.5028225529407375,0.8640341740220775,-0.35307847232331363,0.027359379358968657,0.9351935931896278))
push(move(8.768703356061712,20.18470203826076,19.348899711201184))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.35307847232331363,0.027359379358968657,0.9351935931896278,-0.914226895709005,-0.13241847754354938,-0.3829549973134243))
push(move(7.491994215985476,20.190702517830175,20.409953490933002))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.914226895709005,-0.13241847754354938,-0.3829549973134243,-0.10287617339981435,-0.5339610276554831,-0.8392270931587659))
push(move(7.26155224185541,19.966403214513633,18.71757825960006))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10287617339981435,-0.5339610276554831,-0.8392270931587659,-0.11413121838241973,0.2529078969320737,-0.9607349585915671))
push(move(7.171580265623906,18.52764919307922,17.796130879895422))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11413121838241973,0.2529078969320737,-0.9607349585915671,-0.03933129443401738,0.9692974756916855,-0.24272505617647117))
push(move(7.098542526286885,20.327622913455194,17.345393378404808))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub26 inherits .../COPOLYFF



DPDPoly_sub27 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.055111165638175155,-0.3486806133005905,-0.9356198957537862))
push(move(5.682923100589872,19.368949208525944,17.48077470436279))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.055111165638175155,-0.3486806133005905,-0.9356198957537862,0.6297331145346359,-0.22307510719032292,-0.7440925352471512))
push(move(5.776842105263158,18.774736842105263,15.886315789473683))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6297331145346359,-0.22307510719032292,-0.7440925352471512,0.43310580882282507,0.006965860816865144,-0.9013161682489705))
push(move(7.414975325442366,18.755391295180804,15.434182105967562))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.43310580882282507,0.006965860816865144,-0.9013161682489705,0.4687353141944798,0.15930173533910888,-0.8688556625498569))
push(move(7.123495234407584,18.79639574871682,13.083859175880985))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4687353141944798,0.15930173533910888,-0.8688556625498569,0.8608034932506214,0.508175945988891,-0.027830808932243507))
push(move(8.713756198033337,19.196787623905337,13.026740034952807))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8608034932506214,0.508175945988891,-0.027830808932243507,0.8457664681820696,-0.5335017431157879,-0.00741426943428195))
push(move(9.81256457223974,20.383889718359338,12.996918340331922))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8457664681820696,-0.5335017431157879,-0.00741426943428195,0.3754718514104361,-0.9257589854663211,-0.04462274786235362))
push(move(10.008215690017602,18.380254430232167,13.015392373622648))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3754718514104361,-0.9257589854663211,-0.04462274786235362,0.6088483899319829,-0.44354726275767237,0.6577001321099218))
push(move(11.078223638027684,17.263295595820725,12.846501777385313))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6088483899319829,-0.44354726275767237,0.6577001321099218,-0.5588510261961377,-0.38180419042658126,0.7361461068919856))
push(move(11.412010019942946,17.357587469442986,14.531821966793126))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5588510261961377,-0.38180419042658126,0.7361461068919856,-0.8521789151760929,-0.5023322790478749,-0.14646971685596163))
push(move(9.984998423663827,16.516409666729444,14.286551894118322))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub27 inherits .../COPOLYFF



DPDPoly_sub28 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.0036414356555993645,-0.022924449062238724,0.9997305684941112))
push(move(10.109473684210526,15.886315789473683,15.886315789473683))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0036414356555993645,-0.022924449062238724,0.9997305684941112,0.005510185216725114,0.019720732605585888,0.9997903433042231))
push(move(10.102016552055185,15.839369842211745,17.933619016576312))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.005510185216725114,0.019720732605585888,0.9997903433042231,0.16501685893865714,-0.5419581528323535,0.8240453851849197))
push(move(10.132864306948631,15.970029893147764,20.13040520164938))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16501685893865714,-0.5419581528323535,0.8240453851849197,0.5966603887838732,-0.6525826010552033,-0.46704638876272503))
push(move(10.574066145620376,14.289036576754569,20.290895064961255))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5966603887838732,-0.6525826010552033,-0.46704638876272503,0.8804829627284813,0.04370317715783637,-0.4720590902113704))
push(move(11.515502048304796,14.457803925859478,19.04812124882382))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8804829627284813,0.04370317715783637,-0.4720590902113704,0.9975725050081603,0.03418185703663934,-0.06066875556058989))
push(move(13.343233251608824,14.42648546075982,18.806243390787667))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9975725050081603,0.03418185703663934,-0.06066875556058989,0.8545136619388642,-0.5187179659562808,0.02716750548010279))
push(move(15.507474329979184,14.59458899676047,18.80534391750636))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8545136619388642,-0.5187179659562808,0.02716750548010279,0.4632707284642982,-0.5899824313093599,0.661287352740437))
push(move(15.837285856656841,12.912513301036727,18.88553666699061))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4632707284642982,-0.5899824313093599,0.661287352740437,0.9956410805410648,0.05692938768401193,-0.07387749019115598))
push(move(16.700788004219497,13.07488559314415,20.50871775949982))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9956410805410648,0.05692938768401193,-0.07387749019115598,0.3410630374282127,-0.04169785261930527,-0.9391151652418251))
push(move(17.330526315789474,12.997894736842104,18.774736842105263))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub28 inherits .../COPOLYFF



DPDPoly_sub29 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.5574322483048262,-0.07828676433114053,0.8265231219272617))
push(move(17.932559249711232,14.586046363394196,18.678535026845186))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5574322483048262,-0.07828676433114053,0.8265231219272617,-0.43795835112787185,0.13122940949708078,0.8893656867455608))
push(move(18.88920423831984,14.451693460418955,20.096984004214857))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43795835112787185,0.13122940949708078,0.8893656867455608,-0.5273370947473257,0.8485958070643225,0.04243518276502769))
push(move(17.194640648611394,14.807155567111538,20.17703250209453))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5273370947473257,0.8485958070643225,0.04243518276502769,-0.029667057043850954,0.9995064933852804,0.010326442127717692))
push(move(17.313812068429126,16.98682934061299,20.223756907774654))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.029667057043850954,0.9995064933852804,0.010326442127717692,-0.5102564811246687,0.8600206823114371,0.0016581516337846592))
push(move(17.075735026419295,18.813179531853017,20.218420902177897))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5102564811246687,0.8600206823114371,0.0016581516337846592,0.31595212264891986,0.9485522527837719,0.020564044652583362))
push(move(15.672007590177019,19.754037322951906,20.229092186950272))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.31595212264891986,0.9485522527837719,0.020564044652583362,0.9568855743347083,0.15250564188451904,-0.2472084683491367))
push(move(17.535931770525774,20.1947833479192,20.248373245322288))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9568855743347083,0.15250564188451904,-0.2472084683491367,0.8764674061967427,0.007893720926989188,-0.4813964842462821))
push(move(18.722986062247887,20.240293404910837,19.44088120825387))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8764674061967427,0.007893720926989188,-0.4813964842462821,0.7684970908121702,-0.34815448294265605,0.5368432521883486))
push(move(20.218947368421052,20.218947368421052,18.774736842105263))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7684970908121702,-0.34815448294265605,0.5368432521883486,-0.02356331747938235,-0.35423478475674547,0.9348596083571629))
push(move(20.176563349280162,19.58177503856402,20.456295797856068))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub29 inherits .../COPOLYFF



DPDPoly_sub30 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.01612181911496778,0.255017762679841,-0.9668019588655127))
push(move(20.219747656456857,18.76530878734248,18.97538447512162))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01612181911496778,0.255017762679841,-0.9668019588655127,0.04129114773362241,0.48337773727385497,-0.8744375359205757))
push(move(20.19201741118681,19.203950671170894,17.312442144872353))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04129114773362241,0.48337773727385497,-0.8744375359205757,-0.7019343300701134,0.49322995264176145,-0.5138213795532711))
push(move(20.350662222306084,20.29786939875073,16.202959472168867))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7019343300701134,0.49322995264176145,-0.5138213795532711,-0.6503787980782862,-0.4663275728888495,0.5996215587967451))
push(move(18.6372546308536,20.296439725576203,16.174343718215983))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6503787980782862,-0.4663275728888495,0.5996215587967451,0.16811464849251712,-0.9619125133646547,-0.21554995150714054))
push(move(18.84444664793812,19.217898995167786,17.59162609730344))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16811464849251712,-0.9619125133646547,-0.21554995150714054,0.5001697531835408,-0.2048040000416063,-0.841359340334006))
push(move(18.89785605136208,18.80533963622933,15.84021088650266))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5001697531835408,-0.2048040000416063,-0.841359340334006,0.5534283295013245,0.5921850788775547,-0.5856909735177398))
push(move(20.322467822421974,18.612695168359398,15.105376354194526))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5534283295013245,0.5921850788775547,-0.5856909735177398,-0.800001958460977,0.5365506902247832,-0.26853346770544256))
push(move(20.218947368421052,20.218947368421052,14.442105263157893))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.800001958460977,0.5365506902247832,-0.26853346770544256,-0.9173963404137697,0.0025805589524493136,0.3979664499815476))
push(move(17.99197958043232,20.175722685449262,14.323110657905273))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9173963404137697,0.0025805589524493136,0.3979664499815476,-0.4436059384556601,0.03331903245441936,0.8956023746301559))
push(move(17.307452939716455,20.22713715802672,15.705111284535773))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub30 inherits .../COPOLYFF



DPDPoly_sub31 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.012239233768979006,-0.7685146644535311,0.6397151019607281))
push(move(17.320525378459543,20.32336641385191,17.865025094800036))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.012239233768979006,-0.7685146644535311,0.6397151019607281,0.04389680543296743,-0.8496307966071759,-0.525547885477086))
push(move(17.34084669137283,19.047369299196617,18.92717089638176))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04389680543296743,-0.8496307966071759,-0.525547885477086,-0.30013014665446075,-0.12978402282640056,-0.9450280432284368))
push(move(17.39775927278225,18.8284900894533,16.940353938252162))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.30013014665446075,-0.12978402282640056,-0.9450280432284368,-0.6131738302783877,0.6169906849007142,-0.49329539690481455))
push(move(16.337354786958244,18.61343349607787,15.767448351360981))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6131738302783877,0.6169906849007142,-0.49329539690481455,-0.4757573435020234,0.6424282329674867,-0.600783584654383))
push(move(15.933801028457292,20.30156110982287,15.7626065727808))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4757573435020234,0.6424282329674867,-0.600783584654383,-0.9116976446043642,-0.025654345189115458,-0.41006006803366274))
push(move(15.174429092231431,20.18376406341394,14.29891260071588))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9116976446043642,-0.025654345189115458,-0.41006006803366274,-0.9805825887011236,0.00248882097043366,0.19609077618893803))
push(move(12.997894736842104,20.218947368421052,14.442105263157893))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9805825887011236,0.00248882097043366,0.19609077618893803,-0.07662396480873414,0.04085899673349828,0.9962225205258721))
push(move(11.297203607283128,20.193604866427606,15.074255915561109))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07662396480873414,0.04085899673349828,0.9962225205258721,0.6101399643620381,-0.7432464455921444,0.2744338627118276))
push(move(12.884732932506768,20.279289818791973,15.913372616963027))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6101399643620381,-0.7432464455921444,0.2744338627118276,0.03443383840449316,-0.9984491193875776,-0.043745477102252184))
push(move(12.95743597482318,18.17118070458565,15.821009133242267))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub31 inherits .../COPOLYFF



DPDPoly_sub32 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0220647121843833,0.14116397274541398,0.9897403100182149))
push(move(13.010188876079939,17.3161428459519,16.92672055745619))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0220647121843833,0.14116397274541398,0.9897403100182149,-0.3528082288703149,0.6105855132429379,0.709021639062765))
push(move(13.053575024731591,17.59371551740171,18.87286061394763))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3528082288703149,0.6105855132429379,0.709021639062765,-0.9342836106631576,0.3543906647574614,-0.0390050199202356))
push(move(12.10623335333668,18.88056822392647,18.743356264700008))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9342836106631576,0.3543906647574614,-0.0390050199202356,-0.9704914983431574,-0.03348940407008178,0.23879847457361236))
push(move(9.922604331014286,18.781349307418658,18.742147013832742))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9704914983431574,-0.03348940407008178,0.23879847457361236,-0.8774526082844317,-0.0021477008704448917,0.47965853228710387))
push(move(8.668939468172319,18.761955207713125,19.589134448063568))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8774526082844317,-0.0021477008704448917,0.47965853228710387,-0.950086671000368,0.1917540063992998,0.24610103335267747))
push(move(7.221052631578947,18.774736842105263,20.218947368421052))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.950086671000368,0.1917540063992998,0.24610103335267747,-0.5793481359800717,0.620727869249455,-0.5282543418406019))
push(move(5.674784432454187,19.366259258495212,20.36471068842119))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5793481359800717,0.620727869249455,-0.5282543418406019,-0.13739359995375003,-0.41879685090396607,-0.8976258665862242))
push(move(5.7661835526872744,20.333519424273454,18.892385910802762))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13739359995375003,-0.41879685090396607,-0.8976258665862242,-0.8645442854289376,-0.5025448262346088,0.003446180058334525))
push(move(5.433404268751365,18.63049534763288,18.787715262918063))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8645442854289376,-0.5025448262346088,0.003446180058334525,-0.9961218659138662,0.07258584394752544,0.049724475931908346))
push(move(3.1257041518909205,18.798653849410616,18.902911187077017))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub32 inherits .../COPOLYFF



DPDPoly_sub33 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.8077996264383666,-0.5838565388726652,0.08106358949409725))
push(move(3.1845541551348955,18.82701541208621,17.201173535402805))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8077996264383666,-0.5838565388726652,0.08106358949409725,0.3586999775347001,-0.9333834721139641,0.011385082392599465))
push(move(4.43133160372132,17.925877132181718,17.326289036790598))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3586999775347001,-0.9333834721139641,0.011385082392599465,-0.03330075038969858,-0.6591049585849602,-0.7513133258449505))
push(move(4.338283830060509,15.824862422659807,17.23779273872167))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03330075038969858,-0.6591049585849602,-0.7513133258449505,-0.0013329689715284225,0.014492532182162156,-0.9998940892437909))
push(move(4.33017043175547,15.923645071982158,15.043945976450823))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0013329689715284225,0.014492532182162156,-0.9998940892437909,0.000913133318927604,-0.18731911577564678,-0.9822986893265061))
push(move(4.332631578947368,15.886315789473683,12.997894736842104))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.000913133318927604,-0.18731911577564678,-0.9822986893265061,-0.0005580588157586991,-0.4780193296731758,-0.8783491384575759))
push(move(4.3334261129483975,15.255778387385936,11.541662900817176))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0005580588157586991,-0.4780193296731758,-0.8783491384575759,-0.008783683619752897,-0.20593811211218988,-0.9785255954147215))
push(move(4.330915709465993,14.416544582331731,10.297225133364922))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.008783683619752897,-0.20593811211218988,-0.9785255954147215,0.042617826637622896,-0.3408398705678022,-0.9391548879093423))
push(move(4.3027150614365555,14.53574152778114,8.120370506034536))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.042617826637622896,-0.3408398705678022,-0.9391548879093423,-0.6091344190073401,-0.62584114725798,-0.4871120178967107))
push(move(4.474651976299858,13.26700096528805,7.1297567705438025))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6091344190073401,-0.62584114725798,-0.4871120178967107,-0.9822187942798426,-0.14904637442790375,-0.11415523830884647))
push(move(2.8240613569541746,13.016532791688746,6.937922154265762))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub33 inherits .../COPOLYFF



DPDPoly_sub34 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.2535561475105409,-0.9618272857106154,0.10294441472058136))
push(move(1.9143686848406567,13.13400009771128,5.7186681228360365))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2535561475105409,-0.9618272857106154,0.10294441472058136,-0.277185001914447,-0.4448786283921439,0.8516169800524251))
push(move(1.4680681691870787,11.441025907194035,5.899867221436244))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.277185001914447,-0.4448786283921439,0.8516169800524251,-0.0075175004031350955,0.49056657095795153,0.8713712909238208))
push(move(1.4338890065357783,12.362835933783867,7.194883104845979))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0075175004031350955,0.49056657095795153,0.8713712909238208,0.004830583067032316,-0.3740077083524149,0.927413014551881))
push(move(1.4442105263157894,12.997894736842104,8.665263157894737))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.004830583067032316,-0.3740077083524149,0.927413014551881,-4.656366591813648e-06,-0.8727964530098331,0.4880843693376919))
push(move(1.4444372671975076,11.54613725736073,9.220020460486852))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-4.656366591813648e-06,-0.8727964530098331,0.4880843693376919,-0.00015318830270359067,-0.8067419130244323,-0.590903936611547))
push(move(1.4441957897947488,10.23565876587764,10.209958025983171))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00015318830270359067,-0.8067419130244323,-0.590903936611547,4.734253335183521e-05,-0.0001912903476881896,-0.9999999805833434))
push(move(1.444167592788576,10.125939731076864,8.17978653251229))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(4.734253335183521e-05,-0.0001912903476881896,-0.9999999805833434,0.0005010117748504067,-0.5948068103135639,-0.8038685261855981))
push(move(1.4443940718860078,10.234857595186257,6.021713896008295))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0005010117748504067,-0.5948068103135639,-0.8038685261855981,-0.004148979107049019,-0.5272442708710599,0.849703633513482))
push(move(1.4455216380837164,8.518401937652715,6.007234008935291))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004148979107049019,-0.5272442708710599,0.849703633513482,-0.005298172888308504,0.12423441752691812,0.9922387509394063))
push(move(1.4331667158512653,8.808106822619004,8.321056691266548))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub34 inherits .../COPOLYFF



DPDPoly_sub35 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.5022964868483333,-0.8644832173671259,0.019157405628237156))
push(move(1.4126239362589084,7.025952950407095,8.64817805657652))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5022964868483333,-0.8644832173671259,0.019157405628237156,0.9913092514956338,0.1310506144536103,0.011476251587425181))
push(move(2.2610673562413015,5.56572952327846,8.680537380551085))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9913092514956338,0.1310506144536103,0.011476251587425181,0.19083270147646256,0.9696149460759582,-0.15306775099057285))
push(move(2.888421052631579,7.221052631578947,8.665263157894737))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19083270147646256,0.9696149460759582,-0.15306775099057285,0.0003173084927288873,0.4421000497808644,-0.8969656879162533))
push(move(2.8986809207241393,8.805423963277677,8.169104730060056))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0003173084927288873,0.4421000497808644,-0.8969656879162533,0.0059123567215285154,0.644361988123615,-0.7646977653291394))
push(move(2.8894093642119887,8.598048863670174,5.871510085059737))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0059123567215285154,0.644361988123615,-0.7646977653291394,-0.04055190611649362,0.9166287380872096,-0.39767738108040396))
push(move(2.916081624037246,10.701850770671651,5.918516755515785))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04055190611649362,0.9166287380872096,-0.39767738108040396,0.6067866906570654,0.35579725216486296,-0.7107870478514502))
push(move(2.7561223168977547,11.610847759782349,4.5644138475710205))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6067866906570654,0.35579725216486296,-0.7107870478514502,0.6013153560960386,-0.355805887459101,-0.7154173697727334))
push(move(4.466450978504094,11.610929965475005,4.102421456280471))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6013153560960386,-0.355805887459101,-0.7154173697727334,-0.050524242986148646,-0.9124391779417212,-0.40608133105045924))
push(move(4.293691358305892,10.701048747065158,2.7350848801722454))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.050524242986148646,-0.9124391779417212,-0.40608133105045924,0.002755085486457206,-0.9999232699319768,0.012077406696209686))
push(move(4.299492089397047,8.595747104275855,2.760513415463653))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub35 inherits .../COPOLYFF



DPDPoly_sub36 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.3594451418012857,-0.9313549956640781,0.058112495102332726))
push(move(5.149363466568634,8.84690675188229,1.3427643108092442))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3594451418012857,-0.9313549956640781,0.058112495102332726,0.2274355350016504,-0.5770075994031376,0.7844331122852612))
push(move(5.776842105263158,7.221052631578947,1.4442105263157894))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2274355350016504,-0.5770075994031376,0.7844331122852612,-0.02671214684635129,0.40902036034395756,0.9121342039606661))
push(move(5.824406093254797,7.1343127831511275,3.6710099324655197))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02671214684635129,0.40902036034395756,0.9121342039606661,0.7522915087721633,0.5676997383321731,0.3343269252197378))
push(move(5.6915696397320525,8.526757290196246,4.355991931021643))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7522915087721633,0.5676997383321731,0.3343269252197378,0.5440827963260927,-0.8388172609659418,-0.018960839843595836))
push(move(7.346850203285122,8.283190728484058,4.347601456083914))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5440827963260927,-0.8388172609659418,-0.018960839843595836,-0.5757399633991921,-0.8126681093472458,-0.08996687498779714))
push(move(7.334825592544622,5.993335048743701,4.298725806906518))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5757399633991921,-0.8126681093472458,-0.08996687498779714,-0.5869911773787952,-0.47835088143909926,-0.6531629137557433))
push(move(5.6382152736300375,5.871419432204071,4.08060497349047))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5869911773787952,-0.47835088143909926,-0.6531629137557433,0.14612453470248435,-0.966664515816912,0.21025540235256118))
push(move(5.835400167628919,4.771423201851038,2.630269589437033))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14612453470248435,-0.966664515816912,0.21025540235256118,0.7974211444914765,-0.19089440455256282,0.5724323930635182))
push(move(5.8665712110270025,4.360765645643194,4.409181345656525))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7974211444914765,-0.19089440455256282,0.5724323930635182,0.9969864711166653,-0.06449218209857115,-0.04311304742770483))
push(move(8.174468083426959,4.211474446944346,4.309380124475874))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub36 inherits .../COPOLYFF



DPDPoly_sub37 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.08139225898679904,0.9323559538859842,-0.3522608059809981))
push(move(8.665263157894737,5.776842105263158,4.332631578947368))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08139225898679904,0.9323559538859842,-0.3522608059809981,0.535424921088958,0.5711482054171946,-0.6221815501327577))
push(move(8.529361978896185,7.333602845863504,3.7444594426320204))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.535424921088958,0.5711482054171946,-0.6221815501327577,0.9512021744919855,-0.06824695927794466,0.3009265288920755))
push(move(10.01182631370178,7.213247284827684,2.767880446467886))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9512021744919855,-0.06824695927794466,0.3009265288920755,0.5033731184210355,0.04473471835017487,0.8629103711424568))
push(move(10.517327465997196,7.190970077265596,4.3733810006699345))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5033731184210355,0.04473471835017487,0.8629103711424568,0.36631967975164903,-0.7140512700138759,0.5966076399261243))
push(move(11.593615775522158,7.353820755031595,5.4794724676114805))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.36631967975164903,-0.7140512700138759,0.5966076399261243,-0.6447145532301002,-0.5760522982544993,0.5025006413220003))
push(move(11.310743406793248,5.644398349099728,5.665580241068422))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6447145532301002,-0.5760522982544993,0.5025006413220003,0.20509872423779058,0.07830179064727666,0.9756040912672829))
push(move(9.859645396581563,5.804518638475432,6.830956194922386))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20509872423779058,0.07830179064727666,0.9756040912672829,0.4350563034411093,-0.008210689223509945,0.9003658131107779))
push(move(11.660139433289897,5.777789400757425,7.32757104178865))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4350563034411093,-0.008210689223509945,0.9003658131107779,-0.4868814868407077,-0.0002974339499019672,0.8734679898569994))
push(move(10.741679789366472,5.78787226368136,8.656360417249568))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4868814868407077,-0.0002974339499019672,0.8734679898569994,-0.39893813111489035,-0.006960310489525556,0.9169514281686071))
push(move(10.109473684210526,5.776842105263158,10.109473684210526))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub37 inherits .../COPOLYFF



DPDPoly_sub38 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9066414039566797,-0.4207361083229868,0.03134472498983968))
push(move(11.820480580004293,5.11424061876634,10.063031034867526))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9066414039566797,-0.4207361083229868,0.03134472498983968,-0.45274153814500856,-0.890030623753027,0.05357787248379267))
push(move(10.24369768179802,4.3825185758876914,10.117544126920533))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.45274153814500856,-0.890030623753027,0.05357787248379267,0.6130646995262414,-0.5989166357312298,-0.5152189220507966))
push(move(10.590173858542524,2.6956185873161593,10.208626724868736))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6130646995262414,-0.5989166357312298,-0.5152189220507966,0.45734013576815774,-0.649098687178067,-0.6078740778477668))
push(move(11.617269052558,3.040645940017409,8.963196206465035))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.45734013576815774,-0.649098687178067,-0.6078740778477668,-0.024731439165461788,-0.5946748533898393,0.8035858228357305))
push(move(11.562580750531712,1.3154903465858112,8.916151176515834))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.024731439165461788,-0.5946748533898393,0.8035858228357305,-0.0022233562640982486,0.024567026563218346,0.9996957126509872))
push(move(11.551643707490465,1.462664885393048,11.095526499180885))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0022233562640982486,0.024567026563218346,0.9996957126509872,0.003093925051887745,0.19498704115453777,0.9808009387279215))
push(move(11.553088685930753,1.420373134358973,13.184102489138073))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.003093925051887745,0.19498704115453777,0.9808009387279215,0.00018772333456214095,0.9180122372758736,0.3965520104244776))
push(move(11.562533202776738,2.148948628511239,14.547590469681156))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.00018772333456214095,0.9180122372758736,0.3965520104244776,-0.142325748022737,0.9893877623745675,-0.02924443730378393))
push(move(11.553684210526315,4.332631578947368,14.442105263157893))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.142325748022737,0.9893877623745675,-0.02924443730378393,-0.3218817423419931,0.946774860797849,-0.0030833274390284706))
push(move(11.024491213311304,5.889186550434715,14.437036086891533))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub38 inherits .../COPOLYFF



DPDPoly_sub39 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9666055291301023,0.24952326854362875,0.05841138168558484))
push(move(8.836641849987556,5.793780926947918,14.448619725244258))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9666055291301023,0.24952326854362875,0.05841138168558484,-0.6582859889801445,0.5635697026769149,-0.49904784032904775))
push(move(7.097934542739873,6.242617517749934,14.553688745752096))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6582859889801445,0.5635697026769149,-0.49904784032904775,0.033689699156602665,0.8269708634633209,-0.5612345277630975))
push(move(7.233230744599599,7.166488131809316,13.233070765219823))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.033689699156602665,0.8269708634633209,-0.5612345277630975,0.07331112216128485,0.2476117686857825,-0.9660817208578949))
push(move(7.205193245140169,8.875464469740134,12.766872932696224))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07331112216128485,0.2476117686857825,-0.9660817208578949,-0.5874548145854803,-0.6314466494570614,-0.5061343395876138))
push(move(7.371476869398689,7.63342093090287,11.411286427312477))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5874548145854803,-0.6314466494570614,-0.5061343395876138,-0.5282445796959342,-0.15913753094383112,-0.8340461079982131))
push(move(5.685277135551968,7.241728715046393,11.457356494571838))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5282445796959342,-0.15913753094383112,-0.8340461079982131,-0.43597760245957484,-0.0066642064910329485,-0.899932841108405))
push(move(5.965371621178782,7.2098214732848085,9.191184878161264))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43597760245957484,-0.0066642064910329485,-0.899932841108405,-0.6855585422944739,0.05092056301415825,0.7262345222787177))
push(move(4.332631578947368,7.221052631578947,8.665263157894737))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6855585422944739,0.05092056301415825,0.7262345222787177,0.0013136617752335811,-0.39759413642629265,0.9175604486747294))
push(move(4.369946418732882,7.32832331454788,10.881270827425155))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0013136617752335811,-0.39759413642629265,0.9175604486747294,-0.021576191210899123,-0.8912136331545402,0.45307033455338425))
push(move(4.336800691139273,5.959225125552933,11.577285510603605))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub39 inherits .../COPOLYFF



DPDPoly_sub40 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7635231070011098,-0.6457413042642361,-0.007115689881870728))
push(move(4.4435103687700375,3.8078029671492,11.562462231717403))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7635231070011098,-0.6457413042642361,-0.007115689881870728,-0.951542198616262,0.3071787963557288,-0.01444407567053048))
push(move(3.1231360308668794,2.691110833988424,11.550156940324976))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.951542198616262,0.3071787963557288,-0.01444407567053048,-0.5588428029642566,0.8278132032192406,0.049193720645561045))
push(move(2.6534109954124694,4.38568650364896,11.535289153272593))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5588428029642566,0.8278132032192406,0.049193720645561045,-0.4987341640574742,0.6021710612840702,-0.6234214036700286))
push(move(1.3355205091763882,5.339103656452468,11.707516860018414))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4987341640574742,0.6021710612840702,-0.6234214036700286,-0.012766186066149408,0.8740638564381977,-0.4856432840693981))
push(move(1.4462802269277455,5.843174817770816,10.026366740619702))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.012766186066149408,0.8740638564381977,-0.4856432840693981,0.45488966508166784,0.8901619016598636,0.026214145707677765))
push(move(1.29447383626524,8.149450696106502,10.146044942767482))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.45488966508166784,0.8901619016598636,0.026214145707677765,0.7036340754539246,-0.7099276908873088,-0.03002934517291871))
push(move(2.888421052631579,8.665263157894737,10.109473684210526))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7036340754539246,-0.7099276908873088,-0.03002934517291871,0.0009334895743883725,-0.9998752084598033,0.015770101606505))
push(move(2.8467646872063592,6.583275466910561,10.07979704574572))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0009334895743883725,-0.9998752084598033,0.015770101606505,0.02451873959058594,-0.7591940514668536,-0.6504023551819549))
push(move(2.8923765194828155,4.428501065476652,10.176296191774187))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02451873959058594,-0.7591940514668536,-0.6504023551819549,0.013099468625487038,-0.03518085008365247,-0.9992951074177845))
push(move(2.918632028257582,4.357987432864265,8.17339040898992))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub40 inherits .../COPOLYFF



DPDPoly_sub41 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9832051445375086,0.14304241928563863,-0.11334244588806179))
push(move(2.7486733966189205,4.364908142843979,5.997094108260276))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9832051445375086,0.14304241928563863,-0.11334244588806179,0.8508011713932152,0.5195241336151389,-0.07894327930465027))
push(move(4.4139324701265705,4.607179746013777,5.805125486577129))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8508011713932152,0.5195241336151389,-0.07894327930465027,0.9396203222015784,0.34214138817784756,-0.0072746547366431095))
push(move(5.1638685285338335,5.839697083678296,5.772995423062449))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9396203222015784,0.34214138817784756,-0.0072746547366431095,0.596792400853121,-0.8006591111974726,-0.05276189856743932))
push(move(7.311724150677795,5.6623447363909385,5.782690431186528))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.596792400853121,-0.8006591111974726,-0.05276189856743932,-0.616777426227366,-0.5343323034618956,0.5779918649716888))
push(move(6.380939946591077,4.206869121303842,5.665395194545682))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.616777426227366,-0.5343323034618956,0.5779918649716888,-0.2234419313455277,-0.15435560397917023,0.9624178151077659))
push(move(5.776842105263157,4.332631578947368,7.221052631578947))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2234419313455277,-0.15435560397917023,0.9624178151077659,0.5218020042788032,-0.6097976701034358,0.5965479610786087))
push(move(5.659135068555753,3.7082401162941974,8.77438136141981))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5218020042788032,-0.6097976701034358,0.5965479610786087,0.9735832725442661,-0.22831834077413993,-0.0025192634123923172))
push(move(7.039792170557398,2.856700093521498,8.664915016578185))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9735832725442661,-0.22831834077413993,-0.0025192634123923172,0.9404558856186703,0.008902819987945064,-0.33979915685808393))
push(move(9.20001404669762,2.8778564850526025,8.765218912650502))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9404558856186703,0.008902819987945064,-0.33979915685808393,0.6427559224998933,0.005656377240302545,-0.7660501481546925))
push(move(10.260594631515973,2.8871898006572896,7.501196465420192))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub41 inherits .../COPOLYFF



DPDPoly_sub42 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.6892871351694799,0.10927019468222045,-0.716200579337912))
push(move(8.265663859873712,2.870345133742069,7.326147182448255))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6892871351694799,0.10927019468222045,-0.716200579337912,-0.39626440019874254,-0.6381019443635206,-0.6601518262753086))
push(move(7.181598122487759,3.0421981513431624,6.19975373980073))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.39626440019874254,-0.6381019443635206,-0.6601518262753086,0.7367653149601782,-0.6523266466359966,0.177895522035449))
push(move(7.328436405955351,1.361133959697079,5.764784579526433))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7367653149601782,-0.6523266466359966,0.177895522035449,-0.07342062594414456,0.0568012584569423,0.9956821926316034))
push(move(8.945822916857141,1.4801663609551161,6.625734285314314))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07342062594414456,0.0568012584569423,0.9956821926316034,-0.481126128689861,-0.015084789328499834,0.8765215898212787))
push(move(7.221052631578947,1.4442105263157892,7.221052631578947))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.481126128689861,-0.015084789328499834,0.8765215898212787,0.8811404449506718,0.0005092543744751835,0.47285437180184153))
push(move(7.752231812062132,1.4427435953089578,8.80023346626787))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8811404449506718,0.0005092543744751835,0.47285437180184153,0.7448812667428159,0.009281404783153323,-0.6671324860781922))
push(move(10.018981975069481,1.4458275872120516,8.72253077804653))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7448812667428159,0.009281404783153323,-0.6671324860781922,0.02504765921131586,-0.03192446512031024,-0.9991763824744938))
push(move(10.076573490492425,1.471705467401942,6.718500562436167))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.02504765921131586,-0.03192446512031024,-0.9991763824744938,0.03877829438174765,0.5992141697563783,-0.7996490621816652))
push(move(10.122607272010109,1.3137520846729436,4.588813193642272))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03877829438174765,0.5992141697563783,-0.7996490621816652,0.032017491498512664,0.9991807060639274,0.024754734248908866))
push(move(10.177782131224175,3.035612611724209,4.631472343786143))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub42 inherits .../COPOLYFF



DPDPoly_sub43 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.228212182777546,0.9722449382265634,-0.0515652957398067))
push(move(9.110356642426325,2.7368068337582745,5.874390758322456))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.228212182777546,0.9722449382265634,-0.0515652957398067,-0.15154087964951818,0.9882996576635383,-0.01729590868336133))
push(move(8.695967369677753,4.502215971787984,5.780758134767418))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15154087964951818,0.9882996576635383,-0.01729590868336133,0.4612781855328799,0.8872546435020352,-0.0012779419275644702))
push(move(8.5033421267054,6.695555387094233,5.8051099962095165))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4612781855328799,0.8872546435020352,-0.0012779419275644702,0.5778719130605922,0.1477330058555848,0.8026450093762281))
push(move(10.109473684210526,7.221052631578947,5.776842105263158))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5778719130605922,0.1477330058555848,0.8026450093762281,0.00793610938930859,0.4058817000699168,0.9138911662315787))
push(move(10.058544304140812,7.093142961767711,7.965234477218321))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.00793610938930859,0.4058817000699168,0.9138911662315787,0.2686062551194725,0.8443767232785182,-0.4635500284717126))
push(move(10.13547487069311,8.55084853731632,8.771036548951951))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2686062551194725,0.8443767232785182,-0.4635500284717126,0.5972508291047192,-0.4610155179733498,-0.6563201500194012))
push(move(10.578455442211979,8.727508710120354,7.067992442596102))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5972508291047192,-0.4610155179733498,-0.6563201500194012,0.8668446958084056,-0.4789007842533696,0.1386878227903958))
push(move(11.49856044225981,7.498688255245551,7.273139043876945))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8668446958084056,-0.4789007842533696,0.1386878227903958,0.2864712222855349,-0.26271801112946125,0.9213650120502795))
push(move(13.20673114752594,7.275480102694769,7.488494335294366))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2864712222855349,-0.26271801112946125,0.9213650120502795,-0.6757604417685444,-0.11852609415481657,0.7275296491176048))
push(move(11.97711885136243,7.0598102679711285,8.812305773616075))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub43 inherits .../COPOLYFF



DPDPoly_sub44 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.5498673904211826,-0.0805861260301676,0.831355356777623))
push(move(11.605980373402875,8.74846397211702,8.797263394676634))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5498673904211826,-0.0805861260301676,0.831355356777623,-0.4769644535366954,-0.026517643506663365,0.878522466784598))
push(move(10.725003832550762,8.619351957497733,10.129229208964738))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4769644535366954,-0.026517643506663365,0.878522466784598,-0.15898024661693552,0.20636672427459313,0.9654729702574757))
push(move(10.109473684210526,8.665263157894737,11.553684210526313))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.15898024661693552,0.20636672427459313,0.9654729702574757,-0.5318869750089565,0.6257428150936077,0.5705630334805689))
push(move(10.233552304986947,9.257288078753476,13.113770849523904))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5318869750089565,0.6257428150936077,0.5705630334805689,-0.8752182713030086,-0.40927567077213545,-0.25784957415398624))
push(move(8.784091965787612,10.224519403162995,12.97544080415287))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8752182713030086,-0.40927567077213545,-0.25784957415398624,0.0036593664381578536,-0.5111178676843434,-0.8595028413979103))
push(move(8.678240838676862,8.52998248596007,12.655557838650843))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0036593664381578536,-0.5111178676843434,-0.8595028413979103,-0.5399726673517767,-0.04584731421692521,-0.8404329493136867))
push(move(8.795389317328008,8.64657460660025,10.321947115193595))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5399726673517767,-0.04584731421692521,-0.8404329493136867,-0.6519379391898372,-0.5839300424228504,-0.48373818228557897))
push(move(7.106031945431731,8.396491367795205,10.208515169681082))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6519379391898372,-0.5839300424228504,-0.48373818228557897,0.6339076943932139,-0.44606802672917856,-0.6318103754442599))
push(move(7.096028857741127,7.124485515587351,9.06102105098862))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6339076943932139,-0.44606802672917856,-0.6318103754442599,0.9563485872652389,0.06568293631432731,-0.28475099914295277))
push(move(8.75204885177328,7.2382225537883595,8.567944202044021))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub44 inherits .../COPOLYFF



DPDPoly_sub45 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.033406760812477454,-0.9970471818816194,0.06914409182235699))
push(move(8.590680797956024,6.558592132632659,7.066684790503965))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.033406760812477454,-0.9970471818816194,0.06914409182235699,-0.584440559760242,-0.7638245515151469,0.2738636277599119))
push(move(8.665263157894737,4.332631578947368,7.221052631578947))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.584440559760242,-0.7638245515151469,0.2738636277599119,-0.07511648609363522,-0.05238454951933306,0.9957978572424232))
push(move(6.935861857959731,4.395854941360422,7.842118169698443))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07511648609363522,-0.05238454951933306,0.9957978572424232,0.6262758233489255,0.6163424887484626,0.47738928522954577))
push(move(8.552305025293808,4.253857115463165,8.718506416383198))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6262758233489255,0.6163424887484626,0.47738928522954577,0.15703706778498241,0.2140042401619311,0.9641273487118853))
push(move(8.60050946031675,6.034099637825835,9.111023817051752))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15703706778498241,0.2140042401619311,0.9641273487118853,-0.5967614155907177,-0.6363905124622748,0.4887565124989804))
push(move(8.795528275563544,4.585312660309168,10.211772883563587))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5967614155907177,-0.6363905124622748,0.4887565124989804,-0.43266159271608323,-0.1839440277427913,0.8825919446981948))
push(move(7.040578921041339,4.370578891746163,10.388630227583839))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43266159271608323,-0.1839440277427913,0.8825919446981948,0.9335672893271146,-0.04828491196074132,0.3551347400288612))
push(move(8.08614693485187,4.283722541812764,11.658848999335616))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9335672893271146,-0.04828491196074132,0.3551347400288612,0.8799101281426654,-0.46805034021319625,-0.08177435672794627))
push(move(10.14089922539782,4.210227629809973,11.568011144076133))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8799101281426654,-0.46805034021319625,-0.08177435672794627,0.4639574331715155,-0.8795814158994755,-0.10526173573133092))
push(move(10.888383282129311,2.793129771310712,11.398423454306398))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub45 inherits .../COPOLYFF



DPDPoly_sub46 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.35134833468004484,0.9360874415950012,-0.017165354807997177))
push(move(11.553684210526315,2.888421052631579,12.997894736842104))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.35134833468004484,0.9360874415950012,-0.017165354807997177,0.9918429041286488,0.12675642159826175,-0.01343365598977091))
push(move(12.191853815444935,4.588678301085508,12.966716539552275))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9918429041286488,0.12675642159826175,-0.01343365598977091,0.24285001835764972,-0.962895686470405,-0.11771051592944731))
push(move(13.030550797775167,3.07716296226107,12.977891853730975))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.24285001835764972,-0.962895686470405,-0.11771051592944731,-0.11150880463129748,-0.30335213780898546,-0.9463314783818709))
push(move(13.038591797545728,1.23137836736769,12.556298762340672))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11150880463129748,-0.30335213780898546,-0.9463314783818709,0.6535087630560324,0.6100000135507088,-0.4481364525198876))
push(move(12.854770484076235,2.5989645444624228,11.486113292538779))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6535087630560324,0.6100000135507088,-0.4481364525198876,0.8761854918258618,-0.4818700488864652,0.010011987816035222))
push(move(14.507578217546298,2.602563861370506,11.548957468276798))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8761854918258618,-0.4818700488864652,0.010011987816035222,0.9595165215390924,0.2695269711414972,-0.08175118788623709))
push(move(15.405307338020664,1.1962623427450754,11.515257742137946))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9595165215390924,0.2695269711414972,-0.08175118788623709,0.5117052272741535,0.5927432330898202,-0.6219431002965898))
push(move(15.831319142572005,2.974401004441196,11.436174216873379))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5117052272741535,0.5927432330898202,-0.6219431002965898,0.6197110012744241,0.5614370344042245,-0.5484038031403867))
push(move(16.705466249718242,2.702325513050099,9.935002506663873))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6197110012744241,0.5614370344042245,-0.5484038031403867,0.356216653067122,0.9290981807863103,0.09942970651282329))
push(move(17.330526315789474,4.332631578947368,10.109473684210526))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub46 inherits .../COPOLYFF



DPDPoly_sub47 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9942352758608867,0.015566871731125849,0.10608434728240237))
push(move(17.834290305455287,4.2944330934366715,8.489369890836443))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9942352758608867,0.015566871731125849,0.10608434728240237,0.785386992433681,-0.01301282309400388,-0.6188682723739369))
push(move(20.130538481367342,4.330385751409206,8.734378285583967))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.785386992433681,-0.01301282309400388,-0.6188682723739369,0.016873342198048,0.330243284722724,-0.9437450202351341))
push(move(20.19662246173361,4.255292375885862,6.627902315725293))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.016873342198048,0.330243284722724,-0.9437450202351341,-0.08206125459055938,0.9610513407375851,-0.26390579940864))
push(move(20.184315635304834,5.38290657099002,5.726561539189893))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08206125459055938,0.9610513407375851,-0.26390579940864,-0.8437456216226448,0.5356511602556194,0.034222222450120486))
push(move(19.92969649679451,7.3813664014700295,5.769478806218283))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8437456216226448,0.5356511602556194,0.034222222450120486,-0.8756157578994554,-0.4829798950028563,0.005240757692573622))
push(move(18.835379101090602,6.239277734461614,5.781274245202156))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8756157578994554,-0.4829798950028563,0.005240757692573622,-0.8936085389097546,0.44464383582247335,-0.06128326405023733))
push(move(17.273227908138892,5.916087929203657,5.785378369543268))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8936085389097546,0.44464383582247335,-0.06128326405023733,-0.5815455097682969,0.5471841747282788,0.6019919426331751))
push(move(16.54932700466416,7.376776906397922,5.624497840145838))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5815455097682969,0.5471841747282788,0.6019919426331751,-0.20824594371919966,0.7779639520430802,0.5927948348678587))
push(move(15.886315789473683,7.221052631578947,7.221052631578947))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.20824594371919966,0.7779639520430802,0.5927948348678587,0.0547788751521164,0.9982319018683466,-0.02307260127017343))
push(move(16.00620422028168,9.405771758526123,7.170556195621502))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub47 inherits .../COPOLYFF



DPDPoly_sub48 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.008197005585280932,-0.969952399855369,0.2431566390503152))
push(move(14.568279713323747,10.217448610121327,7.245579783414894))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.008197005585280932,-0.969952399855369,0.2431566390503152,-0.49668592322898336,-0.6480318226700078,0.5773715012651386))
push(move(14.582388076589256,8.548004730275249,7.664091416529076))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.49668592322898336,-0.6480318226700078,0.5773715012651386,-0.5680302541808111,0.7051217342543455,0.4244348833654312))
push(move(13.288446248004643,8.547635203989316,8.73331948909604))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5680302541808111,0.7051217342543455,0.4244348833654312,0.8067433531106529,0.5903853093194067,-0.02470523733156399))
push(move(13.2297509232661,10.22709461738624,8.674788273221004))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8067433531106529,0.5903853093194067,-0.02470523733156399,0.8557890692007479,-0.5173151972122052,-0.003171083381839579))
push(move(15.582951651325246,10.226784188671042,8.663053895547584))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8557890692007479,-0.5173151972122052,-0.003171083381839579,0.9063407141926613,-0.42249955246837956,0.006374791036260624))
push(move(15.991848437794205,8.557436670268585,8.6645534597108))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9063407141926613,-0.42249955246837956,0.006374791036260624,0.40792201202287465,0.9130167497582586,0.00021625927781351214))
push(move(17.428872374427744,9.366290262722208,8.676037267799336))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.40792201202287465,0.9130167497582586,0.00021625927781351214,-0.580617578067367,0.7816494895935994,-0.2278317437436024))
push(move(17.330526315789474,11.553684210526315,8.665263157894737))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.580617578067367,0.7816494895935994,-0.2278317437436024,-0.8724180052693198,0.002612267388660994,-0.4887535167556252))
push(move(15.828898813283091,11.520235586931573,8.048214790235708))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8724180052693198,0.002612267388660994,-0.4887535167556252,-0.7992962348410476,0.028200313026375053,-0.6002751629995524))
push(move(14.653665647278684,11.56169949194658,7.165609256098458))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub48 inherits .../COPOLYFF



DPDPoly_sub49 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.07738360163348941,-0.8232595077268859,-0.5623660383909351))
push(move(12.888158536779775,11.664495088400455,6.739850243263877))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07738360163348941,-0.8232595077268859,-0.5623660383909351,0.037807852991024044,-0.5636096316426741,-0.825175586994561))
push(move(13.011634925977427,10.350869084428577,5.842516359054362))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.037807852991024044,-0.5636096316426741,-0.825175586994561,-0.019270750175303823,-0.8717027910042973,-0.4896558815566291))
push(move(13.004949889399947,9.923461783892728,4.190819676066121))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.019270750175303823,-0.8717027910042973,-0.4896558815566291,-0.03229369902757877,-0.9988960326927071,0.03411499485396544))
push(move(12.953379775993627,7.715726374917936,4.36229495817256))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03229369902757877,-0.9988960326927071,0.03411499485396544,-0.4578791797284123,-0.8889912505631351,-0.006419750262249739))
push(move(12.869667695200851,5.738966010768746,4.333731497811718))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4578791797284123,-0.8889912505631351,-0.006419750262249739,-0.8910136056490715,-0.45397646247193324,-0.0003550629663507641))
push(move(11.569938570654157,5.029718402367639,4.342898253902117))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8910136056490715,-0.45397646247193324,-0.0003550629663507641,-0.7670149453801859,0.5225166266115597,-0.3723767560924102))
push(move(10.109473684210526,4.332631578947368,4.332631578947368))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7670149453801859,0.5225166266115597,-0.3723767560924102,-0.5206635442859919,0.5916094140574149,-0.6155548512116454))
push(move(10.251266823123338,5.92804237542431,3.7026985933168315))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5206635442859919,0.5916094140574149,-0.6155548512116454,-0.9568467270415603,-0.18978529915385103,-0.22005881299083896))
push(move(8.866224060605239,5.745287005700691,2.86279881366944))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9568467270415603,-0.18978529915385103,-0.22005881299083896,-0.9678502821015262,-0.24280858247131326,0.06564924762910532))
push(move(7.115587021954002,5.306097488853399,2.9815444570653913))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub49 inherits .../COPOLYFF



DPDPoly_sub50 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.1492359764654218,-0.979572166914812,-0.13478498853445028))
push(move(7.196610802605553,4.387119223798768,1.7156983356744249))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1492359764654218,-0.979572166914812,-0.13478498853445028,-0.9381724282523931,-0.28950713316031707,-0.18978439007542935))
push(move(6.935529797093869,2.673405866157853,1.4798986232464457))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9381724282523931,-0.28950713316031707,-0.18978439007542935,-0.8394360189175083,0.5433439355632729,-0.011159651900409644))
push(move(5.817387590626775,3.961509873040147,1.436693082289545))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8394360189175083,0.5433439355632729,-0.011159651900409644,-0.35758924397914565,0.9338717419550744,0.00367452965946948))
push(move(4.218666787167714,4.431956853883127,1.4437800331828776))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.35758924397914565,0.9338717419550744,0.00367452965946948,0.9126240861030326,0.4087997802610328,0.00013085540045712474))
push(move(5.067595073565031,5.919650549257372,1.4443978298142002))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9126240861030326,0.4087997802610328,0.00013085540045712474,0.9994852499619474,-0.032081644137065074,-5.672712019525513e-05))
push(move(7.221052631578947,5.776842105263158,1.4442105263157894))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9994852499619474,-0.032081644137065074,-5.672712019525513e-05,0.9999858996411688,-0.005310344133469663,2.7641029906101496e-05))
push(move(9.314136240154726,5.783344363122945,1.444156811698945))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9999858996411688,-0.005310344133469663,2.7641029906101496e-05,0.9934070783075215,-0.11463900030243436,0.0005257168174384167))
push(move(11.380351206561228,5.754754487032809,1.4443254952331919))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9934070783075215,-0.11463900030243436,0.0005257168174384167,0.33396700416107994,-0.9425650889427011,-0.006090421833601865))
push(move(13.20251868568719,5.334625719896823,1.4462145663585266))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.33396700416107994,-0.9425650889427011,-0.006090421833601865,-0.7706827169675668,-0.6371821624568278,-0.00685868896582804))
push(move(11.908330780919403,4.2646219042797755,1.4346969442467121))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub50 inherits .../COPOLYFF



DPDPoly_sub51 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.7682587565227397,0.0010539819314523994,0.6401385569923295))
push(move(9.753651153752015,4.324152366080993,1.3760633874216717))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7682587565227397,0.0010539819314523994,0.6401385569923295,0.3484734743988754,-0.010284301200788047,0.9372622209334952))
push(move(8.46936198975608,4.325914295329595,2.446175514645969))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3484734743988754,-0.010284301200788047,0.9372622209334952,0.9671885184994878,0.21379808530150132,0.13724703422725634))
push(move(10.307669843848451,4.307801924803801,2.866164718130381))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9671885184994878,0.21379808530150132,0.13724703422725634,0.3932371426744014,0.9194102527732844,0.007024010011209968))
push(move(11.653358242443957,5.029740167340485,2.897994404462888))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3932371426744014,0.9194102527732844,0.007024010011209968,-0.017723209951242998,0.9998415020601534,-0.0016907356743541741))
push(move(11.553684210526315,7.221052631578947,2.888421052631579))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.017723209951242998,0.9998415020601534,-0.0016907356743541741,-0.014427354391806108,0.9998949227106599,-0.0014124385638492947))
push(move(11.57798540376066,9.281841928306182,2.8908040846737655))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.014427354391806108,0.9998949227106599,-0.0014124385638492947,0.6722236731356613,0.7394801770128759,-0.03583854183703883))
push(move(11.49256569066139,11.456901841135835,2.882437547126811))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6722236731356613,0.7394801770128759,-0.03583854183703883,0.9291970086359835,0.0740770548928649,0.362084947326369))
push(move(13.586556966994726,11.491372646251618,2.7837202688571163))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9291970086359835,0.0740770548928649,0.362084947326369,0.47261430791841774,-0.6060623465338032,0.639784454378766))
push(move(14.527322539036476,11.698837456031521,4.065006758370048))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.47261430791841774,-0.6060623465338032,0.639784454378766,0.11297621455343443,-0.9824618988372751,0.14834079775379477))
push(move(14.7180293349421,10.040416154103443,4.315409892813275))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub51 inherits .../COPOLYFF



DPDPoly_sub52 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.045362922142396934,-0.21126694297037565,0.9763751758943152))
push(move(15.999262706934806,9.179424777875477,4.186096240610185))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.045362922142396934,-0.21126694297037565,0.9763751758943152,-0.4422823015114755,0.44874327497143734,0.7765409447914651))
push(move(15.921502573014779,8.817275581959876,5.85977731863696))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4422823015114755,0.44874327497143734,0.7765409447914651,-0.4754121612164744,0.8793594063004132,-0.026651670087735238))
push(move(15.108006848628504,10.08370033067752,5.750926359054675))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4754121612164744,0.8793594063004132,-0.026651670087735238,0.5421032660978587,0.7695472609784786,-0.33752194300008886))
push(move(14.442105263157893,11.553684210526315,5.776842105263158))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5421032660978587,0.7695472609784786,-0.33752194300008886,0.580955634707071,0.5284685797854226,-0.6190407988829839))
push(move(16.018355182476387,11.375992981654646,5.184129297197893))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.580955634707071,0.5284685797854226,-0.6190407988829839,0.16915975708771516,0.8750855103533478,0.4534427484828113))
push(move(15.90061054089293,12.880419277177003,4.2227229636881))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.16915975708771516,0.8750855103533478,0.4534427484828113,0.9534259909671036,0.07906587745360354,0.29107982886295675))
push(move(16.323965008654348,12.95695251549498,6.003334538037958))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9534259909671036,0.07906587745360354,0.29107982886295675,0.29576560738120367,0.016744592624464826,-0.9551137754782246))
push(move(17.407780731421138,13.005406150531643,4.682860242598758))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.29576560738120367,0.016744592624464826,-0.9551137754782246,-0.2976517995346851,-0.04928701347940229,-0.9534013827009298))
push(move(17.40298658607843,13.018040675497595,2.5188578209472863))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2976517995346851,-0.04928701347940229,-0.9534013827009298,-0.6608499077460287,-0.11802448717499596,-0.7411798836039363))
push(move(16.37073814094708,12.833686267717855,1.3611338454347892))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub52 inherits .../COPOLYFF



DPDPoly_sub53 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.8789547593017746,0.47690342472288333,-0.0012863080286766367))
push(move(16.03682769488577,14.495850469979096,1.4399008702826124))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8789547593017746,0.47690342472288333,-0.0012863080286766367,0.8916067433938436,0.4528083981806646,0.001403449922650169))
push(move(17.30177143684221,15.182183863406559,1.438049685936793))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8916067433938436,0.4528083981806646,0.001403449922650169,0.8210358823650823,-0.49459703091285256,0.285085700941281))
push(move(18.774736842105263,15.886315789473683,1.4442105263157892))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8210358823650823,-0.49459703091285256,0.285085700941281,-0.02579438096498773,-0.4580207856361345,0.888567166755497))
push(move(18.767084214365724,14.2994704952233,1.9468456219623445))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02579438096498773,-0.4580207856361345,0.888567166755497,0.6390696607399596,0.08757888259453284,0.7641465226284853))
push(move(18.694084312863005,14.454200211386276,4.2225361429581625))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6390696607399596,0.08757888259453284,0.7641465226284853,0.6467766815071121,-0.4495651299006719,-0.6160934330408333))
push(move(20.3736450430611,14.519635542699305,3.8678378800164226))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6467766815071121,-0.4495651299006719,-0.6160934330408333,-0.04844231089559406,-0.9211317081032059,-0.38622495885424746))
push(move(20.200417151438945,13.407170011302302,2.7876641131597455))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04844231089559406,-0.9211317081032059,-0.38622495885424746,0.009695225200197468,-0.8856003189729585,-0.4643469367222224))
push(move(20.215167324351356,11.506177905510434,2.6043133029188263))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.009695225200197468,-0.8856003189729585,-0.4643469367222224,0.010771688091964719,-0.9403857426893084,-0.33993914997000174))
push(move(20.22973789389049,10.72889711599255,1.3833649185913492))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.010771688091964719,-0.9403857426893084,-0.33993914997000174,0.008744566490127365,-0.9965387226011093,0.08266865738264392))
push(move(20.248296278766368,8.61396675567948,1.5588106382403755))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub53 inherits .../COPOLYFF



DPDPoly_sub54 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3908060167799768,0.9175214718908805,-0.07365463914622596))
push(move(19.442959434268467,8.540642729753902,3.0143599885278647))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3908060167799768,0.9175214718908805,-0.07365463914622596,0.5186501660392361,0.8092464133843529,0.27590260544625833))
push(move(18.774736842105263,10.109473684210526,2.8884210526315783))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5186501660392361,0.8092464133843529,0.27590260544625833,0.5941081586058308,0.5120304387970969,0.6203711192691367))
push(move(20.360515620807437,9.972299560611088,3.5024657659591276))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5941081586058308,0.5120304387970969,0.6203711192691367,-0.04354189650034008,0.9172863899234603,0.395840601897202))
push(move(20.211091737922587,11.347392095059437,4.3882710066819355))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04354189650034008,0.9172863899234603,0.395840601897202,0.002650871706001237,0.9036206807811288,0.4283253881616728))
push(move(20.216202799492745,13.012502159098945,4.814417670723884))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.002650871706001237,0.9036206807811288,0.4283253881616728,0.0009718808090526632,0.42664952272515544,0.9044165192023476))
push(move(20.219263553367337,14.132974444701816,5.708665356372426))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0009718808090526632,0.42664952272515544,0.9044165192023476,9.681160223489205e-05,-0.8109255238868315,0.5851493701067975))
push(move(20.21892213497403,14.206273220748463,7.344987168154357))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(9.681160223489205e-05,-0.8109255238868315,0.5851493701067975,0.0005419578219164046,-0.8537258160648792,-0.5207225146525503))
push(move(20.21953378062409,11.869462895550324,7.341974850525548))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0005419578219164046,-0.8537258160648792,-0.5207225146525503,-0.010280114876507249,-0.8925410898119102,-0.45084889068899076))
push(move(20.220651452935194,11.482143541412924,5.6834283512947685))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.010280114876507249,-0.8925410898119102,-0.45084889068899076,-0.01380681520547015,-0.9924805786973989,0.12162102105457968))
push(move(20.188228439982964,9.15146769915261,5.9690351246333195))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub54 inherits .../COPOLYFF



DPDPoly_sub55 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9989898544893197,-0.007980571893704233,-0.04422195268933135))
push(move(20.218947368421052,8.665263157894737,4.332631578947368))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9989898544893197,-0.007980571893704233,-0.04422195268933135,-0.9141495329237754,0.006914821891584156,0.4053181672383448))
push(move(18.031526915261626,8.647788639900636,4.235801762952149))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9141495329237754,0.006914821891584156,0.4053181672383448,0.45642996972202965,0.24401784284265582,0.855644187214501))
push(move(17.222626348205342,8.687927968670863,5.661148742312615))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.45642996972202965,0.24401784284265582,0.855644187214501,0.6719854836305469,0.5982646053102311,-0.43648020782483776))
push(move(18.89070730743604,9.107126018729614,5.846460039358552))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6719854836305469,0.5982646053102311,-0.43648020782483776,-0.6270405185236669,0.3957300756497302,-0.6709827832037345))
push(move(18.898724819634285,10.180148284283847,4.572458842061112))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6270405185236669,0.3957300756497302,-0.6709827832037345,-0.8081463869611456,-0.07321995122139743,-0.5844127445434284))
push(move(17.258507414761517,10.137219876977134,4.099877491056691))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8081463869611456,-0.07321995122139743,-0.5844127445434284,-0.5302185463230352,0.6519270153073513,-0.5420880554370625))
push(move(16.401156712327086,9.953862777178136,2.766337258366261))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5302185463230352,0.6519270153073513,-0.5420880554370625,0.4481561467233273,0.7728512056471619,0.44928507885731944))
push(move(16.03852669453345,11.63723981250432,2.852586197899582))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4481561467233273,0.7728512056471619,0.44928507885731944,0.8792531751506252,-0.026849739010718725,0.47559746162337785))
push(move(17.30180290947273,11.507039062753583,3.6692522371424805))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8792531751506252,-0.026849739010718725,0.47559746162337785,0.9114120808735483,0.02886276855487887,0.4104813752523932))
push(move(18.774736842105263,11.553684210526315,4.332631578947368))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub55 inherits .../COPOLYFF



DPDPoly_sub56 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.026655225295088295,0.5097456687982375,0.8599121188272123))
push(move(18.7311989018984,12.172899635397844,2.6513718207866295))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.026655225295088295,0.5097456687982375,0.8599121188272123,0.012723888052663682,0.37103807636000835,0.9285304779940656))
push(move(18.777068668258423,13.050097800934186,4.1311555233849235))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.012723888052663682,0.37103807636000835,0.9285304779940656,0.0014474635745923416,0.48854359108928486,0.8725382882457284))
push(move(18.77407677262808,13.42325036216521,5.78040043524897))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0014474635745923416,0.48854359108928486,0.8725382882457284,0.029349585721039403,-0.31039152733140424,0.9501556196638957))
push(move(18.781783656675707,14.641486637073296,6.973374142857948))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.029349585721039403,-0.31039152733140424,0.9501556196638957,-0.3402638341519548,-0.6363080293125812,0.6923385118571337))
push(move(18.825919129154755,12.87498271792251,7.458730986781327))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3402638341519548,-0.6363080293125812,0.6923385118571337,-0.9401614898744194,0.036602035055814816,0.33875752978625406))
push(move(17.91556352119528,13.021617664714983,8.735881642468915))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9401614898744194,0.036602035055814816,0.33875752978625406,-0.5855474751350886,0.044510327847649016,-0.8094152117904736))
push(move(15.793958999598425,12.993021918788605,8.551202157916093))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5855474751350886,0.044510327847649016,-0.8094152117904736,0.6169992878526973,-0.5779573284031433,-0.5341134760838426))
push(move(16.728695487659,13.111837309624914,7.095247737403435))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6169992878526973,-0.5779573284031433,-0.5341134760838426,0.19325844858108338,-0.9694805687096186,-0.15085953382702474))
push(move(17.330526315789474,11.553684210526315,7.221052631578947))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.19325844858108338,-0.9694805687096186,-0.15085953382702474,0.025301374723840555,-0.936484005236767,-0.34979643847927727))
push(move(17.37618512724334,9.86370700211889,6.5898106612875145))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub56 inherits .../COPOLYFF



DPDPoly_sub57 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9803116733386472,0.04285977044282181,0.19274870477793063))
push(move(17.248393310216525,11.440017705672478,5.760965254918746))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9803116733386472,0.04285977044282181,0.19274870477793063,0.45031521578306566,0.03855406339680989,0.8920368773934437))
push(move(18.95483220477668,11.514624161236213,6.096484963246784))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.45031521578306566,0.03855406339680989,0.8920368773934437,0.45693413279455364,0.012695061132070537,0.8894099356934023))
push(move(18.63078765889932,11.558372399208269,8.499373141005806))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.45693413279455364,0.012695061132070537,0.8894099356934023,0.3797830870363733,-0.004201087292915036,0.9250660288145273))
push(move(20.397571675589,11.554707981780757,8.904738336899797))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3797830870363733,-0.004201087292915036,0.9250660288145273,-0.9188878967329278,-0.002995480382663022,0.3945073641074565))
push(move(19.35373218590178,11.550375326222284,10.260303117814681))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9188878967329278,-0.002995480382663022,0.3945073641074565,-0.8884080715341324,0.053408474179532074,0.4559370935982488))
push(move(17.297626461272237,11.544602478041039,10.235641943015176))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8884080715341324,0.053408474179532074,0.4559370935982488,-0.5865902084056925,-0.5964898551990903,0.5478245887573271))
push(move(16.578590790935408,11.71720864560182,11.684524646734621))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5865902084056925,-0.5964898551990903,0.5478245887573271,0.4233593916782537,-0.9048797220224176,-0.04426639979093921))
push(move(15.886315789473683,10.109473684210526,11.553684210526315))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4233593916782537,-0.9048797220224176,-0.04426639979093921,0.07474652124889541,-0.9963610922310354,-0.040957678759498406))
push(move(17.6063127976387,9.520576606672694,11.577066175003708))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07474652124889541,-0.9963610922310354,-0.040957678759498406,-0.8756720663234842,-0.48074336568845893,-0.04565357168165784))
push(move(15.99678406289533,8.63694643178143,11.493152643567443))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub57 inherits .../COPOLYFF



DPDPoly_sub58 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.07564380238660855,-0.8073988631118177,0.5851368139215306))
push(move(15.89738511369882,8.750125435954088,13.596160583298156))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07564380238660855,-0.8073988631118177,0.5851368139215306,-0.7419042719781164,-0.5654145900444781,0.36039477324935765))
push(move(16.011875440591716,7.528090624718977,14.481791698991568))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7419042719781164,-0.5654145900444781,0.36039477324935765,-0.6599678084996631,0.5837843316327475,0.4729041614156702))
push(move(14.291919444864003,7.526579828709631,14.376047500698759))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6599678084996631,0.5837843316327475,0.4729041614156702,-0.5790654967795199,0.47511868056455137,0.6625295388268267))
push(move(14.613702563589143,8.764865218867078,15.483661431723197))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5790654967795199,0.47511868056455137,0.6625295388268267,-0.3705718354443296,-0.11723177652215763,0.9213757243105983))
push(move(12.887068801259868,8.679248720038167,15.983387351206213))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3705718354443296,-0.11723177652215763,0.9213757243105983,0.6206029415145083,0.5707916447884903,0.5376326694158285))
push(move(13.809840222887638,8.510560381677543,17.482354196708382))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6206029415145083,0.5707916447884903,0.5376326694158285,-0.5069512879789384,0.7949924192454824,-0.33314778246104354))
push(move(14.442105263157893,10.109473684210526,17.330526315789474))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5069512879789384,0.7949924192454824,-0.33314778246104354,-0.4370045094213404,0.007848029618234999,-0.8994250759104535))
push(move(12.82238231886748,10.059075133755012,16.833436995394134))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4370045094213404,0.007848029618234999,-0.8994250759104535,-0.5404934261752563,0.17348973709241683,-0.8232667656263898))
push(move(13.082471965876824,10.133890920547811,14.532183838187368))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5404934261752563,0.17348973709241683,-0.8232667656263898,-0.9738521647767183,0.22654076184947186,-0.01706588352123051))
push(move(11.290945624492075,10.550641796019502,14.500788949955746))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub58 inherits .../COPOLYFF



DPDPoly_sub59 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.25905427575005635,-0.0021787113618620137,0.9658603084465246))
push(move(12.781335326510352,11.630616714448696,14.303447281993696))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.25905427575005635,-0.0021787113618620137,0.9658603084465246,0.6603745947539309,-0.3909857444719928,0.6411205364229594))
push(move(13.236360548230005,11.626789838333163,15.999967440669352))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6603745947539309,-0.3909857444719928,0.6411205364229594,0.4821434149668575,-0.5649176619649436,-0.6696310645453648))
push(move(14.542351313884414,10.587977957112656,16.013118616178446))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4821434149668575,-0.5649176619649436,-0.6696310645453648,0.33152916790692544,0.5843128074982825,-0.7407205639243566))
push(move(14.417370407210626,10.243024536179774,14.359706753582861))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.33152916790692544,0.5843128074982825,-0.7407205639243566,0.9943422582628026,-0.09040176533687015,0.055776287585384526))
push(move(15.247392022762071,11.830596573766439,14.437878178763595))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9943422582628026,-0.09040176533687015,0.055776287585384526,0.4542062236910325,-0.6455661095879208,-0.6139552952062944))
push(move(15.886315789473683,10.109473684210526,14.442105263157893))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4542062236910325,-0.6455661095879208,-0.6139552952062944,0.8842584003446164,-0.006030678369289425,-0.46695900498693266))
push(move(16.4265052608687,10.154715649673452,12.844058502977196))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8842584003446164,-0.006030678369289425,-0.46695900498693266,0.9941622803783968,-0.09801429500641287,0.04510607771932459))
push(move(18.602777385906407,10.090947305287546,13.007596748835514))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9941622803783968,-0.09801429500641287,0.04510607771932459,0.5157303078065335,-0.8560307676765154,-0.03512227784375499))
push(move(20.342378664228118,9.768650337661665,13.021725362359286))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5157303078065335,-0.8560307676765154,-0.03512227784375499,-0.05892796076996599,-0.9968768751341414,-0.05257367461271136))
push(move(20.20429364713458,7.432683530997474,12.898530249840368))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub59 inherits .../COPOLYFF



DPDPoly_sub60 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0015194614194749562,-0.6601171372171131,0.7511611387640325))
push(move(20.216895506090527,7.315201510685457,14.830343616434298))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0015194614194749562,-0.6601171372171131,0.7511611387640325,0.0013775410030918117,-0.9376661976804738,-0.34753446463369264))
push(move(20.219431115926866,6.213627304976156,16.083848014581033))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0013775410030918117,-0.9376661976804738,-0.34753446463369264,-0.0008241155546577213,-0.11446818203790779,-0.9934265730966174))
push(move(20.21912322698896,5.798833881963135,14.268320570984327))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0008241155546577213,-0.11446818203790779,-0.9934265730966174,-4.228482410472485e-05,-0.0052878766191280634,-0.9999860181886817))
push(move(20.21621216025529,5.7665200981001,12.203571658077111))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-4.228482410472485e-05,-0.0052878766191280634,-0.9999860181886817,0.029683189662539286,0.011278350832360829,-0.9994957263810385))
push(move(20.218947368421052,5.776842105263158,10.109473684210526))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.029683189662539286,0.011278350832360829,-0.9994957263810385,-0.4078722985814793,-0.027394013315803975,-0.9126279395702906))
push(move(20.343496048926283,5.814882567499753,7.917654133372118))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4078722985814793,-0.027394013315803975,-0.9126279395702906,-0.5512337504615604,0.7521592338855349,-0.3611064098473017))
push(move(18.9167444775723,5.689381977532363,7.1957510673254195))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5512337504615604,0.7521592338855349,-0.3611064098473017,0.4736425285497124,0.8804801871561966,0.020430251452781687))
push(move(19.256232783404368,7.298454834513684,7.205401420176083))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4736425285497124,0.8804801871561966,0.020430251452781687,0.3347510528219449,0.9383440729936569,0.08632573956980687))
push(move(20.29153311949212,8.245052314915771,7.255051649422329))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3347510528219449,0.9383440729936569,0.08632573956980687,0.0015623610725286144,0.9938883896615057,0.11037856641548711))
push(move(20.294620650923523,10.20917040281808,7.473181311735036))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub60 inherits .../COPOLYFF



DPDPoly_sub61 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.21792279047170046,-0.03582527175807006,-0.9753082627028686))
push(move(19.22610989271606,10.04540285279571,8.922647149436234))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.21792279047170046,-0.03582527175807006,-0.9753082627028686,-0.5134826712371994,-0.5482585551412192,-0.6601121897477525))
push(move(18.8283125130936,9.980007217952858,7.142314443584076))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5134826712371994,-0.5482585551412192,-0.6601121897477525,-0.4769585927812115,-0.8785680489195845,0.02507357552885133))
push(move(17.951249577816576,8.684201952734966,7.28373919551609))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4769585927812115,-0.8785680489195845,0.02507357552885133,-0.2816168430294861,-0.522929054689012,0.8045105080010839))
push(move(17.330526315789474,7.221052631578947,7.221052631578947))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2816168430294861,-0.522929054689012,0.8045105080010839,0.421784764845568,0.001158834607137235,0.9066952460703223))
push(move(17.185457234257715,7.2622164564222,9.471420801176919))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.421784764845568,0.001158834607137235,0.9066952460703223,0.5050850736403307,0.020778463304667313,0.862819403959159))
push(move(18.655931112842232,7.224694121446066,10.070226733556149))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5050850736403307,0.020778463304667313,0.862819403959159,0.025721494430495446,-0.35643005749890394,0.9339678896169772))
push(move(18.741746198000662,7.32623991467157,12.129975540098203))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.025721494430495446,-0.35643005749890394,0.9339678896169772,-0.145927097273909,-0.9035427884292173,-0.40288424113976673))
push(move(18.74155037319451,6.038243700657347,13.179130071885359))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.145927097273909,-0.9035427884292173,-0.40288424113976673,-0.6179077960652513,0.3152443825255293,-0.7202853148911766))
push(move(18.48697795164017,5.748780923023843,11.426596157386342))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6179077960652513,0.3152443825255293,-0.7202853148911766,-0.7427438042755979,0.6603082172121125,0.11101666312934162))
push(move(17.38004705260224,6.732855868265026,11.59204725104549))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub61 inherits .../COPOLYFF



DPDPoly_sub62 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.06975614952396884,-0.8669718309060666,-0.49345103507741517))
push(move(15.7973124648463,7.086359714112025,11.589207528611942))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06975614952396884,-0.8669718309060666,-0.49345103507741517,0.059793379526006274,0.09048813364312078,-0.9941009251754289))
push(move(15.924068330161521,5.51096076534035,10.692543745292918))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.059793379526006274,0.09048813364312078,-0.9941009251754289,-0.0014410847917400722,0.4515669922394056,-0.8922360532922214))
push(move(15.886315789473683,7.221052631578947,10.109473684210526))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0014410847917400722,0.4515669922394056,-0.8922360532922214,-0.026153987056761148,-0.4731143120909348,-0.8806127506774794))
push(move(15.920734938390638,6.555486184358906,8.628701052082018))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.026153987056761148,-0.4731143120909348,-0.8806127506774794,0.7776209514556385,-0.3846236605876681,-0.4973633436164852))
push(move(15.804856456748821,5.747488540495309,7.366713014355098))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7776209514556385,-0.3846236605876681,-0.4973633436164852,0.4826463064485129,0.007363162109951138,0.8757844065267151))
push(move(17.511733571719326,5.768553016990708,7.611104498799391))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4826463064485129,0.007363162109951138,0.8757844065267151,0.5401634347019263,-0.02298062425314822,0.8412463103752393))
push(move(17.18230592058251,5.768502652827596,9.866159804036103))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5401634347019263,-0.02298062425314822,0.8412463103752393,0.6560335417316939,0.47099250103716483,-0.5897338858245523))
push(move(18.922947284513292,5.708514573084367,9.80891770267532))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6560335417316939,0.47099250103716483,-0.5897338858245523,0.6003293538855227,0.6530864537694184,-0.46160887206191786))
push(move(18.59360341188144,6.78172910063964,8.597489986634372))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6003293538855227,0.6530864537694184,-0.46160887206191786,0.9667002227498469,0.24097955500948304,0.08613671344338611))
push(move(20.30061713175096,7.207254405101772,8.749591484256948))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub62 inherits .../COPOLYFF



DPDPoly_sub63 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.022867578691421527,0.9498052292400995,0.31200496847478854))
push(move(20.18073631249948,7.078166368206651,11.032333023368455))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.022867578691421527,0.9498052292400995,0.31200496847478854,0.07625478240943145,0.6782935156441435,-0.7308235866437249))
push(move(20.218947368421052,8.665263157894737,11.553684210526315))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07625478240943145,0.6782935156441435,-0.7308235866437249,-0.40662091976380094,0.0007343622632331873,-0.9135966770531222))
push(move(20.354536491781303,8.624135432699969,9.366637228708965))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.40662091976380094,0.0007343622632331873,-0.9135966770531222,-0.7891032013412401,0.022135161726822606,0.6138616882069882))
push(move(18.89296467200455,8.667657898565025,8.574463697278386))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7891032013412401,0.022135161726822606,0.6138616882069882,0.002055146211981875,-0.0028403221023936176,0.9999938544533171))
push(move(18.78816638778544,8.668073735721775,10.585152873762151))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.002055146211981875,-0.0028403221023936176,0.9999938544533171,-0.512646190450214,-0.02290699371674028,0.8582943277546138))
push(move(18.901682638436316,8.655609202175587,12.816455242342512))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.512646190450214,-0.02290699371674028,0.8582943277546138,-0.622634869242636,0.4203108064640416,0.6600489721018831))
push(move(17.192537742161562,8.596774941269684,13.256623063639148))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.622634869242636,0.4203108064640416,0.6600489721018831,0.08184070207201344,0.476772692281141,0.8752084890923718))
push(move(17.399007480827965,9.669992813739302,14.40942608637649))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08184070207201344,0.476772692281141,0.8752084890923718,0.9123281697046584,0.18054269833966266,0.3675073398445013))
push(move(17.449736517535076,10.09511683572633,16.007119404603923))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9123281697046584,0.18054269833966266,0.3675073398445013,0.8368737340573597,-0.06610969513032348,-0.5433892356816312))
push(move(18.948843345815565,9.976693361130081,15.033736586535198))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub63 inherits .../COPOLYFF



DPDPoly_sub64 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9274532452563572,-0.3645240463370156,-0.08338283699623528))
push(move(18.774736842105263,11.553684210526315,14.442105263157893))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9274532452563572,-0.3645240463370156,-0.08338283699623528,0.5684259296970523,-0.627577591322532,0.532013467233538))
push(move(20.377485382678692,10.923743686560513,14.298009891247638))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5684259296970523,-0.627577591322532,0.532013467233538,-0.32404716058463295,0.37703282699410234,0.8676633477829245))
push(move(20.189984811743688,9.991162401601889,15.766694695107004))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.32404716058463295,0.37703282699410234,0.8676633477829245,-0.510536412761558,0.8585291017705546,0.04775303820286874))
push(move(19.80171275403649,11.593662168460304,15.83968921233211))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.510536412761558,0.8585291017705546,0.04775303820286874,0.3666917989637316,0.9142435938548442,0.17232462293044784))
push(move(18.574413586508374,12.70794200473555,15.917807196604814))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3666917989637316,0.9142435938548442,0.17232462293044784,0.5401051208113743,0.15435011895655731,0.8273224880609903))
push(move(20.341887716619294,12.940437581757598,16.09354121285846))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5401051208113743,0.15435011895655731,0.8273224880609903,-0.04158603183669814,-0.49010977028815106,0.8706681428788887))
push(move(20.193879779850445,13.170749687826873,18.398473920137583))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04158603183669814,-0.49010977028815106,0.8706681428788887,-0.006567524968813347,-0.870120925292573,-0.49279452410084723))
push(move(20.219894787005497,11.502696973454743,18.6476526002659))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.006567524968813347,-0.870120925292573,-0.49279452410084723,-0.000677207574188682,-0.9958653751389105,0.09083884625719647))
push(move(20.175772906601985,10.771798883692842,17.039823891732542))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.000677207574188682,-0.9958653751389105,0.09083884625719647,0.02324279385089829,-0.35656004557360843,0.9339832474057289))
push(move(20.218947368421052,10.109473684210526,18.774736842105263))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub64 inherits .../COPOLYFF



DPDPoly_sub65 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.8306151476118744,-0.06811310755618122,0.5526654332747291))
push(move(18.75702851759035,10.133668187754168,19.371203652436407))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8306151476118744,-0.06811310755618122,0.5526654332747291,-0.6481606184460937,0.7236425935237305,0.2371269903107323))
push(move(17.457246552922463,10.02708189563856,20.236038064295123))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6481606184460937,0.7236425935237305,0.2371269903107323,0.0003511225466628632,0.48998791560964405,-0.871729154766246))
push(move(17.346676044872137,11.708264193891024,19.88717550820071))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0003511225466628632,0.48998791560964405,-0.871729154766246,-0.5627145690517465,-0.06207365993720837,-0.8243173991363443))
push(move(17.458325578921908,11.532851620145498,17.557148794987597))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5627145690517465,-0.06207365993720837,-0.8243173991363443,-0.5611900548612898,0.06229300754906144,0.8253395080421604))
push(move(15.75692068003216,11.532896539794699,17.55835183865141))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5611900548612898,0.06229300754906144,0.8253395080421604,0.011964762067805248,-0.4951655693016872,0.8687162387378268))
push(move(15.882003381914735,11.70782594420438,19.87543825026921))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.011964762067805248,-0.4951655693016872,0.8687162387378268,-0.8198896395538535,-0.5584497049055449,0.1261542945886586))
push(move(15.793336302876428,10.025824145461213,20.202352841704464))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8198896395538535,-0.5584497049055449,0.1261542945886586,-0.9997977591344844,0.01972629347231115,0.003913333043312372))
push(move(13.604178130889775,10.15633562417365,20.22592132003413))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997977591344844,0.01972629347231115,0.003913333043312372,-0.9838783606255308,-0.17883773925968613,0.0006591731959465108))
push(move(11.553684210526313,10.109473684210526,20.218947368421052))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9838783606255308,-0.17883773925968613,0.0006591731959465108,-0.9353456755865909,-0.3536948334324137,0.0053321632271383515))
push(move(9.894348636930408,9.48200681861197,20.228406810377056))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub65 inherits .../COPOLYFF



DPDPoly_sub66 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9692370084291118,-0.0033228673864848512,-0.2461068468038179))
push(move(11.351109436473985,8.632131105212865,20.196727784612577))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9692370084291118,-0.0033228673864848512,-0.2461068468038179,0.8835372200611409,0.0518468931866199,-0.46548241688975356))
push(move(13.003135968259194,8.6264674078547,19.777248300195385))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8835372200611409,0.0518468931866199,-0.46548241688975356,0.6542531459277003,-0.6288606083574007,-0.4201037446870325))
push(move(14.184463832786145,8.798395320698061,18.70400441953541))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6542531459277003,-0.6288606083574007,-0.4201037446870325,0.878464781278738,-0.4724059135827637,0.07163993903496431))
push(move(14.60806207697039,7.083830868198946,18.746706112645754))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.878464781278738,-0.4724059135827637,0.07163993903496431,0.870063276928821,0.08419522723205267,-0.4856964667889037))
push(move(16.989066987827645,7.29018333095173,18.93272343403246))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.870063276928821,0.08419522723205267,-0.4856964667889037,0.4625174322234693,0.5922720026181826,-0.6597662463358184))
push(move(17.28247757989527,7.342631609423778,17.253763938277498))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4625174322234693,0.5922720026181826,-0.6597662463358184,0.5950239945541862,0.5273865790111155,0.6064732823329748))
push(move(18.165379503696606,8.796498381887858,17.25475145061599))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5950239945541862,0.5273865790111155,0.6064732823329748,-0.005415151583780123,-0.010856471225709426,0.9999264038747301))
push(move(18.774736842105263,8.665263157894737,18.774736842105263))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.005415151583780123,-0.010856471225709426,0.9999264038747301,-0.6074058588722078,-0.5207539473236432,0.5998945315258007))
push(move(18.14872287619546,8.763104635769063,20.330455127644882))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6074058588722078,-0.5207539473236432,0.5998945315258007,-0.5230338831126911,-0.8489869746237912,-0.07521086381103488))
push(move(17.32017415792416,7.4182069295873525,20.211312053318885))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub66 inherits .../COPOLYFF



DPDPoly_sub67 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.6238587665861364,0.7770250661062118,0.0838587264168846))
push(move(17.75406999808821,5.560523170313732,20.190891554617632))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6238587665861364,0.7770250661062118,0.0838587264168846,0.49449773963515264,0.6139671873036533,-0.615236766139805))
push(move(18.879587314216042,6.962371174716449,20.34218292655285))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.49449773963515264,0.6139671873036533,-0.615236766139805,0.9109051312254336,0.23769561901255998,-0.337272344863037))
push(move(19.05362884380569,7.17405226314525,18.57402596037344))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9109051312254336,0.23769561901255998,-0.337272344863037,0.4639550929319017,-0.6212123178854239,0.6315385402728558))
push(move(20.329367117800043,7.340683137216002,19.80538648406049))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4639550929319017,-0.6212123178854239,0.6315385402728558,-0.24441241378196088,-0.9624005399143353,0.11852330050193306))
push(move(20.248521689673918,5.574151398353012,20.200521487975852))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.24441241378196088,-0.9624005399143353,0.11852330050193306,-0.9201595907644857,-0.39150040441275064,0.0058104103802468846))
push(move(19.54120002778659,4.237189246564687,20.18759360443505))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9201595907644857,-0.39150040441275064,0.0058104103802468846,-0.6988970487950273,-0.01618423026544227,-0.715039149890631))
push(move(17.330526315789474,4.332631578947368,20.218947368421052))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6988970487950273,-0.01618423026544227,-0.715039149890631,0.6128863846863557,0.5478719595173012,-0.5693914255068838))
push(move(17.98530119173732,4.201159583718392,18.59575889435492))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6128863846863557,0.5478719595173012,-0.5693914255068838,0.3525179877931274,0.5907221101906004,-0.7257950515222934))
push(move(18.81059083710044,5.655692214268297,18.84391919241958))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3525179877931274,0.5907221101906004,-0.7257950515222934,0.03705015085051853,0.028173267739882258,-0.9989161893306219))
push(move(18.888789999885972,5.715155560560193,16.73557663765576))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub67 inherits .../COPOLYFF



DPDPoly_sub68 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.11043789487853567,-0.9926445622731136,0.04960085044045294))
push(move(17.60219587636591,5.878728312070442,15.84485864056728))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11043789487853567,-0.9926445622731136,0.04960085044045294,-0.13749332314518004,-0.9491466670992762,-0.2832246289163972))
push(move(17.38544753135193,3.9305377358514524,15.94220658672361))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13749332314518004,-0.9491466670992762,-0.2832246289163972,0.6449265071595335,-0.46770365613000686,-0.6044196310557994))
push(move(17.15806772118022,2.8128139198905453,14.929992165116897))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6449265071595335,-0.46770365613000686,-0.6044196310557994,0.9327931024238137,0.01420921987872252,0.3601320954052757))
push(move(18.825350576472516,2.886313454170563,14.592741713398715))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9327931024238137,0.01420921987872252,0.3601320954052757,0.4536352477155999,0.0006860527775836674,0.8911871808781772))
push(move(19.56389456844137,2.849461835247166,15.858832077671021))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4536352477155999,0.0006860527775836674,0.8911871808781772,0.08130760939892592,-0.7409946785796414,0.6665702955956602))
push(move(20.218947368421052,2.888421052631579,17.330526315789474))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08130760939892592,-0.7409946785796414,0.6665702955956602,-0.8895345263184489,-0.45643051053519945,0.019987884830309208))
push(move(19.734906841965852,1.290946149074237,17.260812809319564))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8895345263184489,-0.45643051053519945,0.019987884830309208,-0.7529518176142314,0.0611967861772989,-0.6552240179610292))
push(move(17.424007587650618,1.454304946613795,17.39332875098769))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7529518176142314,0.0611967861772989,-0.6552240179610292,-0.39122752294676283,-0.04509540997125096,-0.9191884623342839))
push(move(17.462767647687485,1.4756161547565307,15.283581149319028))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.39122752294676283,-0.04509540997125096,-0.9191884623342839,-0.8306992352198234,-0.10650683564004935,-0.5464385368613235))
push(move(16.161813885077734,1.3088163520181617,14.42780659166389))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub68 inherits .../COPOLYFF



DPDPoly_sub69 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.6428583480347729,0.00651284889539749,0.7659573925234147))
push(move(15.984904978870466,3.0027124241904617,14.706619681806986))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6428583480347729,0.00651284889539749,0.7659573925234147,-0.574038749430595,-0.6703817886787867,0.4701784465072693))
push(move(14.915445521696764,3.013547202747229,15.980866768634838))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.574038749430595,-0.6703817886787867,0.4701784465072693,0.5981449352707724,-0.7213928590380504,0.3490200271314401))
push(move(14.5759466011883,1.3572833685013674,15.86065651620034))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5981449352707724,-0.7213928590380504,0.3490200271314401,-0.09052457114519477,0.058793821085631574,0.9941572253024816))
push(move(16.15258215132593,1.521498239957172,16.70274107463896))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09052457114519477,0.058793821085631574,0.9941572253024816,-0.5422596315554018,0.792502905385634,0.27909431549339864))
push(move(14.442105263157893,1.4442105263157894,17.330526315789474))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5422596315554018,0.792502905385634,0.27909431549339864,0.6164590787938097,0.5906274852481709,0.520708534443319))
push(move(15.10688594697065,3.049764833812261,17.240947958178225))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6164590787938097,0.5906274852481709,0.520708534443319,0.24479704671665173,-0.18122598413510396,0.952487033293928))
push(move(15.91746744688287,2.857750348145863,18.576730170818564))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.24479704671665173,-0.18122598413510396,0.952487033293928,-0.10943877421336508,-0.9437136416908427,0.3121341333229741))
push(move(15.926000555799803,2.443365152543531,20.428061749605863))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10943877421336508,-0.9437136416908427,0.3121341333229741,0.6608657510777945,-0.45032478312946755,-0.6003865827546286))
push(move(15.745608621192048,1.3757754318954643,19.066894703421287))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6608657510777945,-0.45032478312946755,-0.6003865827546286,0.9994487949006516,0.03261230150274553,0.0062083945049607936))
push(move(17.412882924620412,1.4301790717303502,19.077251508768875))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub69 inherits .../COPOLYFF



DPDPoly_sub70 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9988779387707502,0.03362293207838249,-0.033352089522995655))
push(move(18.151575863320158,1.4846725540511978,20.32701762348194))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9988779387707502,0.03362293207838249,-0.033352089522995655,0.7222079322150694,0.6059247949488442,-0.3335728488828712))
push(move(20.28038864029781,1.5563298853723773,20.255937512930263))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7222079322150694,0.6059247949488442,-0.3335728488828712,-0.04132705581908316,-0.07541450345340418,-0.9962955019100521))
push(move(20.1532613541418,3.1640654497484366,19.402480655723956))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04132705581908316,-0.07541450345340418,-0.9962955019100521,-0.7689013348121814,-0.5173345361852918,-0.3757069536141098))
push(move(20.218947368421052,1.4442105263157894,18.774736842105263))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7689013348121814,-0.5173345361852918,-0.3757069536141098,-0.5655159560748346,0.6166061584953834,0.547712103874227))
push(move(18.586183948624463,2.109699660478748,18.63676228400564))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5655159560748346,0.6166061584953834,0.547712103874227,-0.6932970023857503,0.39259907171624364,0.6043221288108493))
push(move(18.867756655467872,2.9174713706100706,20.083388702723976))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6932970023857503,0.39259907171624364,0.6043221288108493,-0.5427547607155652,0.001786593343361075,-0.8398893247355956))
push(move(17.20610035272366,2.8912111004200427,19.839731651739413))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5427547607155652,0.001786593343361075,-0.8398893247355956,0.5754098311758163,0.08811155668923296,-0.8131050853143268))
push(move(17.22290614303343,2.922885747763511,17.53805426040935))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5754098311758163,0.08811155668923296,-0.8131050853143268,0.4047807340066014,0.9019028491723288,-0.1507441807563816))
push(move(18.95971829902491,3.1597397190066223,17.36171408481269))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4047807340066014,0.9019028491723288,-0.1507441807563816,-0.6421194504523983,0.7652682088395407,-0.04524577207023088))
push(move(17.897414873937798,4.425776807258303,17.286860817858926))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub70 inherits .../COPOLYFF



DPDPoly_sub71 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.07042247377120699,0.45716205239838364,-0.8865909615120388))
push(move(15.821768291171407,4.306970904268014,17.21940325916547))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07042247377120699,0.45716205239838364,-0.8865909615120388,0.04374683149899513,0.9961998442454534,0.07531324623950891))
push(move(15.951266915619698,5.147638006191849,15.589067035290325))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04374683149899513,0.9961998442454534,0.07531324623950891,0.5701900521897391,0.20754814630674992,0.7948629261378937))
push(move(15.886315789473683,5.776842105263158,17.330526315789474))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5701900521897391,0.20754814630674992,0.7948629261378937,0.07423625346490682,0.05192153694993387,0.9958881125268294))
push(move(17.616412489692564,5.753747979353411,17.910332512248676))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07423625346490682,0.05192153694993387,0.9958881125268294,-0.6237325073883613,-0.6105774847420843,0.48800911298156896))
push(move(15.998141314214418,5.855053933632386,18.830678944302964))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6237325073883613,-0.6105774847420843,0.48800911298156896,-0.09700194955532597,-0.30708147683161563,0.9467267759862821))
push(move(15.93148859587921,4.104360492121104,19.22861912569487))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09700194955532597,-0.30708147683161563,0.9467267759862821,-0.08937245580787981,0.9488522574352927,0.30280679930083726))
push(move(15.848989784235426,5.3828812370257015,20.286379038556166))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08937245580787981,0.9488522574352927,0.30280679930083726,-0.5101404972973345,0.8594312342421576,-0.03368421924626101))
push(move(15.635002038513614,7.252108159034398,20.233158439961816))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5101404972973345,0.8594312342421576,-0.03368421924626101,0.20795518876797103,0.9736646721672092,-0.09344381005715909))
push(move(14.173833075341504,8.205009661451921,20.17576961594971))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20795518876797103,0.9736646721672092,-0.09344381005715909,0.9685823848911101,0.245074658260571,-0.042267902208573724))
push(move(15.933623189012497,8.650278920366572,20.09897425234146))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub71 inherits .../COPOLYFF



DPDPoly_sub72 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.398905160078775,0.9137360417174946,0.07720828536479556))
push(move(16.63778229466297,8.522667487813889,18.640655904026325))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.398905160078775,0.9137360417174946,0.07720828536479556,-0.673652341984285,0.7362006166232612,0.06481646567514843))
push(move(17.330526315789474,10.109473684210526,18.774736842105263))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.673652341984285,0.7362006166232612,0.06481646567514843,-0.9999863224280813,-0.005230098924915306,-3.196868872786081e-05))
push(move(15.213900006690393,10.078756516342501,18.7776568638567))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9999863224280813,-0.005230098924915306,-3.196868872786081e-05,-0.9929222108174227,-0.11876467146170301,-0.0006603620486737704))
push(move(13.182602831526085,10.08777933732886,18.774604236616806))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9929222108174227,-0.11876467146170301,-0.0006603620486737704,-0.8980905295587364,-0.4398099680346241,-0.0007698923894483474))
push(move(11.52960339090803,9.63807317541831,18.775206551400583))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8980905295587364,-0.4398099680346241,-0.0007698923894483474,-0.40942450947713493,-0.9123191459520221,-0.00673401579894371))
push(move(10.428830095006147,8.739210724965774,18.772243551805712))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.40942450947713493,-0.9123191459520221,-0.00673401579894371,0.44993765894929355,-0.8913851918548965,0.054667566262260575))
push(move(10.412293798992957,7.148376273877812,18.75682958502435))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.44993765894929355,-0.8913851918548965,0.054667566262260575,0.5256209172037646,-0.5715396033480701,-0.6301310444682152))
push(move(11.690936497389691,6.238813313784117,18.92558987436837))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5256209172037646,-0.5715396033480701,-0.6301310444682152,0.7101125199630871,0.14721100890941782,-0.6885267807772951))
push(move(11.678402312444812,5.771659454038312,17.23897849904439))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7101125199630871,0.14721100890941782,-0.6885267807772951,0.8729937649479816,0.4581779138798025,0.16719714589280663))
push(move(13.141436946031352,6.539511623510021,17.51918120483642))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub72 inherits .../COPOLYFF



DPDPoly_sub73 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.41849562140032615,-0.9080104594512757,0.01945303050524886))
push(move(12.997894736842104,7.221052631578947,15.886315789473683))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.41849562140032615,-0.9080104594512757,0.01945303050524886,-0.4487139958779915,-0.8936552514577718,0.006003452769232458))
push(move(12.32893839973511,5.769617252214925,15.91741104439864))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4487139958779915,-0.8936552514577718,0.006003452769232458,-0.843940806572064,-0.5170989199609057,0.14273269414453998))
push(move(11.611724423652111,4.460366780064013,15.904861696402806))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.843940806572064,-0.5170989199609057,0.14273269414453998,-0.8564050480317787,-0.0431197704585177,0.5145008057343461))
push(move(10.05631402279114,4.377136166286767,16.301771887687323))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8564050480317787,-0.0431197704585177,0.5145008057343461,-0.9367505141257948,-0.036853767739895564,-0.348052114041034))
push(move(8.919508760911846,4.324814424704848,17.522258897498116))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9367505141257948,-0.036853767739895564,-0.348052114041034,-0.9397032365220627,0.08549387239966083,-0.33113233767192085))
push(move(8.43339148405445,4.313286924252178,15.698770755567002))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9397032365220627,0.08549387239966083,-0.33113233767192085,-0.495923463363666,-0.6092664052485247,0.6187522653865012))
push(move(7.108251829324066,4.4896019480141085,16.884008736627194))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.495923463363666,-0.6092664052485247,0.6187522653865012,0.05601997159480826,-0.6624498781382097,-0.7470086490377391))
push(move(7.212969911278001,2.8139389008899593,17.221462599506303))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05601997159480826,-0.6624498781382097,-0.7470086490377391,0.0025519872983532166,0.47950247938815427,-0.8775368138268855))
push(move(7.2536958602496275,2.769690676736397,14.944558466317245))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0025519872983532166,0.47950247938815427,-0.8775368138268855,-0.01987962882526292,0.951826344300386,-0.3059925009759768))
push(move(7.221052631578947,4.332631578947368,14.442105263157893))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub73 inherits .../COPOLYFF



DPDPoly_sub74 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.4642325587936941,-0.885229081122124,0.029284898694369253))
push(move(9.447535209323018,4.389181458087721,14.423567571783307))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4642325587936941,-0.885229081122124,0.029284898694369253,0.18145344929194188,-0.9710574111508101,0.15531307088955215))
push(move(10.126946255631761,3.0936359285132036,14.466426443454626))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.18145344929194188,-0.9710574111508101,0.15531307088955215,0.4699022780718978,-0.6794455614290427,0.5635118260668658))
push(move(10.01882766725432,1.331880660701398,14.912559025864699))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4699022780718978,-0.6794455614290427,0.5635118260668658,0.4525401186169784,0.04615449200849355,0.8905488217439675))
push(move(11.256742608479032,1.4600300638841635,15.821290285547425))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4525401186169784,0.04615449200849355,0.8905488217439675,-0.8281227950106128,-0.06236123827516922,0.5570670626994547))
push(move(11.317351604440526,1.4643169027408012,17.467910285774252))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8281227950106128,-0.06236123827516922,0.5570670626994547,-0.8705946800120473,0.4919306483930565,-0.00831506502128213))
push(move(8.999593737139651,1.290056963957213,17.339643963779775))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8705946800120473,0.4919306483930565,-0.00831506502128213,0.20733189201647398,0.665078654827337,0.7174147123149407))
push(move(8.649794736913993,2.9716233561290983,17.442432403459208))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.20733189201647398,0.665078654827337,0.7174147123149407,0.9954677252947243,-0.05674207191612774,-0.07631739756577544))
push(move(9.485818465226249,2.849767266865784,19.02209025811514))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9954677252947243,-0.05674207191612774,-0.07631739756577544,0.002260831872112859,0.04979221411514869,-0.9987570395510398))
push(move(10.109473684210526,2.8884210526315783,17.330526315789474))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.002260831872112859,0.04979221411514869,-0.9987570395510398,-0.3590622034482873,0.07300313879321775,-0.9304541234156571))
push(move(9.493262193248679,3.0137067902242354,15.73370961618902))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub74 inherits .../COPOLYFF



DPDPoly_sub75 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.011621333848621162,0.20781837935840944,-0.9780983926990285))
push(move(8.632948405074643,1.5862871176829156,15.980521052451651))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.011621333848621162,0.20781837935840944,-0.9780983926990285,0.014654948823741727,0.4655021476298544,-0.8849254109962978))
push(move(8.652038024000847,1.9276570257751764,14.373861624870353))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.014654948823741727,0.4655021476298544,-0.8849254109962978,0.024195717450046648,0.2922562711801573,-0.9560339111208074))
push(move(8.675933613848239,2.951676191441379,13.384899327788158))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.024195717450046648,0.2922562711801573,-0.9560339111208074,-0.27732885223768977,-0.018009576677384346,-0.9606062475668306))
push(move(8.732309622655638,2.897245059399457,11.202128008278963))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.27732885223768977,-0.018009576677384346,-0.9606062475668306,-0.9343791530307598,-0.00561894012439567,0.35623591325608733))
push(move(7.674102397129058,2.886617846556882,9.914775977754923))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9343791530307598,-0.00561894012439567,0.35623591325608733,-0.3818670015570378,-0.00032640946244191196,0.9242172291072593))
push(move(7.274320526671477,2.888477362254477,11.757992376015169))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3818670015570378,-0.00032640946244191196,0.9242172291072593,-0.4872095928892915,-1.8320523391868637e-05,0.8732850692992576))
push(move(6.404945446643341,2.8855330059284086,12.986465113756182))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4872095928892915,-1.8320523391868637e-05,0.8732850692992576,-0.38020836001719366,0.042032562802029015,0.9239452725336764))
push(move(5.776842105263158,2.8884210526315783,14.442105263157893))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.38020836001719366,0.042032562802029015,0.9239452725336764,-0.6189392041764853,-0.5332401266614426,0.5766881556365343))
push(move(5.1655523208998915,3.0225496391025417,15.998317402563329))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6189392041764853,-0.5332401266614426,0.5766881556365343,-0.5345855228556805,-0.842078566089585,-0.0715682002402396))
push(move(4.239651663472921,1.564071875278036,15.874361476298576))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub75 inherits .../COPOLYFF



DPDPoly_sub76 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.6283478088799355,-0.02821248628865639,0.7774207912663491))
push(move(6.341529742351002,1.485435602435876,15.781491864381202))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6283478088799355,-0.02821248628865639,0.7774207912663491,-0.5469115350284859,-0.024157740522547915,0.8368417869738765))
push(move(7.369737283396268,1.4392696243840999,17.053637495907033))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5469115350284859,-0.024157740522547915,0.8368417869738765,-0.9408780406890884,0.002390180374791491,0.3387370655638943))
push(move(5.384953365746045,1.44318247296985,17.245171149063676))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9408780406890884,0.002390180374791491,0.3387370655638943,-0.3534439956402022,0.002881446866174286,0.9354512489755125))
push(move(4.2241180409590315,1.4472606679143893,18.18613053483918))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3534439956402022,0.002881446866174286,0.9354512489755125,-0.745983234990385,-0.050569662396963186,0.6640419582815059))
push(move(4.238240733900619,1.4525310304787942,20.28014635562449))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.745983234990385,-0.050569662396963186,0.6640419582815059,-0.8892536538421889,0.45699951462537586,-0.019477750395955555))
push(move(1.9693530690449146,1.2944117859744826,20.19322463184485))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8892536538421889,0.45699951462537586,-0.019477750395955555,0.763326858576324,0.6459996499707631,-0.004069301371540649))
push(move(1.4442105263157894,2.888421052631579,20.218947368421052))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.763326858576324,0.6459996499707631,-0.004069301371540649,0.9126689285109785,0.4079028754928834,0.025508255433481564))
push(move(3.657483963446612,2.723068402253218,20.184225193024183))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9126689285109785,0.4079028754928834,0.025508255433481564,0.3779133012132421,0.5353810049291555,-0.7553467523774474))
push(move(4.362594347777614,4.192746329167898,20.300513506639696))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3779133012132421,0.5353810049291555,-0.7553467523774474,0.05162968298866056,-0.19711443973336212,-0.9790200577532071))
push(move(4.452528802169287,3.849389977473204,18.59514501247567))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub76 inherits .../COPOLYFF



DPDPoly_sub77 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.2534664187305423,0.038532192886989856,-0.9665764556863741))
push(move(3.1220651752019712,2.82779260997842,18.91531181872747))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2534664187305423,0.038532192886989856,-0.9665764556863741,-0.9595179207858441,-0.054585609406093256,-0.2763073848752074))
push(move(2.6532596796679395,2.89906084294936,17.12755485846007))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9595179207858441,-0.054585609406093256,-0.2763073848752074,-0.46571445437239584,0.5738882663924568,0.6736188125978089))
push(move(1.3355676329338897,2.726161306451202,18.40086341365151))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.46571445437239584,0.5738882663924568,0.6736188125978089,-0.013658427343225053,0.7658151882308866,0.6429156591944246))
push(move(1.4463267657999002,4.3863340660344035,18.873287052709077))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.013658427343225053,0.7658151882308866,0.6429156591944246,0.5975645549547078,0.576188620404443,0.5576049465151889))
push(move(1.293666865290729,5.075497979943289,20.373173912738167))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5975645549547078,0.576188620404443,0.5576049465151889,0.7768890487706999,-0.49605612254505144,-0.3877779379821991))
push(move(2.888421052631579,5.776842105263158,20.218947368421052))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7768890487706999,-0.49605612254505144,-0.3877779379821991,-0.0555569136639719,-0.08069327438388733,-0.9951894416709517))
push(move(2.883618652089706,4.060288253868408,19.579562229896702))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0555569136639719,-0.08069327438388733,-0.9951894416709517,0.7006709791830588,0.6911388957520493,-0.17716434660871075))
push(move(2.80719041404505,5.658859197726452,18.76386520978188))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7006709791830588,0.6911388957520493,-0.17716434660871075,0.5901121181849284,0.4950463884054138,0.6377278112941706))
push(move(4.479762859065847,5.634718160979356,19.175977874438008))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5901121181849284,0.4950463884054138,0.6377278112941706,-0.07123390289001806,0.7224358352159158,0.6877588204268541))
push(move(4.349782699624371,6.952943349238119,20.430928080864092))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub77 inherits .../COPOLYFF



DPDPoly_sub78 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.7946432471063081,0.1308839230786128,-0.5927997204013298))
push(move(4.600247848061667,7.16827029349537,18.723723296179724))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7946432471063081,0.1308839230786128,-0.5927997204013298,0.4942003868612013,-0.6195090988888926,-0.6098970847775149))
push(move(5.881533803530617,7.379308055469669,17.7678906518805))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4942003868612013,-0.6195090988888926,-0.6098970847775149,-0.03379374033735096,-0.44962335220123634,-0.8925787496178332))
push(move(5.782793793716681,5.685879763936345,17.264332846384256))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03379374033735096,-0.44962335220123634,-0.8925787496178332,-0.0019015576329161246,-0.4323612426104765,-0.9016984750829368))
push(move(5.775034542888095,5.9623428394554185,14.954973941549357))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0019015576329161246,-0.4323612426104765,-0.9016984750829368,-0.01517067917684513,-0.6512339456041387,0.7587253775814928))
push(move(5.776842105263158,4.332631578947368,14.442105263157893))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01517067917684513,-0.6512339456041387,0.7587253775814928,0.026019801019249333,-0.41028043677896153,0.9115881378952796))
push(move(5.740959572801912,4.4996016558281395,16.65915239284622))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.026019801019249333,-0.41028043677896153,0.9115881378952796,-0.7479219207405409,-0.5863935665941862,0.3110552772944545))
push(move(5.859910831280148,3.022803222930756,17.35236830518273))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7479219207405409,-0.5863935665941862,0.3110552772944545,-0.5148176414366382,0.85633468595799,0.040665731160866296))
push(move(4.178785574994069,3.2748096597488816,17.308849176153732))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5148176414366382,0.85633468595799,0.040665731160866296,0.05931057160277859,0.8260517173313108,-0.5604648217240257))
push(move(4.351028184883719,5.532640577267757,17.471555782675583))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05931057160277859,0.8260517173313108,-0.5604648217240257,-0.009005105214854134,-0.03997379181581761,-0.9991601493494099))
push(move(4.33615880124852,5.466635169037487,15.821725467625795))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub78 inherits .../COPOLYFF



DPDPoly_sub79 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.008589623779866773,-0.9661461420805305,-0.25785238123047766))
push(move(4.323855780040035,4.34669262048583,14.913085040839132))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.008589623779866773,-0.9661461420805305,-0.25785238123047766,0.2183496726075834,-0.961404611633206,-0.16740547542588194))
push(move(4.30903676561513,2.679875308927194,14.468232244619248))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2183496726075834,-0.961404611633206,-0.16740547542588194,0.9205203644951793,-0.3906072797810231,-0.008259027287272232))
push(move(5.004928017571092,1.3478972378406673,14.390916995603895))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9205203644951793,-0.3906072797810231,-0.008259027287272232,0.7379997781355722,0.05406831311522193,-0.6726313589097082))
push(move(7.221052631578947,1.4442105263157894,14.442105263157893))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7379997781355722,0.05406831311522193,-0.6726313589097082,-0.889984000067186,-0.018972080918488708,-0.4555969049170916))
push(move(6.700476924403235,1.4721187781619594,12.845551537389806))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.889984000067186,-0.018972080918488708,-0.4555969049170916,-0.7675943467315401,0.6390237634099625,0.04947270624443906))
push(move(4.416602246098486,1.3844271373546333,13.006462694839826))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7675943467315401,0.6390237634099625,0.04947270624443906,0.35049081924330344,0.936546884757703,-0.006009848317533923))
push(move(4.259216008104567,3.5044731653998236,13.002894780852117))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.35049081924330344,0.936546884757703,-0.006009848317533923,0.48152179071828227,0.8760986873146891,-0.024245724343424542))
push(move(5.503015645520823,4.287433518476715,12.987834019330547))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.48152179071828227,0.8760986873146891,-0.024245724343424542,0.09129695384035655,0.9387658896913478,0.3322400797186938))
push(move(5.740834155853766,6.200184427829739,12.928291915758605))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09129695384035655,0.9387658896913478,0.3322400797186938,0.029784345842158264,0.6706384136493055,0.7411862187606416))
push(move(5.784371379789145,7.180489147277006,14.011719786056956))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub79 inherits .../COPOLYFF



DPDPoly_sub80 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.001443993440302557,0.8649465451833938,-0.5018619221043331))
push(move(5.777113600843166,8.864611985192232,14.453741226650141))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.001443993440302557,0.8649465451833938,-0.5018619221043331,-0.00018476232059032847,-0.1356639100248448,-0.9907548987411849))
push(move(5.779589379157038,10.347593721435095,13.593281041288442))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00018476232059032847,-0.1356639100248448,-0.9907548987411849,-0.056966973528096085,-0.42688111926756306,-0.9025116475369843))
push(move(5.776842105263158,8.665263157894737,12.997894736842104))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.056966973528096085,-0.42688111926756306,-0.9025116475369843,0.5283066087404674,0.5968662402319134,-0.6038566207574166))
push(move(5.6426676708313686,9.321573055737252,11.424069146897882))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5283066087404674,0.5968662402319134,-0.6038566207574166,0.573994692634604,0.4654395868757361,0.6737181041030814))
push(move(7.101304257899398,10.161603980240589,11.484029063802774))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.573994692634604,0.4654395868757361,0.6737181041030814,0.07694046740182613,0.9494224152245216,0.3044293710291837))
push(move(7.181803592791328,10.56962429533065,13.230608037597895))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07694046740182613,0.9494224152245216,0.3044293710291837,-0.008202252884933129,0.2189549988192959,-0.9757004824943226))
push(move(7.216612246594226,11.584470162604433,11.940266719465544))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.008202252884933129,0.2189549988192959,-0.9757004824943226,0.37033974952443094,-0.5740384354824276,-0.7302933277191217))
push(move(7.15488107981474,11.288307184007449,10.028035613932499))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.37033974952443094,-0.5740384354824276,-0.7302933277191217,0.6011377524409264,-0.44290570486471476,0.6651826359644107))
push(move(8.211985760886591,10.041609436477216,9.977434922421047))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6011377524409264,-0.44290570486471476,0.6651826359644107,0.23262451082113125,0.10077493492364938,0.9673315095955283))
push(move(8.61185764391922,10.21483736868508,11.640237655002323))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub80 inherits .../COPOLYFF



DPDPoly_sub81 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.3393963471354998,-0.9397034129039726,0.04204301758562667))
push(move(9.483665891797273,11.842178597849015,11.476161726139798))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3393963471354998,-0.9397034129039726,0.04204301758562667,0.450675488830511,-0.6602880200190233,-0.6007589652986776))
push(move(10.109473684210526,10.109473684210526,11.553684210526315))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.450675488830511,-0.6602880200190233,-0.6007589652986776,0.8864017643025549,-0.02691610589698349,-0.46213356887880414))
push(move(10.616032854488617,10.183139315125539,9.966695110570882))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8864017643025549,-0.02691610589698349,-0.46213356887880414,0.8226578859219956,0.5599598903709461,-0.09838152217825805))
push(move(12.903058824870687,10.024644844167081,10.097223356078583))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8226578859219956,0.5599598903709461,-0.09838152217825805,0.49987811408216837,0.5822212326249602,-0.6412022359149464))
push(move(12.863337413027063,11.712815789105923,9.697940325561607))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.49987811408216837,0.5822212326249602,-0.6412022359149464,0.9191766421207244,-0.22814825216613555,0.32103376086201163))
push(move(14.175583998563445,11.50678849939401,8.464933476518604))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9191766421207244,-0.22814825216613555,0.32103376086201163,0.09560988521291257,-0.8250856681219924,0.5568593988694625))
push(move(14.407454925963252,11.329551359210583,10.237242380982739))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09560988521291257,-0.8250856681219924,0.5568593988694625,0.006410063852467432,-0.9982010449098249,-0.05961195368666482))
push(move(14.44651920307612,9.16869601308572,10.0429378301639))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.006410063852467432,-0.9982010449098249,-0.05961195368666482,0.04708454231594022,-0.8701641698760586,-0.4905072510563002))
push(move(14.434064670539671,7.185774409041772,9.9897785650501))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.04708454231594022,-0.8701641698760586,-0.4905072510563002,0.09579551853310489,-0.44837438647644773,-0.8886977147381683))
push(move(14.59442959416572,6.4351805885351965,8.502068666581527))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub81 inherits .../COPOLYFF



DPDPoly_sub82 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.01852961183925324,-0.04801069324143168,-0.9986749355118331))
push(move(12.997894736842104,5.776842105263158,8.665263157894737))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.01852961183925324,-0.04801069324143168,-0.9986749355118331,-0.0011038933012630734,0.3933126892374611,-0.919404105877484))
push(move(13.039285599689329,5.669597332064694,6.434454566580121))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0011038933012630734,0.3933126892374611,-0.919404105877484,-0.020946838081878645,0.9970301687480704,-0.07410851894732375))
push(move(12.994425492301287,7.0129198116952995,5.775819339845927))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.020946838081878645,0.9970301687480704,-0.07410851894732375,0.03236688975336235,0.879356600887529,0.4750624726530446))
push(move(12.976121870183505,8.676072277914905,6.210985495660269))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.03236688975336235,0.879356600887529,0.4750624726530446,-0.7344035743422626,0.5378041159825602,0.4140267175262071))
push(move(13.09758852266373,9.815694264478482,7.289986584947738))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7344035743422626,0.5378041159825602,0.4140267175262071,-0.9225912976191518,0.38539413368809267,-0.017223799703153516))
push(move(11.169623722632991,9.998971802386388,7.2294153132403))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9225912976191518,0.38539413368809267,-0.017223799703153516,0.26472673281605574,0.9642343576237896,0.01310955797784649))
push(move(9.87645143829933,11.16126010638789,7.229851376540001))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.26472673281605574,0.9642343576237896,0.01310955797784649,0.6486554756237667,0.7018500402241876,-0.2943681283369707))
push(move(11.623960721985705,11.653838086782333,7.251914579450161))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6486554756237667,0.7018500402241876,-0.2943681283369707,-0.6045387726227958,0.5365079642783043,-0.5888056357251291))
push(move(11.671560928602364,13.103581901736105,6.415207793500345))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6045387726227958,0.5365079642783043,-0.5888056357251291,-0.9238758621338202,-0.0625072773198006,-0.37755295211209233))
push(move(10.109473684210526,12.997894736842104,5.776842105263157))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub82 inherits .../COPOLYFF



DPDPoly_sub83 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.07252795756782995,0.8872627319895974,-0.45552666200058484))
push(move(10.17808728437586,11.261368316142946,5.138694731882214))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07252795756782995,0.8872627319895974,-0.45552666200058484,0.7004105207921332,0.6490120320688413,-0.2969991323111332))
push(move(10.044751803708156,12.892513143814845,4.301253992178507))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7004105207921332,0.6490120320688413,-0.2969991323111332,0.9477041824195148,-0.31853008334563304,0.019883878605120475))
push(move(12.121017746275836,13.061719981078015,4.3148226680066655))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9477041824195148,-0.31853008334563304,0.019883878605120475,-0.43711204835903034,-0.8829753090735973,0.1711363805441674))
push(move(13.180433662438864,11.838588277453177,4.367044054710573))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43711204835903034,-0.8829753090735973,0.1711363805441674,-0.6016530876903208,-0.5011578485027982,0.6219761835928684))
push(move(11.428508368481227,11.662836824710936,4.585951200961949))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6016530876903208,-0.5011578485027982,0.6219761835928684,0.06977795574044553,-0.9746674861881356,-0.21249547821161968))
push(move(11.57715157110168,10.503105388929914,6.024483028755975))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06977795574044553,-0.9746674861881356,-0.21249547821161968,0.059209951020649264,-0.9131848851550967,-0.4032214617606622))
push(move(11.546691223606983,10.012043460336262,4.226047818154682))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.059209951020649264,-0.9131848851550967,-0.4032214617606622,-0.5733125973082005,-0.5372367731613685,0.6186188772830048))
push(move(11.706333451233746,8.510755482553881,5.1447507262976195))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5733125973082005,-0.5372367731613685,0.6186188772830048,-0.7659542528637635,0.37740720327971516,-0.5204593023786757))
push(move(10.109473684210526,8.665263157894737,5.776842105263157))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7659542528637635,0.37740720327971516,-0.5204593023786757,0.0027137136207882576,0.3449695952880987,-0.9386099371331788))
push(move(10.114428564637159,9.29513179339942,4.063065098685301))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub83 inherits .../COPOLYFF



DPDPoly_sub84 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9898576475140456,0.0023328143679637596,-0.14204363989663307))
push(move(10.190247748588005,10.142366408306879,5.649018411220873))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9898576475140456,0.0023328143679637596,-0.14204363989663307,-0.5014757373673973,-0.05234922217729648,-0.8635865004556621))
push(move(8.510114066447938,10.14632600795602,5.40792081064824))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5014757373673973,-0.05234922217729648,-0.8635865004556621,0.05491452843866412,0.5018750598015922,-0.8631951221569242))
push(move(8.686179812359708,9.985356246705226,3.058877615349517))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05491452843866412,0.5018750598015922,-0.8631951221569242,-0.0991661630919503,0.29716885815658106,-0.9496613827251977))
push(move(8.686181451672805,11.755441701037798,2.640337942905302))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0991661630919503,0.29716885815658106,-0.9496613827251977,0.6042242880825712,-0.6653939361159101,-0.4383650527486035))
push(move(8.510098072813419,10.513016164682256,1.3726368348613516))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6042242880825712,-0.6653939361159101,-0.4383650527486035,0.6553156582708506,0.16061025395253095,0.7380824712390516))
push(move(10.190201847821232,10.099159305360498,1.549170319728788))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6553156582708506,0.16061025395253095,0.7380824712390516,-0.05527282970389685,0.9958817813693587,-0.07186370316868569))
push(move(10.115255797843812,10.906421673305772,3.180527071369661))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05527282970389685,0.9958817813693587,-0.07186370316868569,0.5713024183478287,0.4729830203194895,-0.6707463076897076))
push(move(10.109473684210526,11.553684210526315,1.4442105263157894))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5713024183478287,0.4729830203194895,-0.6707463076897076,0.6126230036639309,0.5925927193950254,0.5229980155811225))
push(move(11.668517528703061,12.192371813221328,1.3568964733012754))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6126230036639309,0.5925927193950254,0.5229980155811225,-0.02122521903640778,0.5156285480727691,0.8565492925040709))
push(move(11.634100885824813,13.028462294380093,2.745789141836881))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub84 inherits .../COPOLYFF



DPDPoly_sub85 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.6780222213423965,0.017400830474627083,-0.7348354090983338))
push(move(10.054854725235304,13.001741332881922,2.4319923396218304))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6780222213423965,0.017400830474627083,-0.7348354090983338,-0.8960776414768619,0.1739687334197956,0.4083867532591828))
push(move(8.963527271624685,13.029749270402004,1.249219813012817))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8960776414768619,0.1739687334197956,0.4083867532591828,-0.4960827674588411,0.6303296429857947,0.5971485820160489))
push(move(8.771232620816027,13.250949773489175,3.0170022086009616))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4960827674588411,0.6303296429857947,0.5971485820160489,-0.9606725383384437,-0.2284915563874078,-0.15779696683406713))
push(move(7.657640578088187,14.689027010552602,2.821151834182339))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9606725383384437,-0.2284915563874078,-0.15779696683406713,-0.3123990677874297,-0.4608886142366044,-0.8306554687188951))
push(move(7.249623940755379,12.889042128954049,2.7670676837344144))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3123990677874297,-0.4608886142366044,-0.8306554687188951,0.5701001534103601,0.6254429238367349,-0.5327353602906794))
push(move(7.089594257374136,13.85097687349443,1.3107414922800324))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5701001534103601,0.6254429238367349,-0.5327353602906794,0.9915345498783185,0.12474085289142237,0.0360410324147476))
push(move(8.665263157894737,14.442105263157893,1.4442105263157894))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9915345498783185,0.12474085289142237,0.0360410324147476,0.9142387170416423,0.40517572112655137,0.00045085655260528317))
push(move(10.82244256037989,14.320591049912569,1.446425827943854))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9142387170416423,0.40517572112655137,0.00045085655260528317,-0.6738666882749113,0.7387287840745178,0.013545110305495893))
push(move(11.639755607736634,15.76035191021526,1.4456773963866891))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6738666882749113,0.7387287840745178,0.013545110305495893,-0.9999029441400048,-0.005724489907539932,0.012701673726271527))
push(move(9.520165325272782,15.748217159286488,1.472602353812819))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub85 inherits .../COPOLYFF



DPDPoly_sub86 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.06236655729749602,-0.0025433500909726953,0.9980500708387194))
push(move(8.624381791688336,17.029746857823838,1.3091613876092136))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.06236655729749602,-0.0025433500909726953,0.9980500708387194,-0.4259695278155266,-0.5319462486967953,0.7318354663925658))
push(move(8.730206369839161,17.025431260456756,3.002668810443168))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4259695278155266,-0.5319462486967953,0.7318354663925658,-0.6203859929332075,-0.4476763508210668,-0.6439775653606353))
push(move(7.63188026663571,15.790321432758612,3.0143251823226676))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6203859929332075,-0.4476763508210668,-0.6439775653606353,-0.8673522327484019,0.017894652719892195,-0.4973729845401704))
push(move(7.147270264072703,15.88316972089177,1.359537999746935))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8673522327484019,0.017894652719892195,-0.4973729845401704,-0.9998021478556838,0.0007385671502638673,0.019877617103814284))
push(move(4.957715971241928,15.845493068427748,1.4808569712174973))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9998021478556838,0.0007385671502638673,0.019877617103814284,-0.6965023766986954,-0.7173058737210614,-0.018887106139721138))
push(move(2.888421052631579,15.886315789473683,1.4442105263157894))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6965023766986954,-0.7173058737210614,-0.018887106139721138,0.4778548520110507,-0.878438647493838,0.0005319762150969931))
push(move(3.551383797631697,14.397155830420136,1.442721358304619))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4778548520110507,-0.878438647493838,0.0005319762150969931,0.1994421452823865,-0.9798730161561136,0.008467756153808036))
push(move(4.356531226712023,13.187494776641643,1.4458449131813111))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1994421452823865,-0.9798730161561136,0.008467756153808036,0.33790209700740453,-0.9403488901781993,-0.039574456138113674))
push(move(4.240839417086418,11.009812817315563,1.4719937172443462))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.33790209700740453,-0.9403488901781993,-0.039574456138113674,0.7802357890874672,-0.6175671897371535,-0.09921128759980906))
push(move(5.496063796872646,10.016285727740797,1.312385008329684))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub86 inherits .../COPOLYFF



DPDPoly_sub87 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.7031049947803731,-0.698801838122454,-0.13160302941638888))
push(move(5.67406967617026,9.813322361887638,3.025820284671636))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7031049947803731,-0.698801838122454,-0.13160302941638888,0.48652485749206964,-0.869621942607016,-0.08397166175991184))
push(move(6.777459141748878,8.716685881653072,2.8192943783357904))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.48652485749206964,-0.869621942607016,-0.08397166175991184,0.48220273521291734,-0.6103424702432545,-0.6284604929273939))
push(move(7.17387696664009,7.132543960969452,2.766961341369987))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.48220273521291734,-0.6103424702432545,-0.6284604929273939,0.9113758023909037,0.027478113806463374,-0.41065691285789363))
push(move(7.934900627001657,7.251667863952956,1.3107872852862477))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9113758023909037,0.027478113806463374,-0.41065691285789363,0.9921961077793839,0.11948724849534395,0.03563258557069705))
push(move(10.109473684210526,7.221052631578947,1.4442105263157894))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9921961077793839,0.11948724849534395,0.03563258557069705,0.43339463741772183,0.9012041249292316,0.00046202608058750866))
push(move(11.71203233279819,7.706536685944449,1.4464348328459826))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.43339463741772183,0.9012041249292316,0.00046202608058750866,0.4690250070905834,0.8831448405930514,0.008410306626512955))
push(move(11.463788300990439,10.037224807511139,1.4456543113104572))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4690250070905834,0.8831448405930514,0.008410306626512955,0.4778699819383737,0.8774093212322414,-0.042345759846715465))
push(move(13.148802022206066,10.411884416105002,1.4721982216992902))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4778699819383737,0.8774093212322414,-0.042345759846715465,-0.042680905224427336,0.8721880740442599,0.487305144467189))
push(move(12.982452762998234,12.825619988528441,1.3110800483800504))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.042680905224427336,0.8721880740442599,0.487305144467189,0.017860480533656145,0.20108673042123085,0.9794106034159555))
push(move(13.013551116010715,13.175748649231672,3.0164124794869305))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub87 inherits .../COPOLYFF



DPDPoly_sub88 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9832045771701335,0.17307818683827197,0.05790251007059323))
push(move(12.845397082311113,15.54252114822496,2.8985526921850266))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9832045771701335,0.17307818683827197,0.05790251007059323,0.5881320827399582,0.4525713538827715,0.6702833899901401))
push(move(14.527468031542128,15.838624112741426,2.997612574877627))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5881320827399582,0.4525713538827715,0.6702833899901401,-0.05697208077934646,0.9957124685126343,-0.07287566164466842))
push(move(14.36544321350944,16.71220625085668,4.630921497869617))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05697208077934646,0.9957124685126343,-0.07287566164466842,-0.5379949105786548,0.18737370217627267,-0.8218592166084303))
push(move(14.442105263157893,17.330526315789474,2.888421052631579))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5379949105786548,0.18737370217627267,-0.8218592166084303,-0.5926679927610747,0.5174595522544406,-0.6172359857762608))
push(move(12.838931220451542,17.24386221624136,2.298970161362469))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5926679927610747,0.5174595522544406,-0.6172359857762608,0.15761664674218928,0.9500951172779182,-0.26921415414945576))
push(move(13.023030113251346,18.56952352949943,1.4105206771404557))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.15761664674218928,0.9500951172779182,-0.26921415414945576,0.828390203708069,0.5600421011736266,0.011068663583883106))
push(move(13.346263166284391,20.30200115357909,1.4324313566523865))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.828390203708069,0.5600421011736266,0.011068663583883106,0.8125037262534772,-0.5829399369112603,0.004327213665897621))
push(move(15.649066201674474,20.344883453041625,1.4456088637121733))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8125037262534772,-0.5829399369112603,0.004327213665897621,-0.49196007375641976,-0.8706176015809157,-0.0005269222637376602))
push(move(15.594645259385654,18.688874132551785,1.4444057383137354))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.49196007375641976,-0.8706176015809157,-0.0005269222637376602,-0.8724421736352452,-0.488717329443005,-0.00015988966755636598))
push(move(14.30512457275222,17.966521264616627,1.4441694120102582))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub88 inherits .../COPOLYFF



DPDPoly_sub89 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.8964411814892654,-0.44316273323376654,1.7050727293765782e-06))
push(move(14.324935044736055,15.860380705655718,1.4442081882967166))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8964411814892654,-0.44316273323376654,1.7050727293765782e-06,0.08233407768820435,-0.9966047860855043,1.6428973724578918e-06))
push(move(12.715899408204152,15.064941311214477,1.4442112487571697))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.08233407768820435,-0.9966047860855043,1.6428973724578918e-06,0.48680231250355893,-0.8735121685047044,3.923803479991983e-06))
push(move(14.442105263157893,14.442105263157893,1.4442105263157894))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.48680231250355893,-0.8735121685047044,3.923803479991983e-06,0.39181618505008375,-0.92004351909926,-9.81062168508735e-06))
push(move(14.30316681988507,12.216767908660826,1.4442240427091162))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.39181618505008375,-0.92004351909926,-9.81062168508735e-06,0.9437870606177633,-0.33055401645544985,-0.00016252892789002287))
push(move(15.691873857722197,11.507460040026798,1.4441792335633636))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9437870606177633,-0.33055401645544985,-0.00016252892789002287,0.2962260344237525,-0.9551160378704985,0.0018683501112827612))
push(move(17.555366744339672,11.077710390070868,1.4436639835717726))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.2962260344237525,-0.9551160378704985,0.0018683501112827612,-0.5866304420116164,-0.8098332270519587,0.0059049866948545195))
push(move(16.108215905634445,10.165056196372769,1.4468051766647583))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5866304420116164,-0.8098332270519587,0.0059049866948545195,-0.9664883078998707,-0.2423755355194539,-0.08458398474003641))
push(move(15.654658981185158,8.453816041458714,1.4627963934306047))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9664883078998707,-0.2423755355194539,-0.08458398474003641,-0.5122478771240131,0.6386218205320302,0.5742510624476871))
push(move(14.28963590258838,9.708993460258505,1.287648835125115))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5122478771240131,0.6386218205320302,0.5742510624476871,0.015190559929006985,0.2397305539211488,0.9707206129498346))
push(move(14.31586309282225,10.122899127458753,2.963641971570249))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub89 inherits .../COPOLYFF



DPDPoly_sub90 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.07879724246898054,-0.3563747119151924,-0.9310145322639428))
push(move(12.866727548767708,9.258490374965696,2.993992656084281))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07879724246898054,-0.3563747119151924,-0.9310145322639428,0.054604116537064554,-0.9213451654681334,-0.3848915126703945))
push(move(12.997894736842104,8.665263157894737,1.4442105263157894))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.054604116537064554,-0.9213451654681334,-0.3848915126703945,0.007103756603243125,-0.8769451548345639,0.48053796109600405))
push(move(12.991314023516278,7.156320182093942,2.115812039578936))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.007103756603243125,-0.8769451548345639,0.48053796109600405,0.14379271222475937,-0.9646244895591078,0.22095983810158426))
push(move(13.019589017019559,5.987145796644363,2.9117333802322882))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.14379271222475937,-0.9646244895591078,0.22095983810158426,0.6279166835699814,-0.6177169092816617,0.473441082376664))
push(move(13.43299961691784,4.193299779400466,2.794530562234403))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6279166835699814,-0.6177169092816617,0.473441082376664,0.5318689181694252,-0.5703647255203621,0.6259389217546448))
push(move(14.543898861750685,4.487596587788248,4.061043347064024))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5318689181694252,-0.5703647255203621,0.6259389217546448,0.5156531413462284,-0.8513625564305881,0.09635162337885339))
push(move(14.708436549075575,2.8255487962588868,4.295550063108027))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5156531413462284,-0.8513625564305881,0.09635162337885339,-0.324453830749784,-0.9445804391615483,0.04997505042685672))
push(move(16.101019096877273,1.9167330406639143,4.351996800889243))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.324453830749784,-0.9445804391615483,0.04997505042685672,-0.947748890265762,-0.18488524186903793,-0.25997978448149345))
push(move(14.244846240335153,1.475901185660112,4.366956059465553))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.947748890265762,-0.18488524186903793,-0.25997978448149345,-0.8276859085827095,-0.11299597971153305,-0.5496980492076041))
push(move(12.900317835163797,1.2923456813112777,3.474003027689913))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub90 inherits .../COPOLYFF



DPDPoly_sub91 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.08245637216029493,-0.3896578212995437,-0.9172609928424165))
push(move(12.997894736842104,2.8884210526315783,2.888421052631579))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08245637216029493,-0.3896578212995437,-0.9172609928424165,0.5377999452783168,-0.5879557943034376,-0.6042178438308927))
push(move(12.856388484667994,2.2197156939330696,1.3142775151217447))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5377999452783168,-0.5879557943034376,-0.6042178438308927,0.7080925080939375,-0.2703344526484765,0.6523222238223113))
push(move(14.344265296720481,1.4164864068398408,1.37577471670436))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7080925080939375,-0.2703344526484765,0.6523222238223113,0.9752953434457188,-0.06257728336010115,0.21185626415182335))
push(move(14.841060038434664,1.4620108855334624,3.1426337633680617))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9752953434457188,-0.06257728336010115,0.21185626415182335,0.4719432356471487,0.6522083300187098,-0.5932064367326991))
push(move(15.969017760239979,1.3122384003431906,1.7287077942648497))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4719432356471487,0.6522083300187098,-0.5932064367326991,-0.45818413278550524,0.6647818057852541,0.5900275003425611))
push(move(15.9656887284691,3.0162066964188394,1.7290379588898295))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.45818413278550524,0.6647818057852541,0.5900275003425611,-0.9729143963199303,-0.006098124738381029,-0.2310852446784536))
push(move(14.873539079493442,2.901674270063402,3.1394125774050248))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9729143963199303,-0.006098124738381029,-0.2310852446784536,0.11032084794798824,0.6824632085608898,-0.72254638568663))
push(move(14.439459270703413,3.006640451281496,1.3665301072049314))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.11032084794798824,0.6824632085608898,-0.72254638568663,0.9086844215621276,0.4167691243575809,0.02441554817154108))
push(move(15.12676860801975,4.468194467786168,1.4808857985673907))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9086844215621276,0.4167691243575809,0.02441554817154108,0.9979756706158665,-0.06138989981636468,-0.016608463485467618))
push(move(17.330526315789474,4.332631578947368,1.4442105263157894))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub91 inherits .../COPOLYFF



DPDPoly_sub92 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.43320930269563446,0.0694569403056207,0.898613061056506))
push(move(19.524916891307146,4.295820048988566,1.299754359751933))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.43320930269563446,0.0694569403056207,0.898613061056506,0.26273507350966707,-0.6150844498444951,0.7433985476898409))
push(move(20.243717635146158,4.4110661899319865,2.790774364843289))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.26273507350966707,-0.6150844498444951,0.7433985476898409,-0.015350433988020055,-0.25437222581638513,0.9669845577410208))
push(move(20.227597760482077,2.6507862510293037,3.2879622174091945))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.015350433988020055,-0.25437222581638513,0.9669845577410208,-0.0022992290873753317,0.9535340422657274,0.30127652378833947))
push(move(20.217968512278443,3.984377165908819,4.412813468616438))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0022992290873753317,0.9535340422657274,0.30127652378833947,-0.0005759287401496244,0.9611874544334745,-0.27589553411714307))
push(move(20.21915689386051,6.151374215091387,4.3940003096853175))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0005759287401496244,0.9611874544334745,-0.27589553411714307,-0.0027328366604360936,0.30003174220048234,-0.9539253038241153))
push(move(20.216003550257025,7.263770451499495,3.471509087317074))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0027328366604360936,0.30003174220048234,-0.9539253038241153,0.07612520953576152,-0.8093329354542081,-0.5823960439960174))
push(move(20.21044295084826,7.1080576280633965,1.3523070918623514))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.07612520953576152,-0.8093329354542081,-0.5823960439960174,-0.5769176883777039,-0.5349296610702857,0.6172651282424401))
push(move(20.372235752038232,5.602771851283369,2.2762543639863106))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5769176883777039,-0.5349296610702857,0.6172651282424401,-0.6223544184153296,-0.6084323270157351,0.4924277422334514))
push(move(18.774736842105263,5.776842105263157,2.888421052631579))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6223544184153296,-0.6084323270157351,0.4924277422334514,0.0030480597438336987,-0.9365915553952028,0.35040971404085375))
push(move(18.780368050851823,4.0465142895548105,3.5357936149898346))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub92 inherits .../COPOLYFF



DPDPoly_sub93 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9640167188836483,0.09402014467014219,-0.24866036698479055))
push(move(18.85391531937467,5.6709386283431416,4.341382092630197))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9640167188836483,0.09402014467014219,-0.24866036698479055,-0.5966674813239096,-0.452155846184593,-0.6629803975169076))
push(move(17.14749702618858,5.837364885948843,3.901225204578937))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5966674813239096,-0.452155846184593,-0.6629803975169076,-0.6441032427173493,-0.5961118976356851,-0.4793554195147666))
push(move(17.483802265705116,4.632664134523011,2.8189962992072926))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6441032427173493,-0.5961118976356851,-0.4793554195147666,-0.6004573699113848,0.7992717432321064,0.024811839710350784))
push(move(15.773671572970343,4.565901487498746,2.8787948971499717))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6004573699113848,0.7992717432321064,0.024811839710350784,0.5166710944940911,0.8561802482107391,0.0025224369318510077))
push(move(15.767955847719499,6.916635697440665,2.889897762698234))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5166710944940911,0.8561802482107391,0.0025224369318510077,0.4153438866729945,0.9095671829973017,0.013303962482059192))
push(move(17.438289465786664,7.324354545615033,2.886921718439193))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.4153438866729945,0.9095671829973017,0.013303962482059192,-0.9127601850313538,0.4084955764671336,0.00045675848422973366))
push(move(16.62958492295381,8.803528838031097,2.917496774645155))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9127601850313538,0.4084955764671336,0.00045675848422973366,-0.6950176340782596,0.00015032558250807,0.7189926743176719))
push(move(14.442105263157893,8.665263157894737,2.888421052631579))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6950176340782596,0.00015032558250807,0.7189926743176719,-0.0005438343614258827,-0.4287072161229895,0.9034433170311593))
push(move(14.472822174025634,8.8039953249239,5.148658317441339))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0005438343614258827,-0.4287072161229895,0.9034433170311593,-0.02043892386823619,-0.9335145189745937,0.3579565521885878))
push(move(14.440402921103471,7.32329881212067,5.716432045420319))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub93 inherits .../COPOLYFF



DPDPoly_sub94 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0001973993307569161,-0.9981948972711122,-0.06005753987150835))
push(move(14.441548052927374,6.898207009978587,7.374939404868297))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.0001973993307569161,-0.9981948972711122,-0.06005753987150835,-0.00017959100838757736,-0.9995034181351901,0.03151007589868878))
push(move(14.441991979903285,4.653388649060164,7.239877335743598))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00017959100838757736,-0.9995034181351901,0.03151007589868878,0.007090214861045726,-0.49225218169636453,0.8704237579871044))
push(move(14.440796883400658,2.7176162538376483,7.506735584488305))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.007090214861045726,-0.49225218169636453,0.8704237579871044,0.01075479012937398,0.48219574071936594,0.8759974897917089))
push(move(14.453207775948796,3.874709838746981,8.616774303476701))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.01075479012937398,0.48219574071936594,0.8759974897917089,-0.4001174920630324,-0.6084702097758573,0.6853247378874582))
push(move(14.473865623177003,4.200267730927782,10.200245423935055))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4001174920630324,-0.6084702097758573,0.6853247378874582,-0.9941396388202998,0.08915362036023222,-0.061139271363891884))
push(move(13.622114817668544,2.6108428079390453,10.040277587116694))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9941396388202998,0.08915362036023222,-0.061139271363891884,-0.17853346590034788,0.6119263327065592,-0.7705011128440443))
push(move(12.997894736842104,4.332631578947368,10.109473684210526))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.17853346590034788,0.6119263327065592,-0.7705011128440443,-0.4105642393529091,0.000619553063139225,-0.9118314655234098))
push(move(13.130886283267348,4.2945365292311966,7.9202709513404415))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4105642393529091,0.000619553063139225,-0.9118314655234098,-0.8989155792762747,0.01691779684157765,0.43779512272800214))
push(move(11.651472546824793,4.334663368158768,7.119173991593071))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8989155792762747,0.01691779684157765,0.43779512272800214,-0.27512458750488644,-0.0015017991280568486,0.9614074089321577))
push(move(11.145520359683104,4.331901570093467,8.887195474859485))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub94 inherits .../COPOLYFF



DPDPoly_sub95 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.1505228077934859,0.022086098217386857,-0.9883597971384193))
push(move(10.071276247244633,4.339521552279607,7.606621873827094))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.1505228077934859,0.022086098217386857,-0.9883597971384193,0.6289956352346386,-0.33082837595912157,-0.7035034303512837))
push(move(10.364883520513338,4.382602326348402,5.6787437714975395))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6289956352346386,-0.33082837595912157,-0.7035034303512837,0.39912642683060484,-0.9166638750110125,0.020626091613018))
push(move(11.69846945287377,3.4836782754193627,5.78667919397468))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.39912642683060484,-0.9166638750110125,0.020626091613018,0.593693176140854,-0.7443699760065253,0.3056824355827954))
push(move(11.671779991970295,1.3810852549859591,5.746281685644331))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.593693176140854,-0.7443699760065253,0.3056824355827954,-0.07974929932201884,0.04262807779001243,0.9959030556442607))
push(move(13.270898283654315,1.5121737035655862,6.5962958345061296))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07974929932201884,0.04262807779001243,0.9959030556442607,-0.5552288903260213,0.7897790349437138,0.2607104817814406))
push(move(11.553684210526315,1.4442105263157894,7.221052631578947))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5552288903260213,0.7897790349437138,0.2607104817814406,0.5860880570053337,0.6066903776748837,0.5370545364042835))
push(move(12.221819032178447,3.0044245810795056,7.088896204992234))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5860880570053337,0.6066903776748837,0.5370545364042835,0.251132712382037,-0.6394322502444171,0.7266765154585653))
push(move(13.020957207463617,2.963061487402596,8.565570080330705))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.251132712382037,-0.6394322502444171,0.7266765154585653,0.45906705696346356,-0.5801005897483112,0.6728601214105095))
push(move(12.896161932495506,1.2874176882055746,9.040171864696669))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.45906705696346356,-0.5801005897483112,0.6728601214105095,0.7164437299573047,0.09586297161717049,0.6910272588527824))
push(move(14.208076433124655,1.4629569766092307,10.305545045187763))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub95 inherits .../COPOLYFF



DPDPoly_sub96 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.7006459678926505,-0.007246363199034725,0.7134722965162407))
push(move(14.689975260811247,1.4477867148960126,8.47490415455194))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.7006459678926505,-0.007246363199034725,0.7134722965162407,0.8704373027261362,-0.00830008963434516,0.49220931577420474))
push(move(15.885380592242473,1.435423350802636,9.692193093856405))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8704373027261362,-0.00830008963434516,0.49220931577420474,0.9637905893000075,0.21988042701141725,0.15086516428261768))
push(move(17.53980938101854,1.4206120079221114,10.086410115962405))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9637905893000075,0.21988042701141725,0.15086516428261768,0.3904122575665577,0.9206112671601939,0.00729135923446518))
push(move(18.87098669258512,2.1165633738734426,10.159539382367603))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3904122575665577,0.9206112671601939,0.00729135923446518,-0.05942502723067867,0.7390674059601113,0.6710052425920567))
push(move(18.774736842105263,4.332631578947368,10.109473684210526))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05942502723067867,0.7390674059601113,0.6710052425920567,0.027704045264746742,-0.8865696742329593,0.46176476544495404))
push(move(18.734866303451007,3.8094888563491733,11.696560045027176))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.027704045264746742,-0.8865696742329593,0.46176476544495404,-0.5333968342243941,-0.8394612632943134,0.10388746155195934))
push(move(18.862186526220118,1.5341147119489265,11.567065255680998))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5333968342243941,-0.8394612632943134,0.10388746155195934,-0.8560580447973843,-0.030593205290894317,0.5159735261888044))
push(move(17.25115647970736,1.4744226484420446,11.985535976975786))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8560580447973843,-0.030593205290894317,0.5159735261888044,-0.9104097768924375,-0.003963841426739444,0.4136886825860794))
push(move(16.316036548465288,1.4431221800239493,13.101711171588077))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9104097768924375,-0.003963841426739444,0.4136886825860794,-0.9957800344388843,0.009894045885321424,0.09123722304472894))
push(move(14.410559896587756,1.462054949084446,13.276298321642594))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub96 inherits .../COPOLYFF



DPDPoly_sub97 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.206416893443724,0.9774802718850735,-0.04386780341577782))
push(move(13.504170641283512,1.2897088259274099,14.555509858371336))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.206416893443724,0.9774802718850735,-0.04386780341577782,0.43994422866762506,0.7739987554996167,-0.4553844553199998))
push(move(13.149501445315702,2.9692329013073766,14.480135414415809))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.43994422866762506,0.7739987554996167,-0.4553844553199998,0.8790226896219757,-0.025955523336084727,-0.4760729166189751))
push(move(14.415685341683309,2.8933467367273673,13.612004754065644))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.8790226896219757,-0.025955523336084727,-0.4760729166189751,0.6414091534720565,0.7671898272346389,-0.0037505772814946867))
push(move(15.886315789473683,2.888421052631579,12.997894736842104))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.6414091534720565,0.7671898272346389,-0.0037505772814946867,0.5120387746052429,0.5939884964372709,0.6204788146270196))
push(move(15.747125512924548,4.485883028762565,13.604219287907428))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.5120387746052429,0.5939884964372709,0.6204788146270196,0.9169643441808741,-0.046522777915352656,0.39624742603072904))
push(move(17.124048120987695,4.324247406123281,14.497755153615095))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.9169643441808741,-0.046522777915352656,0.39624742603072904,0.90070213616181,-0.0004636790482094252,0.43443693088328994))
push(move(18.784054177778472,4.3318024925711835,14.916566026495484))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.90070213616181,-0.0004636790482094252,0.43443693088328994,0.44510276849388464,-0.022976523901848487,0.8951846763816207))
push(move(19.935123541626616,4.322800272022944,15.853625123489834))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.44510276849388464,-0.022976523901848487,0.8951846763816207,0.09081364245685618,0.31587034330959235,0.944446297341039))
push(move(20.180276501631976,4.25972849558198,17.724629506677513))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.09081364245685618,0.31587034330959235,0.944446297341039,0.03384723482300189,0.6579591701650873,0.7522925595076069))
push(move(20.23765243963383,5.375064054086415,18.999873746843086))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub97 inherits .../COPOLYFF



DPDPoly_sub98 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.4742098905398558,0.8665816822014185,0.1554386302922732))
push(move(20.250373861151786,5.8723378626644855,17.243211227332413))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4742098905398558,0.8665816822014185,0.1554386302922732,-0.6107431496408027,0.5582120096621915,-0.5615978609607853))
push(move(19.412906246873803,7.402744774135742,17.517720092445522))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6107431496408027,0.5582120096621915,-0.5615978609607853,-0.4961135917600037,0.5999159146662042,-0.6276720476500446))
push(move(18.774736842105263,7.221052631578947,15.886315789473683))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4961135917600037,0.5999159146662042,-0.6276720476500446,-0.9963527390066207,0.07552434891474993,0.03971513810888499))
push(move(18.134348725453794,8.94881611274783,15.900117126437122))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9963527390066207,0.07552434891474993,0.03971513810888499,-0.26486667751854304,-0.612905409298521,-0.7444411342697962))
push(move(17.304340209221227,7.332509893648329,15.944926563613825))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.26486667751854304,-0.612905409298521,-0.7444411342697962,-0.3301131172075117,-0.033504680537084074,-0.943346578002829))
push(move(17.40339065358939,7.257368323190589,13.845667464364006))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3301131172075117,-0.033504680537084074,-0.943346578002829,-0.9675392521656958,0.009044554751532971,-0.252558887287683))
push(move(16.254965618978986,7.226004097370931,12.946184989446492))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9675392521656958,0.009044554751532971,-0.252558887287683,-0.9566867081413887,-0.28710887460714923,0.04815637639409291))
push(move(14.076435953131822,7.2884686882422445,12.977225201868393))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9566867081413887,-0.28710887460714923,0.04815637639409291,-0.45260017121478086,-0.6034204917023974,-0.656533925406744))
push(move(12.902922150157774,6.22003064777925,13.114915531639891))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.45260017121478086,-0.6034204917023974,-0.656533925406744,0.032197681335959,-0.2318164641187723,-0.9722265354741445))
push(move(12.961064145849472,5.801420633057311,11.359286284705249))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub98 inherits .../COPOLYFF



DPDPoly_sub99 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.3420654989418128,0.028423502327925128,0.9392461333160244))
push(move(13.824888595363259,5.725555262690124,9.858925836946742))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.3420654989418128,0.028423502327925128,0.9392461333160244,0.05903061409142166,-0.6744225511050278,0.7359820712225099))
push(move(14.442105263157893,5.776842105263158,11.553684210526315))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.05903061409142166,-0.6744225511050278,0.7359820712225099,-0.8785775203124313,-0.47754537808644576,0.007207820054145541))
push(move(13.956992993112957,4.216267475092945,11.505977451941783))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8785775203124313,-0.47754537808644576,0.007207820054145541,-0.785922511830609,0.5968480657678207,0.16154934783860134))
push(move(11.647775823255529,4.258001618197511,11.576608794082306))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.785922511830609,0.5968480657678207,0.16154934783860134,-0.5110258834969699,0.5856739121526222,0.6291570670508152))
push(move(11.695799059188003,5.933471404835979,11.970774426024274))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5110258834969699,0.5856739121526222,0.6291570670508152,-0.9464049509495083,-0.07946939041529119,-0.31305316610007433))
push(move(10.338172720869364,5.758904795729543,13.18894600342214))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9464049509495083,-0.07946939041529119,-0.31305316610007433,-0.937581985499428,-0.012673319736415162,-0.3475333184513522))
push(move(9.856998958735135,5.779067813717866,11.362533532214098))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.937581985499428,-0.012673319736415162,-0.3475333184513522,-0.8616150022206792,-0.03774377102599231,0.5061570859891189))
push(move(8.699506440564639,5.736754901605328,12.581541916060884))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8616150022206792,-0.03774377102599231,0.5061570859891189,-0.4318877710569545,-0.8703580930820665,0.23653698023354483))
push(move(7.1086218142345,5.658672837576847,12.97707200133797))
mon[8] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4318877710569545,-0.8703580930820665,0.23653698023354483,0.47874698630843193,-0.8777671929407754,0.018057632665047046))
push(move(7.9213448019756765,4.168571393620356,13.007726717901793))
mon[9] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub99 inherits .../COPOLYFF



DPDPoly_sub100 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.042378703665806705,-0.9989494843450876,-0.01743482728017843))
push(move(10.109473684210526,4.332631578947368,12.997894736842104))
mon[0] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.042378703665806705,-0.9989494843450876,-0.01743482728017843,-0.40792443875067497,-0.9125879125708378,0.02794555598924125))
push(move(10.203702804609865,2.1114656845040307,12.959128368434966))
mon[1] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.40792443875067497,-0.9125879125708378,0.02794555598924125,-0.5568689329618496,-0.3500471183515594,-0.7532356911589496))
push(move(8.80795125705331,1.4209314645801232,13.08705773960499))
mon[2] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5568689329618496,-0.3500471183515594,-0.7532356911589496,0.47561595452747857,0.007736770490968794,-0.8796190119485171))
push(move(9.12942587150237,1.4361765410682055,11.50603289065083))
mon[3] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(0.47561595452747857,0.007736770490968794,-0.8796190119485171,-0.5234708019561068,0.0026991038119642515,-0.8520393384920925))
push(move(10.267109616482381,1.444667365845456,10.388444662857866))
mon[4] = new ABEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5234708019561068,0.0026991038119642515,-0.8520393384920925,-0.972400571888586,0.009908318728994468,0.23310717065486308))
push(move(8.253140450955948,1.4406948166054987,10.079726691216916))
mon[5] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.972400571888586,0.009908318728994468,0.23310717065486308,-0.871028369746851,0.03174792930567315,0.49020572016342795))
push(move(7.296754277541406,1.474933933232841,11.1005083420835))
mon[6] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.871028369746851,0.03174792930567315,0.49020572016342795,-0.5232333094903563,0.8242336432984877,0.21648511518039845))
push(move(5.689293653113748,1.5341439276971698,11.522633041431668))
mon[7] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5232333094903563,0.8242336432984877,0.21648511518039845,0.05486516038300809,0.9949927001765274,0.08354244892011391))
push(move(5.814758422301241,3.8094772831347123,11.713676574302962))
mon[8] = new BBEAD.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub100 inherits .../COPOLYFF



DPDPoly_sub101 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.0012239308983366078,-0.9977679602613948,0.06676525645102901))
push(move(5.776842105263158,4.332631578947368,10.109473684210526))
mon[0] = new BBEAD.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0012239308983366078,-0.9977679602613948,0.06676525645102901,0.0013903876540788053,-0.9171466703091276,-0.3985474274952125))
push(move(5.774123662450364,2.116513704895563,10.257764353063047))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0013903876540788053,-0.9171466703091276,-0.3985474274952125,0.021653882545732514,-0.18606667853085376,-0.9822984783207146))
push(move(5.781256530670964,1.4207274403996675,8.844101480286275))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.021653882545732514,-0.18606667853085376,-0.9822984783207146,-0.3145683212152042,0.005258388685637127,-0.9492202698195393))
push(move(5.853152269918945,1.4374396187799847,6.672740711402506))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3145683212152042,0.005258388685637127,-0.9492202698195393,-0.9342453460607149,-0.013130045772129352,-0.35638916266059034))
push(move(4.73513089683401,1.4382146914218703,5.68738292522074))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9342453460607149,-0.013130045772129352,-0.35638916266059034,-0.7243641105545559,0.3410551147754193,-0.5991477647676178))
push(move(2.790113573017337,1.3943911428505067,5.5042748464253135))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7243641105545559,0.3410551147754193,-0.5991477647676178,0.039977386604698,0.9162052480293201,-0.39871011028539316))
push(move(2.9198514188370686,2.2929096462060516,4.185899588563243))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.039977386604698,0.9162052480293201,-0.39871011028539316,-0.3377440889039036,0.7914780671188913,-0.5094029835800097))
push(move(2.9210456189109286,4.395103239644426,4.198438350049853))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3377440889039036,0.7914780671188913,-0.5094029835800097,-0.5477662395170306,-0.07669837050205636,-0.8331083403781889))
push(move(2.0734361176520197,4.276420738097892,2.9092925540161074))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub101 inherits .../COPOLYFF



DPDPoly_sub102 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.05339513711747403,-0.9983564761951589,0.02081599796769517))
push(move(1.4442105263157894,4.332631578947368,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05339513711747403,-0.9983564761951589,0.02081599796769517,0.39856485844417555,-0.9171362311924636,-0.0026808669229192255))
push(move(1.3252526897349886,2.108415424518918,1.490586024501316))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.39856485844417555,-0.9171362311924636,-0.0026808669229192255,0.983227984915368,-0.1774220411404789,-0.04223918792793281))
push(move(2.708812462206623,1.4226603939085842,1.4357044339477283))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.983227984915368,-0.1774220411404789,-0.04223918792793281,0.932248819208537,-0.03339317252525835,0.3602735559446278))
push(move(4.89571032415294,1.4641316052798168,1.3372002042005608))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.932248819208537,-0.03339317252525835,0.3602735559446278,0.261201743480512,0.6759575195537664,0.6890972942636332))
push(move(5.79352916952717,1.3121657758659953,2.6278130580934653))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.261201743480512,0.6759575195537664,0.6890972942636332,-0.6302374671321248,0.7044952400352704,-0.32632375302838584))
push(move(5.49595385580762,3.0174869672273226,2.920750865275485))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6302374671321248,0.7044952400352704,-0.32632375302838584,-0.8810424798414959,-0.013914803529256873,-0.47283245125254425))
push(move(4.3814746340162865,2.890595734123431,1.8966808110605151))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8810424798414959,-0.013914803529256873,-0.47283245125254425,-0.5178047935198175,0.8295673287798272,-0.20903646291736142))
push(move(2.8015912340829026,2.974933370351247,1.4747569295205074))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5178047935198175,0.8295673287798272,-0.20903646291736142,0.03616438277319372,0.9962650565019106,-0.07840965891954153))
push(move(2.885527521478684,5.287230268361707,1.2927708105550206))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub102 inherits .../COPOLYFF



DPDPoly_sub103 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9182715816604613,-0.07375896159641053,-0.3890204594864052))
push(move(2.8884210526315783,5.776842105263158,2.888421052631579))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9182715816604613,-0.07375896159641053,-0.3890204594864052,-0.6022154706503393,0.5323767912487597,-0.5949045965943318))
push(move(1.3176647850727428,5.650673166214979,2.2229792191361453))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6022154706503393,0.5323767912487597,-0.5949045965943318,0.7715603522985053,0.5494537664577511,-0.32061687617216506))
push(move(1.3907365770534144,7.100840730788895,1.4089184124764824))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7715603522985053,0.5494537664577511,-0.32061687617216506,0.9304717017414906,0.03537847719858869,0.364651581114635))
push(move(3.4670238268387235,7.181303164827764,1.329827076610299))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9304717017414906,0.03537847719858869,0.364651581114635,-0.5391257003571297,-0.008122244899181364,0.8421861482785337))
push(move(4.4791804507931445,7.218269816446976,2.6192786412025897))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5391257003571297,-0.008122244899181364,0.8421861482785337,-0.9573294792846523,0.2751340020769337,0.08843952167275898))
push(move(2.4927484634635855,7.16662513501889,2.8517749546284374))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9573294792846523,0.2751340020769337,0.08843952167275898,-0.31927483822914354,0.9474344845376957,0.020771980708275115))
push(move(1.3656911918140682,8.113078530461047,2.9069074113968774))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.31927483822914354,0.9474344845376957,0.020771980708275115,0.034800178430724124,0.970581151666669,-0.23824604007326622))
push(move(1.4374526829007794,10.298170418818405,2.9204323650180477))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.034800178430724124,0.970581151666669,-0.23824604007326622,0.03383323350876155,0.8200288057850272,-0.5713213368964297))
push(move(1.487731404646251,11.516794708414011,2.0714060218035373))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub103 inherits .../COPOLYFF



DPDPoly_sub104 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9476190949931046,-0.3193272047580768,-0.006941693297955305))
push(move(1.4442105263157894,12.997894736842104,1.4442105263157892))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9476190949931046,-0.3193272047580768,-0.006941693297955305,0.47271002037987775,-0.8812178664912248,0.0005553459369641141))
push(move(3.007587295538794,12.471070471335585,1.4327581589052598))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.47271002037987775,-0.8812178664912248,0.0005553459369641141,-0.5499716406086925,-0.8351274066968761,0.009664838846746664))
push(move(2.9569544113552912,10.177863678793262,1.4459877176889462))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5499716406086925,-0.8351274066968761,0.009664838846746664,-0.19223788452826698,-0.9794415368587838,-0.061146313280526145))
push(move(1.181265454241959,9.697815796916318,1.4648527342889865))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.19223788452826698,-0.9794415368587838,-0.061146313280526145,0.6392715677917736,-0.37726201858066755,0.6700785267037646))
push(move(2.6463664524109882,8.595434967695422,1.3471970517108516))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6392715677917736,-0.37726201858066755,0.6700785267037646,-0.23880449186334643,-0.015462859055324006,0.9709445476728958))
push(move(2.9236431991218446,8.669562737838417,3.291196922070594))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.23880449186334643,-0.015462859055324006,0.9709445476728958,-0.6029649324002595,0.6706571025584349,0.4320328009346921))
push(move(1.89354010485842,8.546688616173688,4.408080169097719))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6029649324002595,0.6706571025584349,0.4320328009346921,-0.12292579056075871,0.9923713631886275,-0.009398273147634329))
push(move(1.4672997926700393,10.28940329044404,4.334687326243016))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12292579056075871,0.9923713631886275,-0.009398273147634329,-0.020069580996091234,0.9996257301778604,0.018590628957102957))
push(move(1.4266075480136393,12.316202693239358,4.372380909481556))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub104 inherits .../COPOLYFF



DPDPoly_sub105 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.29578315523878923,-0.021219093528944324,0.955019410874353))
push(move(1.4442105263157894,14.442105263157893,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.29578315523878923,-0.021219093528944324,0.955019410874353,0.8808289442775636,0.0024527689974351992,0.473428299584127))
push(move(1.9278349939980841,14.407410681567026,5.8941496912194955))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8808289442775636,0.0024527689974351992,0.473428299584127,0.8498546287680536,0.04257726545627226,-0.5252944759159189))
push(move(4.267063753332981,14.449965821015942,5.849859880679001))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8498546287680536,0.04257726545627226,-0.5252944759159189,0.6481552763516985,-0.5004398832476685,-0.5739814117134051))
push(move(4.752728608967865,14.548936351086116,4.148085175285948))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6481552763516985,-0.5004398832476685,-0.5739814117134051,0.3329302623353186,-0.7079771209160401,-0.6228369262341231))
push(move(5.810469021923685,13.258304531509964,4.483079469821241))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3329302623353186,-0.7079771209160401,-0.6228369262341231,-0.6432812450580054,0.3357081216639253,-0.6881055855066877))
push(move(5.4980745223880865,12.963956210895942,2.753712208288263))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6432812450580054,0.3357081216639253,-0.6881055855066877,-0.8723269568209218,0.48194243222622357,0.08232358364054387))
push(move(4.383073378767671,14.003217139978702,2.9562217814784097))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8723269568209218,0.48194243222622357,0.08232358364054387,-0.7104193348464517,-0.15813130949487889,0.6857833897330554))
push(move(2.807562920608088,14.450407701539165,3.00762223038845))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7104193348464517,-0.15813130949487889,0.6857833897330554,-0.017725139431115245,-0.47296058476640973,0.8809052756622379))
push(move(2.7774091868126876,13.645814450005805,4.506204697652662))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub105 inherits .../COPOLYFF



DPDPoly_sub106 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.10024769204511316,-0.3584607320260277,0.9281467038324235))
push(move(4.332631578947368,12.997894736842104,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.10024769204511316,-0.3584607320260277,0.9281467038324235,0.5487205267706124,-0.6195435791445865,0.5613123346598552))
push(move(4.15680312738083,12.369176068374598,5.960545343665272))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5487205267706124,-0.6195435791445865,0.5613123346598552,0.6277124974724371,-0.5072297878238735,0.5905039905547326))
push(move(5.659267432747446,11.500030733244467,5.689710514416624))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6277124974724371,-0.5072297878238735,0.5905039905547326,0.08279277668393911,-0.9437990041851663,0.31998249300243287))
push(move(5.735938045998626,11.093139231540796,7.44607490508535))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08279277668393911,-0.9437990041851663,0.31998249300243287,0.01815982046613167,-0.22437326979208733,-0.9743340580742547))
push(move(5.784004899478286,10.078081843493253,6.171803363261554))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.01815982046613167,-0.22437326979208733,-0.9743340580742547,-0.045842246411187615,0.48380439154584387,-0.8739747131152776))
push(move(5.794460667270645,10.370064247617021,4.3061439140574995))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.045842246411187615,0.48380439154584387,-0.8739747131152776,0.6242324282848305,0.48430941795818117,-0.6130075555444906))
push(move(5.633928412326924,11.661941039666564,3.3106203918387))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6242324282848305,0.48430941795818117,-0.6130075555444906,0.33967171357546816,-0.10191501371288691,-0.9350061267053854))
push(move(7.335703826410198,11.565834514448326,2.792615204759644))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.33967171357546816,-0.10191501371288691,-0.9350061267053854,-0.5398321077765645,-0.06931920450364278,-0.8389136685622031))
push(move(6.368274436679184,11.441608047101269,1.2892038168063111))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub106 inherits .../COPOLYFF



DPDPoly_sub107 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.006425882210030551,0.9198793589722372,0.3921487893321219))
push(move(5.776842105263158,12.997894736842104,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.006425882210030551,0.9198793589722372,0.3921487893321219,0.0001841035853954628,0.873138264913109,0.48747260071761495))
push(move(5.766676965948895,14.453057083526836,2.064552908138197))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0001841035853954628,0.873138264913109,0.48747260071761495,0.0031012666022158376,0.9218757261594751,0.38747326057858816))
push(move(5.777408291543051,15.683116238542759,2.9433681758401073))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0031012666022158376,0.9218757261594751,0.38747326057858816,-0.0005388764894608178,0.32425851817812407,0.9459683520081716))
push(move(5.7770771314086415,17.544587517747683,3.363952972088105))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0005388764894608178,0.32425851817812407,0.9459683520081716,-0.00047724741230017087,-0.5028143169956034,0.8643943167670368))
push(move(5.776639127450522,16.145945873453716,4.293593882961713))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00047724741230017087,-0.5028143169956034,0.8643943167670368,0.0027681536924195923,-0.10566997334651884,0.9943974024795526))
push(move(5.775552568604236,15.938351453481795,6.125253274024071))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0027681536924195923,-0.10566997334651884,0.9943974024795526,0.011426866743040455,0.5212326408492391,0.8533381280768866))
push(move(5.787677928219885,15.724556777078607,8.259036568316738))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.011426866743040455,0.5212326408492391,0.8533381280768866,-0.3651814424752962,0.7214742446727118,-0.5883174554146784))
push(move(5.807831939239047,17.41076396859064,8.535819383914685))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3651814424752962,0.7214742446727118,-0.5883174554146784,-0.4648183853531706,-0.04009995421262981,-0.8844975196742026))
push(move(4.970740082392285,17.338547924240725,6.942926988838981))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub107 inherits .../COPOLYFF



DPDPoly_sub108 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.39417158486109877,0.9179398729931061,-0.044890436147245194))
push(move(4.332631578947368,17.330526315789474,8.665263157894737))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.39417158486109877,0.9179398729931061,-0.044890436147245194,-0.4769415912134471,0.8785698360886951,0.025333015727873536))
push(move(3.703939934097465,18.794612390965874,8.593664282624754))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4769415912134471,0.8785698360886951,0.025333015727873536,-0.5146636897966549,0.548422912197378,-0.6590550779577073))
push(move(2.8351894954988492,20.08895097416426,8.74480062023906))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5146636897966549,0.548422912197378,-0.6590550779577073,-0.9558674534407111,0.17716588951299908,-0.23437077259299546))
push(move(2.4354487440669685,20.146309909802113,6.969291752158263))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9558674534407111,0.17716588951299908,-0.23437077259299546,-0.43423777028244553,-0.6422152692608388,0.6316621777408857))
push(move(1.3768490282511958,20.3592480589355,8.387227631659778))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.43423777028244553,-0.6422152692608388,0.6316621777408857,0.03505929465315185,-0.6026195786816858,-0.7972581070443442))
push(move(1.4312929302574413,18.661215243978678,8.429982856318851))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03505929465315185,-0.6026195786816858,-0.7972581070443442,0.032670496180304064,0.5294932492993907,-0.8476848103072899))
push(move(1.4763633356501398,18.648738175869152,6.124244616010932))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.032670496180304064,0.5294932492993907,-0.8476848103072899,0.8274372146179957,0.5361008904461223,-0.16716306747630477))
push(move(1.5326416919262287,20.303782434642518,5.800337890538439))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8274372146179957,0.5361008904461223,-0.16716306747630477,0.9963506519149034,-0.053823122350063986,-0.06624537666310816))
push(move(3.8385577213982454,20.179216248687087,5.6470221119696316))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub108 inherits .../COPOLYFF



DPDPoly_sub109 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.020087045142655104,0.06519820955632552,0.9976701379153764))
push(move(4.332631578947368,20.218947368421052,7.221052631578947))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.020087045142655104,0.06519820955632552,0.9976701379153764,-0.026022156364193454,-0.41822412145949434,0.9079710521859117))
push(move(4.376588840061092,20.361623142844877,9.404292946232506))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.026022156364193454,-0.41822412145949434,0.9079710521859117,0.6054031078637787,-0.7448440021290877,0.2805253811711189))
push(move(4.24911313021249,18.876651620176787,10.135197513095687))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6054031078637787,-0.7448440021290877,0.2805253811711189,0.4934652339514707,-0.8695784958078706,-0.018036144536496934))
push(move(5.9305019543240824,18.449801336920235,10.12432900654211))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4934652339514707,-0.8695784958078706,-0.018036144536496934,-0.03791142180349039,-0.9976620540805857,-0.056860794441726856))
push(move(5.75860417434864,16.21664467078255,10.080025645301522))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03791142180349039,-0.9976620540805857,-0.056860794441726856,0.006235412911564393,-0.6024133783309142,-0.798159909563088))
push(move(5.774320884825755,14.339801785548666,9.89008351360162))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.006235412911564393,-0.6024133783309142,-0.798159909563088,0.0004616021167981662,-0.003877795078903863,-0.999992374785334))
push(move(5.77716497227419,14.423455808805002,7.704162971283466))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0004616021167981662,-0.003877795078903863,-0.999992374785334,0.005428782788045794,-0.7934006572344574,-0.6086755502050096))
push(move(5.776262044303798,14.323494627506292,5.684850032980951))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.005428782788045794,-0.7934006572344574,-0.6086755502050096,0.006907234137967514,-0.87105832036236,0.4911310340877143))
push(move(5.787835582527004,12.863977465645366,6.5077733163213))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub109 inherits .../COPOLYFF



DPDPoly_sub110 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3456038279183159,-0.017743074731859536,0.9382127570158417))
push(move(5.776842105263158,12.997894736842104,8.665263157894737))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3456038279183159,-0.017743074731859536,0.9382127570158417,-0.9965923870469203,0.05519302395704425,0.06129717927114177))
push(move(5.146893457655919,12.965553584838514,10.375388479740646))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9965923870469203,0.05519302395704425,0.06129717927114177,-0.26239272577824546,-0.5792859537314553,-0.7717368989934981))
push(move(4.307009674071926,13.079296619539567,8.755667803970992))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.26239272577824546,-0.5792859537314553,-0.7717368989934981,-0.4805655884878081,-0.5791237211693457,-0.6585381012062528))
push(move(4.425745718170522,11.3734715070673,8.254383339312426))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4805655884878081,-0.5791237211693457,-0.6585381012062528,-0.6750065580979366,-0.6507749671701039,-0.3476464995214635))
push(move(3.159954275302502,11.696994168352742,7.183812260462467))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6750065580979366,-0.6507749671701039,-0.3476464995214635,-0.16101716612403927,-0.38962985223411395,0.9067866620442793))
push(move(2.924434709076779,9.926055017650999,7.481167863487745))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.16101716612403927,-0.38962985223411395,0.9067866620442793,-0.012894656452247306,0.9381991951172287,0.34585545841631987))
push(move(2.878161152297024,11.015110270379816,8.770762593449488))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.012894656452247306,0.9381991951172287,0.34585545841631987,0.03483982751353135,0.9992762891728831,-0.015267099125242479))
push(move(2.8801467999268837,13.148388305221058,8.6690409315343))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03483982751353135,0.9992762891728831,-0.015267099125242479,0.067302967273383,0.9976072474565738,0.015814247320569227))
push(move(3.029960588568413,15.36902325450395,8.704242831266075))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub110 inherits .../COPOLYFF



DPDPoly_sub111 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.39696625938499086,-0.07349603418039419,0.9148858518250473))
push(move(1.4442105263157894,15.886315789473683,8.665263157894737))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.39696625938499086,-0.07349603418039419,0.9148858518250473,0.5849627946939807,0.5337818113825177,0.6106517065078964))
push(move(2.122256820421951,15.760779393295524,10.227952546965739))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5849627946939807,0.5337818113825177,0.6106517065078964,0.1373071159621797,0.6425168231158219,-0.7538692777393837))
push(move(2.895053762302997,17.21021833090363,10.179820845951651))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.1373071159621797,0.6425168231158219,-0.7538692777393837,-0.9516659431905989,0.07864336762338406,-0.29689586271957524))
push(move(2.448984586597483,17.289673834605143,8.434090492707787))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9516659431905989,0.07864336762338406,-0.29689586271957524,-0.22991134367391622,0.007257350036227986,0.9731845174069027))
push(move(1.410169639762434,17.332925556861063,9.716574308913406))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22991134367391622,0.007257350036227986,0.9731845174069027,0.49766253815246897,0.04651157416817779,0.8661227808965889))
push(move(1.7033997324250554,17.313208864160334,11.590053242952933))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.49766253815246897,0.04651157416817779,0.8661227808965889,0.526534668303672,-0.6530024452852583,0.5443795087306422))
push(move(3.0056135678861864,17.48203585330729,12.49325574634112))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.526534668303672,-0.6530024452852583,0.5443795087306422,-0.462295043616521,-0.717118545005929,-0.5215594741313575))
push(move(2.925922264418923,15.79705000347178,12.854008411418944))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.462295043616521,-0.717118545005929,-0.5215594741313575,-0.511723097002308,0.14180515759768705,-0.847366962580594))
push(move(2.071935246057121,16.033700966530866,11.439883487076836))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub111 inherits .../COPOLYFF



DPDPoly_sub112 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.08870204465451899,-0.9307937084142008,-0.35461954211612123))
push(move(1.4442105263157894,14.442105263157893,11.553684210526315))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08870204465451899,-0.9307937084142008,-0.35461954211612123,0.528928579158555,-0.5804459456447869,-0.6191260472099697))
push(move(1.296779220847789,12.895036849037457,10.964272520612347))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.528928579158555,-0.5804459456447869,-0.6191260472099697,0.8929356855991417,-0.18161753838486552,0.4119234530038471))
push(move(2.7747323542182474,12.981991306323724,9.996270312895163))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8929356855991417,-0.18161753838486552,0.4119234530038471,-0.44437356058869815,-0.6546255245457389,0.6115534001728212))
push(move(2.9446538596453493,12.559869445279313,11.724459645260074))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.44437356058869815,-0.6546255245457389,0.6115534001728212,-0.5651595083917005,-0.505687590038391,0.651824202799816))
push(move(1.752158298730369,11.475594128746817,11.403551699604263))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5651595083917005,-0.505687590038391,0.651824202799816,0.5815646856714215,0.45710036868780535,0.6729351895430743))
push(move(1.731935465943994,11.474765801440357,13.123143005369437))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5815646856714215,0.45710036868780535,0.6729351895430743,-0.22668527677786743,0.9739580301218458,-0.004420503740011491))
push(move(3.141953934141038,12.567950857067567,13.011700220970326))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22668527677786743,0.9739580301218458,-0.004420503740011491,-0.7521671210528903,-0.1393254353895055,0.6440753411368358))
push(move(1.375735949184398,13.005184470904654,13.11619689348071))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7521671210528903,-0.1393254353895055,0.6440753411368358,-0.03712869100455852,-0.46877293086460414,0.882538044275088))
push(move(1.3142914483448476,12.229409242509657,14.5767145722682))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub112 inherits .../COPOLYFF



DPDPoly_sub113 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.3290003966667405,0.9443234115641268,0.0034689140975548635))
push(move(2.888421052631579,11.553684210526315,14.442105263157893))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3290003966667405,0.9443234115641268,0.0034689140975548635,0.9907767011204536,0.1347767899976471,-0.014026595980552514))
push(move(3.474135619341367,13.234849289480477,14.448280919899307))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9907767011204536,0.1347767899976471,-0.014026595980552514,0.2657502658492809,-0.9551886437067797,-0.13035126057940158))
push(move(4.366648749185724,11.754769665606029,14.421177739687288))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2657502658492809,-0.9551886437067797,-0.13035126057940158,-0.014137983217603779,-0.8703349489101448,-0.49225724386352543))
push(move(4.346629339207399,10.098837025266318,14.020320270946842))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.014137983217603779,-0.8703349489101448,-0.49225724386352543,-0.05332989741799603,-0.8649938583279367,0.49894042439587427))
push(move(4.321031498586644,8.946569453560453,12.832873261819836))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05332989741799603,-0.8649938583279367,0.49894042439587427,0.31962098713214004,-0.040768908623628176,0.9466680097448706))
push(move(4.259419344348376,8.684318835842419,14.836233932011561))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.31962098713214004,-0.040768908623628176,0.9466680097448706,0.6560768240740849,-0.627592528668731,0.41915488649430105))
push(move(5.375650384946757,8.812048684456538,15.956491554685961))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6560768240740849,-0.627592528668731,0.41915488649430105,0.7609497614501465,-0.6084122570935577,0.22536633725400912))
push(move(5.873869784051475,7.139961533946323,15.867675321149875))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7609497614501465,-0.6084122570935577,0.22536633725400912,0.9097877000780025,0.0444607523087819,0.4126858154709415))
push(move(7.3751901688797465,7.21333011626531,16.548684338135796))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub113 inherits .../COPOLYFF



DPDPoly_sub114 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.38223632501932964,-0.9238809031103242,-0.018424676490214165))
push(move(7.221052631578947,7.221052631578947,18.774736842105263))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.38223632501932964,-0.9238809031103242,-0.018424676490214165,-0.48548690496695696,-0.8742439389428744,-1.809012354611269e-05))
push(move(6.616673430533745,5.760243269584112,18.745604364295602))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.48548690496695696,-0.8742439389428744,-1.809012354611269e-05,0.6267631067283624,-0.7792098512269942,-0.00012567822788256405))
push(move(5.685022540424009,4.4550357040626976,18.774679606835196))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6267631067283624,-0.7792098512269942,-0.00012567822788256405,0.9431968137938642,0.3292089980521435,0.044734841573501924))
push(move(7.813218716816768,4.272663888312334,18.745364433627145))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9431968137938642,0.3292089980521435,0.044734841573501924,0.2778258902764293,0.6768733194290243,-0.6816562800541365))
push(move(8.68281501070089,5.501371146544164,18.916861778431656))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2778258902764293,0.6768733194290243,-0.6816562800541365,-0.544685289347931,0.09273129640342596,-0.8334979557475235))
push(move(8.415599875837593,5.74025833842727,17.267399584403474))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.544685289347931,0.09273129640342596,-0.8334979557475235,0.3062812715192421,0.03111553829600528,-0.9514323969642331))
push(move(7.002779937166532,5.787392879494896,16.346008798261398))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3062812715192421,0.03111553829600528,-0.9514323969642331,0.9939067393713086,-0.04992752730147398,0.09826818126868027))
push(move(8.862149919226432,5.7856239754028085,15.880236157666708))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9939067393713086,-0.04992752730147398,0.09826818126868027,0.8602667615847016,-0.10169003550775972,0.49960007565151626))
push(move(10.210224785799877,5.626271333675206,16.66313087753633))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub114 inherits .../COPOLYFF



DPDPoly_sub115 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.00016802386815061338,-0.06221028112025319,-0.9980630504586967))
push(move(10.109473684210526,7.221052631578947,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.00016802386815061338,-0.06221028112025319,-0.9980630504586967,-0.0018565143163414425,0.39495789877039583,-0.9186973449147804))
push(move(10.109847859075286,7.082515626205524,15.107924782818799))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0018565143163414425,0.39495789877039583,-0.9186973449147804,-0.03337608412562438,0.9967406880339789,-0.07344411362382827))
push(move(10.103633965290665,8.463404006785698,14.440737522080157))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03337608412562438,0.9967406880339789,-0.07344411362382827,0.457282673968821,0.6711794427662439,0.5834472655655516))
push(move(10.005389824857462,10.202041946461145,14.878064751751655))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.457282673968821,0.6711794427662439,0.5834472655655516,0.5752660826124194,-0.7338169869542207,0.3613607115517539))
push(move(11.28330972896954,10.194880327195808,15.94588660765282))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5752660826124194,-0.7338169869542207,0.3613607115517539,0.08738521741492772,-0.9546120059399619,0.2847450471783978))
push(move(11.516798558458882,8.274069071872372,15.827475384374885))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08738521741492772,-0.9546120059399619,0.2847450471783978,0.044014877290509825,0.367887898877649,0.9288278551144393))
push(move(11.572786872671644,7.0325793683149715,16.889148927973405))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.044014877290509825,0.367887898877649,0.9288278551144393,-0.2618574973943672,0.9607920980056511,0.09115478850975567))
push(move(11.587357468054432,8.863818960912763,17.31645103745431))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2618574973943672,0.9607920980056511,0.09115478850975567,-0.5457111868066518,0.8343374183996762,-0.07797674558635652))
push(move(10.706755502386157,10.210170636370835,17.19062170300072))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub115 inherits .../COPOLYFF



DPDPoly_sub116 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9968501200932598,-0.01377476712833578,-0.0781030976377601))
push(move(10.109473684210526,10.109473684210526,18.774736842105263))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9968501200932598,-0.01377476712833578,-0.0781030976377601,-0.9096847893944686,0.020784210408001706,0.41477897794133345))
push(move(7.873738345655583,10.078579638026026,18.599567223403696))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9096847893944686,0.020784210408001706,0.41477897794133345,-0.24725961266826238,-0.7475277276222161,0.616494104091115))
push(move(7.200135825036463,10.175945379591175,20.101275658388545))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.24725961266826238,-0.7475277276222161,0.616494104091115,-0.026684163487220372,-0.9991524293819051,0.031342914338398926))
push(move(7.241091964793196,8.16593120195096,20.17694882473913))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.026684163487220372,-0.9991524293819051,0.031342914338398926,0.5968957264333602,-0.8014666877868979,0.036968096157232136))
push(move(7.089481180766955,6.032631810956402,20.23124934252319))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5968957264333602,-0.8014666877868979,0.036968096157232136,0.7029157152654296,0.5842854832692741,-0.405610615336532))
push(move(8.797905773271939,6.0755587108661775,20.2733684170097))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7029157152654296,0.5842854832692741,-0.405610615336532,-0.040616115468743975,0.3479404494119017,-0.9366364154928387))
push(move(8.637278373235246,7.3192091501224,19.338108162124122))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.040616115468743975,0.3479404494119017,-0.9366364154928387,0.0072939003351871765,-0.02365155083851091,-0.9996936546566821))
push(move(8.663532485058496,7.226675742870864,17.174625133519694))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0072939003351871765,-0.02365155083851091,-0.9996936546566821,0.0022878399727194656,-0.003878349271859746,-0.9999898620462033))
push(move(8.668314921903992,7.218568549763561,15.084274226814019))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub116 inherits .../COPOLYFF



DPDPoly_sub117 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.04914634669562607,0.0011201550185056595,-0.9987909600407925))
push(move(8.665263157894737,7.221052631578947,12.997894736842104))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04914634669562607,0.0011201550185056595,-0.9987909600407925,0.3981103033010049,-0.0017528313125103657,-0.91733587850251))
push(move(8.557378681261268,7.223511559781042,10.805381005199242))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3981103033010049,-0.0017528313125103657,-0.91733587850251,0.981970795766102,-0.0275198330246469,-0.18701875588502914))
push(move(9.928913925779645,7.215488930726041,10.086158522867189))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.981970795766102,-0.0275198330246469,-0.18701875588502914,0.9379664864511778,0.34519222568267494,-0.03257602834407054))
push(move(12.110526014782778,7.123934238589738,10.128675346887912))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9379664864511778,0.34519222568267494,-0.03257602834407054,0.38264390981317653,0.5783168218834333,0.7205090504702428))
push(move(13.043209931400778,8.361618120994269,9.977997520937596))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.38264390981317653,0.5783168218834333,0.7205090504702428,0.4194306031538599,-0.5991995347167184,0.68193686418411))
push(move(12.937746005682456,8.374170355947827,11.686310199783213))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4194306031538599,-0.5991995347167184,0.68193686418411,0.95118566994339,0.2963211289819447,-0.08625317277184685))
push(move(13.995292439183409,7.001470837068001,11.525953618846986))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.95118566994339,0.2963211289819447,-0.08625317277184685,0.1509575337965288,0.9885306922886338,0.004346653129082281))
push(move(14.41130100133348,8.83322424387518,11.55268876535152))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.1509575337965288,0.9885306922886338,0.004346653129082281,0.08911035759705763,0.9960126716932859,-0.004254643971853645))
push(move(14.604098367641829,10.98817710334555,11.543483503758225))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub117 inherits .../COPOLYFF



DPDPoly_sub118 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.027564536671337188,-0.9373401332814428,0.34732358235228045))
push(move(12.997894736842104,11.553684210526315,11.553684210526313))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.027564536671337188,-0.9373401332814428,0.34732358235228045,-0.015308602640523063,-0.13070326621842318,0.9913033354554147))
push(move(13.047474773641776,9.867700554932062,12.178411417072333))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.015308602640523063,-0.13070326621842318,0.9913033354554147,-0.13640241258599828,0.951648680978707,0.2752438370467287))
push(move(12.975010390438126,11.358300027494725,13.035552245949182))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13640241258599828,0.951648680978707,0.2752438370467287,-0.6188236702096643,0.6328190870923287,-0.4654001162439395))
push(move(12.583347074841376,13.105814192332803,13.114965883196225))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6188236702096643,0.6328190870923287,-0.4654001162439395,0.30846627327477927,0.09533511990462072,-0.9464458638320211))
push(move(11.35038849908592,13.019664632063561,11.813719188348799))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.30846627327477927,0.09533511990462072,-0.9464458638320211,0.7287122274594866,0.6237162688342157,0.2827658139566345))
push(move(13.10130529615778,13.265895256011348,11.525750274635943))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7287122274594866,0.6237162688342157,0.2827658139566345,-0.6677910147556168,0.4960679651490225,0.5549520110465155))
push(move(13.137052450724687,14.548898438749866,12.50700724845645))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6677910147556168,0.4960679651490225,0.5549520110465155,-0.9071538898743478,-0.08556976538793078,-0.4120068389448092))
push(move(11.5013088833411,14.454451177270888,12.855389648841612))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9071538898743478,-0.08556976538793078,-0.4120068389448092,-0.45825291339400515,-0.08035688535728214,-0.8851819238673952))
push(move(10.76268349405451,14.324929609607993,11.428627649090057))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub118 inherits .../COPOLYFF



DPDPoly_sub119 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.3374772238856541,0.9411130523351823,0.020380041285251716))
push(move(10.109473684210526,15.886315789473683,11.553684210526315))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3374772238856541,0.9411130523351823,0.020380041285251716,0.9957799522109332,0.07552606140654364,-0.05213540853591573))
push(move(10.715514339232048,17.57636397737678,11.590282631680996))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9957799522109332,0.07552606140654364,-0.05213540853591573,0.48419089331844306,-0.619896614844415,0.6174847089053487))
push(move(11.608060128464707,15.999977780318604,11.47522368686935))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.48419089331844306,-0.619896614844415,0.6174847089053487,0.9567626907898732,-0.077170276394643,0.2804458984433468))
push(move(12.005082714769424,15.925364172057678,13.234858694491281))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9567626907898732,-0.077170276394643,0.2804458984433468,0.2951694045939738,-0.01091466034846913,-0.9553825897414693))
push(move(13.074766308945676,15.881676635816403,11.905144017685984))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2951694045939738,-0.01091466034846913,-0.9553825897414693,-0.30517236589091884,0.0013695463383072567,-0.9522961469203614))
push(move(13.079301635414772,15.885642119310134,9.757906007720873))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.30517236589091884,0.0013695463383072567,-0.9522961469203614,-0.9653905526626891,0.0007969685121116166,0.26080729604598574))
push(move(11.960834697705362,15.886675715450776,8.429099329891047))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9653905526626891,0.0007969685121116166,0.26080729604598574,-0.8564799431929727,-0.003828982799584867,0.516166102915411))
push(move(11.479089902931744,15.886963158095922,10.190214873701441))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8564799431929727,-0.003828982799584867,0.516166102915411,-0.9973481229993509,-0.00557679705754052,-0.07256459800929714))
push(move(9.301492426398546,15.874786848821767,10.031778233709094))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub119 inherits .../COPOLYFF



DPDPoly_sub120 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.019125061996291028,0.4082835709619842,-0.9126547856041562))
push(move(7.221052631578947,15.886315789473683,10.109473684210526))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.019125061996291028,0.4082835709619842,-0.9126547856041562,0.00122719046768182,0.45599472097209093,-0.8899816337706867))
push(move(7.251672006410126,16.53998100107518,8.648306186959926))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.00122719046768182,0.45599472097209093,-0.8899816337706867,0.021199297313531557,0.8955129032547331,-0.4445303475553627))
push(move(7.224860770328955,17.301329361094105,7.347739759761178))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.021199297313531557,0.8955129032547331,-0.4445303475553627,-0.36205892900463565,0.932155200217462,0.00012097751600719868))
push(move(7.318959794222525,19.382390413344115,7.237341320526143))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.36205892900463565,0.932155200217462,0.00012097751600719868,-0.5863153509385856,0.37205183072075937,-0.7195913732884064))
push(move(6.073768816311184,20.264925242615387,7.34812438290989))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5863153509385856,0.37205183072075937,-0.7195913732884064,0.820601096433298,0.040706580661333924,-0.5700498353857595))
push(move(6.019274866320888,20.207117509456992,5.642223504467212))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.820601096433298,0.040706580661333924,-0.5700498353857595,0.8558561278055877,-0.5139744095241631,0.057797879302908715))
push(move(8.278533485912305,20.3742943761109,5.816532794215714))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8558561278055877,-0.5139744095241631,0.057797879302908715,-0.5234206576534618,-0.7569074546755485,-0.39130796081628605))
push(move(8.528809917454955,18.70004552132511,5.81169802159635))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5234206576534618,-0.7569074546755485,-0.39130796081628605,-0.8519114431282532,-0.024817710888938263,-0.5230974806796246))
push(move(7.091798912872305,18.658182809016658,4.9293330266553035))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub120 inherits .../COPOLYFF



DPDPoly_sub121 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.04947618797474764,-0.018405720317658372,-0.9986056960998548))
push(move(7.221052631578947,20.218947368421052,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.04947618797474764,-0.018405720317658372,-0.9986056960998548,-0.39755062205889086,0.00035928420274002146,-0.9175801729633496))
push(move(7.331662719569006,20.177799122624595,2.100126035687746))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.39755062205889086,0.00035928420274002146,-0.9175801729633496,-0.9775520024870423,0.005922247472117478,-0.21061103821607405))
push(move(5.957329825871511,20.22008945100259,1.4158533718515527))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9775520024870423,0.005922247472117478,-0.21061103821607405,-0.9336849713568263,0.028634669816978996,0.35694877776352607))
push(move(3.7771536042816862,20.19933320221225,1.3343162851941048))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9336849713568263,0.028634669816978996,0.35694877776352607,-0.35214413979941805,-0.734040528215992,0.5806711700621235))
push(move(2.836383312429552,20.315804039616985,2.6089946107209756))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.35214413979941805,-0.734040528215992,0.5806711700621235,-0.03339189202178276,-0.9166139075764206,0.39837661325018936))
push(move(2.9003705289822976,18.37168866980516,2.780095432661276))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03339189202178276,-0.9166139075764206,0.39837661325018936,0.6058922376407682,-0.4236340804901267,0.6733711919988469))
push(move(2.724960732096035,17.257232614999044,3.9383038383594573))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6058922376407682,-0.4236340804901267,0.6733711919988469,0.7646684138648489,-0.024647258556918468,0.6439524279657968))
push(move(4.383607046200392,17.334623827106824,4.428521802182672))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7646684138648489,-0.024647258556918468,0.6439524279657968,0.43388975725676093,-0.09062899409084126,0.8963961534822377))
push(move(5.124387605593617,17.179892825010064,5.958940146724405))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub121 inherits .../COPOLYFF



DPDPoly_sub122 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.33902051142798306,-0.02251968371884665,0.9405094133905901))
push(move(5.776842105263158,18.774736842105263,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.33902051142798306,-0.02251968371884665,0.9405094133905901,-0.9931902400976801,0.0012341226797147897,0.11649731291289116))
push(move(5.163777055063201,18.734013550846484,7.47760483582826))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9931902400976801,0.0012341226797147897,0.11649731291289116,-0.24917656574435515,0.00896620681623656,-0.9684165664729086))
push(move(4.294462502664876,18.776578823846176,5.950719408369353))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.24917656574435515,0.00896620681623656,-0.9684165664729086,0.35001710223998234,0.009699807082796415,-0.9366930884137462))
push(move(4.217759054060023,18.76805444479467,3.8009368409214557))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.35001710223998234,0.009699807082796415,-0.9366930884137462,0.8898946027553811,0.16369311223899335,0.4257841718433822))
push(move(5.5053167266893865,18.810134476707887,2.710309795633608))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8898946027553811,0.16369311223899335,0.4257841718433822,0.25947624152518456,0.8905230770964924,0.3736853345296801))
push(move(5.722278962009821,19.04480580995103,4.520798227927056))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.25947624152518456,0.8905230770964924,0.3736853345296801,-0.6055642695354577,0.49428979762461484,-0.6236742029507111))
push(move(5.946394554228021,20.323914628254506,3.345529091891996))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6055642695354577,0.49428979762461484,-0.6236742029507111,-0.8947942185739498,-0.059026381886351086,0.44255981815799883))
push(move(4.27371383470742,20.227192221503426,3.0289124832718035))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8947942185739498,-0.059026381886351086,0.44255981815799883,-0.3757327153121859,-0.0335988697685091,0.9261188058745005))
push(move(3.6931174003136626,20.17527397432325,4.459986367985246))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub122 inherits .../COPOLYFF



DPDPoly_sub123 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.3816131677782481,-0.9223626632546986,-0.06015403238312641))
push(move(1.4442105263157894,20.218947368421052,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3816131677782481,-0.9223626632546986,-0.06015403238312641,0.6091167289788886,-0.602929935306292,0.5152206358344064))
push(move(2.100538476056216,18.63259645915984,4.229174004428927))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6091167289788886,-0.602929935306292,0.5152206358344064,0.24244261857200208,-0.09784434368134366,0.9652191777568024))
push(move(2.918795813341055,18.759339432188245,5.57990772985333))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.24244261857200208,-0.09784434368134366,0.9652191777568024,-0.04522973905276875,-0.9459386579057848,0.32117647202841804))
push(move(2.905985084728984,18.307536470696853,7.435840051550702))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04522973905276875,-0.9459386579057848,0.32117647202841804,-0.09117443294666022,-0.8512409198208672,-0.5167940781388453))
push(move(2.8535381902361285,17.394535882338513,6.043302248608961))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09117443294666022,-0.8512409198208672,-0.5167940781388453,-0.6388423269878956,-0.5808125214726478,-0.504516893819499))
push(move(2.631437835485253,15.744253701312946,5.879653870919599))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6388423269878956,-0.5808125214726478,-0.504516893819499,0.2799792880926901,0.08856727228577001,-0.95591183511816))
push(move(1.2274786321134528,15.916180876540931,4.759144197752222))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2799792880926901,0.08856727228577001,-0.95591183511816,0.996755313809101,-0.008542828932997583,0.08003664452700562))
push(move(3.085392909749101,15.887855618946663,4.329749836742989))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.996755313809101,-0.008542828932997583,0.08003664452700562,0.8910127894678147,0.0005608115075932345,0.45397785683360875))
push(move(4.433401995299518,15.88870406805587,5.016570814942334))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub123 inherits .../COPOLYFF



DPDPoly_sub124 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.0010073005258743127,-0.06392777090796112,0.9979540197085183))
push(move(4.332631578947368,15.886315789473683,7.221052631578947))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0010073005258743127,-0.06392777090796112,0.9979540197085183,7.579105871210796e-05,0.4300265090838891,0.9028162580175655))
push(move(4.330377583752252,15.743267230717137,9.454133532055437))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(7.579105871210796e-05,0.4300265090838891,0.9028162580175655,0.001477781242501279,0.6735899490106565,0.7391037794210098))
push(move(4.3328686319909675,17.231317357453516,10.04480711410651))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.001477781242501279,0.6735899490106565,0.7391037794210098,-0.003034459483344974,0.5442840928462416,0.8388954752114163))
push(move(4.3346781044307034,17.703494780780062,11.605014187125564))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.003034459483344974,0.5442840928462416,0.8388954752114163,-0.04171876291133495,-0.2913281917791186,0.9557130476748014))
push(move(4.323113895659134,18.98100221713527,12.741565537005329))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04171876291133495,-0.2913281917791186,0.9557130476748014,0.3661516698649069,-0.6038747269265995,0.7080030147071871))
push(move(4.2644906558527405,17.213365614599724,13.212901279356146))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3661516698649069,-0.6038747269265995,0.7080030147071871,0.9773311839689718,-0.0048599996702250224,-0.21166042909578892))
push(move(5.334538396763258,17.31291288509297,14.697289502963581))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9773311839689718,-0.0048599996702250224,-0.21166042909578892,0.2605453584285042,-0.8304773544234403,-0.49236518966231346))
push(move(5.75441897836593,17.205956610083295,12.890227785214243))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2605453584285042,-0.8304773544234403,-0.49236518966231346,0.02129218180379254,-0.8169337438340707,0.576338356505346))
push(move(5.789421369541318,15.862992571472581,13.837675106004422))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub124 inherits .../COPOLYFF



DPDPoly_sub125 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.08119337855820158,-0.9281043497143737,0.36335925930071483))
push(move(5.776842105263158,14.442105263157893,14.442105263157893))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08119337855820158,-0.9281043497143737,0.36335925930071483,0.528309833298417,-0.5817123865380568,0.6184653744458111))
push(move(5.6418137033616125,12.898624139879207,15.046388777044859))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.528309833298417,-0.5817123865380568,0.6184653744458111,0.8631399179273346,-0.18350420914813825,-0.47044201269158603))
push(move(7.102793645302341,12.982124043474023,15.994329098530125))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8631399179273346,-0.18350420914813825,-0.47044201269158603,-0.0055140365628127234,-0.9747108339629842,-0.22340184770043445))
push(move(7.207611465635563,12.565734333621636,14.192973200435931))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0055140365628127234,-0.9747108339629842,-0.22340184770043445,0.5928230940544087,-0.4862177285350512,0.6419915105466528))
push(move(7.094111647966496,11.447415891417721,15.642576943015131))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5928230940544087,-0.4862177285350512,0.6419915105466528,0.7082270099200096,-0.6115390832148877,-0.35275267840295305))
push(move(8.803277135395692,11.257011807064792,15.920982490105613))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7082270099200096,-0.6115390832148877,-0.35275267840295305,-0.08356595504923199,-0.8790843881529746,-0.4692838902651784))
push(move(8.59656947906071,10.150075248196336,14.894234933062933))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.08356595504923199,-0.8790843881529746,-0.4692838902651784,-0.8687629907640723,-0.3549857942274933,-0.34530559186804416))
push(move(8.54544524744642,8.544711237644139,14.473068069215353))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8687629907640723,-0.3549857942274933,-0.34530559186804416,-0.8311890959482594,0.5457154743798458,-0.10639223561470625))
push(move(7.057897595767945,9.521357558385667,14.282661913724436))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub125 inherits .../COPOLYFF



DPDPoly_sub126 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.996966217495965,-0.01146455076176213,-0.07698652640312456))
push(move(7.221052631578947,10.109473684210526,15.886315789473683))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.996966217495965,-0.01146455076176213,-0.07698652640312456,-0.9092774996014252,0.02581767285809079,0.4153888256643076))
push(move(4.990883031735537,10.083827988161806,15.71410031439668))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9092774996014252,0.02581767285809079,0.4153888256643076,-0.11496447428333757,-0.7267492413159193,0.6772139321510534))
push(move(4.330129177680831,10.191557444144363,17.206987750592845))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11496447428333757,-0.7267492413159193,0.6772139321510534,0.6405499446617239,-0.5756966455928292,0.5082018699759249))
push(move(4.740932318329239,8.503761689709403,17.186469118107837))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6405499446617239,-0.5756966455928292,0.5082018699759249,-0.35342375969609435,0.2547975374789229,0.900094362262621))
push(move(5.968461154893576,8.719100485074698,18.506813597741377))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.35342375969609435,0.2547975374789229,0.900094362262621,-0.349405489201569,0.9004647071661284,0.25899636148801575))
push(move(4.13813380858965,8.9383436091867,18.721667376038965))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.349405489201569,0.9004647071661284,0.25899636148801575,0.6713191733889391,0.4603743652287378,-0.5808493877767525))
push(move(5.389894514133228,10.210144148810068,18.935675362843266))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6713191733889391,0.4603743652287378,-0.5808493877767525,0.8758693045903791,0.015253175007714254,-0.482307269205586))
push(move(5.8421899720193835,10.106943890022963,17.2472569636733))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8758693045903791,0.015253175007714254,-0.482307269205586,0.9964644787307768,0.06390707908396735,0.05453831562082497))
push(move(8.219747529534867,10.259425751743072,17.37738501865788))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub126 inherits .../COPOLYFF



DPDPoly_sub127 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9366793677974088,0.022501255408835876,-0.3494645267372258))
push(move(8.665263157894737,8.665263157894737,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9366793677974088,0.022501255408835876,-0.3494645267372258,0.13281575956300967,-0.0014851349666056644,-0.9911396311246119))
push(move(10.367312573147046,8.706150413371613,16.695510841088456))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.13281575956300967,-0.0014851349666056644,-0.9911396311246119,-0.9886589413877176,-0.012296581196454945,-0.1496739513241917))
push(move(8.860892376101907,8.663075647968165,15.870640291653432))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9886589413877176,-0.012296581196454945,-0.1496739513241917,-0.5401944621743171,-0.0014225595229158325,0.8415390183233361))
push(move(7.133149356634446,8.665925064740655,16.20588801204355))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5401944621743171,-0.0014225595229158325,0.8415390183233361,0.5104075968594912,-0.015329613879048054,0.8597959571935881))
push(move(7.102770233633042,8.658445771930282,18.609521352948605))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5104075968594912,-0.015329613879048054,0.8597959571935881,0.6171517829110466,0.3493467547360495,0.7050393760671151))
push(move(8.803181927750405,8.615767201420903,19.019104864343646))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6171517829110466,0.3493467547360495,0.7050393760671151,-0.06984392769216702,0.9251095783558058,0.3732212397477862))
push(move(8.60751202581623,9.51022433981408,20.32855100445309))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06984392769216702,0.9251095783558058,0.3732212397477862,-0.7360143413578709,0.6760702327450447,-0.03481278086565777))
push(move(8.577471214730224,11.605392061477357,20.225223061318932))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7360143413578709,0.6760702327450447,-0.03481278086565777,-0.9993193552456562,0.03668980163480368,-0.003832060464637408))
push(move(6.232860825259743,11.691473942758867,20.21623225299394))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub127 inherits .../COPOLYFF



DPDPoly_sub128 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9428444228774905,-0.3332332412786625,3.399600728310944e-05))
push(move(5.776842105263158,10.109473684210526,20.218947368421052))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9428444228774905,-0.3332332412786625,3.399600728310944e-05,-0.077523036381651,-0.9969905610235197,-7.75735783437698e-06))
push(move(4.037431463295677,9.494706886981735,20.219010086103225))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.077523036381651,-0.9969905610235197,-7.75735783437698e-06,0.5267389528926982,-0.8500271006471395,-6.058813089021984e-05))
push(move(5.667093320601965,8.698041579663725,20.218936386387398))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5267389528926982,-0.8500271006471395,-6.058813089021984e-05,0.003516713342808228,-0.9999938040453491,0.00015683805803620553))
push(move(5.759750065543198,6.715308325665674,20.21881197646213))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.003516713342808228,-0.9999938040453491,0.00015683805803620553,0.6280809295297387,-0.7781463780774738,0.0016000768633364088))
push(move(5.681632254231922,4.563828145089604,20.219584792411478))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6280809295297387,-0.7781463780774738,0.0016000768633364088,0.9334594916450033,-0.3585042771654111,-0.011316391295735107))
push(move(7.604803876568967,4.4294214711122235,20.22351237059262))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9334594916450033,-0.3585042771654111,-0.011316391295735107,-0.27261646475834006,-0.9592960541145259,-0.07369765059325398))
push(move(8.90618418904402,3.325407334203711,20.180493335551954))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.27261646475834006,-0.9592960541145259,-0.07369765059325398,-0.815167823173448,-0.16117519892990712,-0.5563487892613472))
push(move(7.17374815073924,2.912601651522514,20.106983112917074))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.815167823173448,-0.16117519892990712,-0.5563487892613472,-0.4139535304354753,-0.042127270742693776,-0.9093226972311742))
push(move(6.441425135780792,2.8380745182720606,18.498305108634945))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub128 inherits .../COPOLYFF



DPDPoly_sub129 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.09056753964122843,-0.9260284166014338,-0.3664271993315671))
push(move(5.776842105263158,2.8884210526315783,20.218947368421052))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.09056753964122843,-0.9260284166014338,-0.3664271993315671,0.537956177269622,-0.5725822810892478,-0.6186700919877157))
push(move(5.620695470095323,1.2918642520945354,19.587193713234516))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.537956177269622,-0.5725822810892478,-0.6186700919877157,0.9165095329881549,0.07077603907820419,0.39370169955720935))
push(move(7.125698584773999,1.4527440355550745,18.667711045617473))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9165095329881549,0.07077603907820419,0.39370169955720935,0.965920678013117,-0.010215648797344977,0.2586365873312007))
push(move(7.650223530739427,1.4485914351300833,20.459010773521392))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.965920678013117,-0.010215648797344977,0.2586365873312007,0.8837940402148358,-0.017974329731779686,-0.46753076685008726))
push(move(8.605765722394922,1.4370907356324263,19.064016376074573))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8837940402148358,-0.017974329731779686,-0.46753076685008726,0.7060781217288766,0.4040861470175538,0.5815222023313724))
push(move(10.252148019629656,1.3956742999464868,19.082581768318818))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7060781217288766,0.4040861470175538,0.5815222023313724,-0.045772224986453884,0.943550189428358,0.3280517389825866))
push(move(10.079627570955548,2.2805769410437327,20.277881190365292))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.045772224986453884,0.943550189428358,0.3280517389825866,0.005788276701858517,0.8491081867302287,-0.5281872613766125))
push(move(10.108360228557281,4.359720674007965,20.113115785830907))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.005788276701858517,0.8491081867302287,-0.5281872613766125,-0.005011252283853819,0.44203203919235284,-0.8969852639135149))
push(move(10.099268033104513,5.161724139223956,18.485665225412877))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub129 inherits .../COPOLYFF



DPDPoly_sub130 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.34370039683879433,0.9388587357284528,-0.020354644659793166))
push(move(10.109473684210526,5.776842105263158,20.218947368421052))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.34370039683879433,0.9388587357284528,-0.020354644659793166,0.9928757331649394,0.119154095447775,0.0002828961056392738))
push(move(10.736822632964795,7.490520780950757,20.181794472913698))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9928757331649394,0.119154095447775,0.0002828961056392738,0.22303015964925313,-0.9748088434096596,0.0022949285719997044))
push(move(11.585279102760968,5.953952144143613,20.21936786374755))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.22303015964925313,-0.9748088434096596,0.0022949285719997044,-0.007882814644639378,-0.999437384604988,0.03260023753317718))
push(move(11.564871892064906,3.8713253240716266,20.190314907579218))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.007882814644639378,-0.999437384604988,0.03260023753317718,-0.006243909021061213,-0.8178767742878505,-0.5753595360126025))
push(move(11.551690193860008,1.6953195646576342,20.358278450640036))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.006243909021061213,-0.8178767742878505,-0.5753595360126025,0.015833471042011688,0.47661337812800914,-0.8789704141688555))
push(move(11.54860893465289,1.7410740498050752,18.691726827706823))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.015833471042011688,0.47661337812800914,-0.8789704141688555,0.04038770399642226,0.38227788377065536,-0.9231643694086806))
push(move(11.594933589035206,2.997016495260469,17.95768891052225))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.04038770399642226,0.38227788377065536,-0.9231643694086806,0.5421924141689967,-0.3138697132722949,-0.7794313241767762))
push(move(11.673535444958539,2.9235290363704634,15.836211616469326))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5421924141689967,-0.3138697132722949,-0.7794313241767762,0.8713961971256217,-0.48772442254303855,-0.05285409435478162))
push(move(13.132234205509933,2.1070886927002324,15.747734983016366))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub130 inherits .../COPOLYFF



DPDPoly_sub131 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.006872471179098698,0.9408068976361981,0.33887335466224683))
push(move(12.997894736842104,1.4442105263157894,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.006872471179098698,0.9408068976361981,0.33887335466224683,0.01594538840913953,0.08051263098209384,0.9966260386126898))
push(move(12.985334339604757,3.1636660249268442,17.94986451842252))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.01594538840913953,0.08051263098209384,0.9966260386126898,0.14828945786091904,-0.5415377665341478,0.8274944616760415))
push(move(13.02030824811565,1.557382480229794,18.731425960175173))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.14828945786091904,-0.5415377665341478,0.8274944616760415,0.9705899654912681,-0.13981966604935844,0.19597341624185907))
push(move(13.440044821797215,1.5031103623852686,20.48726947699487))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9705899654912681,-0.13981966604935844,0.19597341624185907,0.38763592304414,0.6814019828938727,-0.6208298711193077))
push(move(14.510974142998506,1.3426425642775472,19.03240876267876))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.38763592304414,0.6814019828938727,-0.6208298711193077,-0.0351390871349787,0.9382688125008748,-0.3441175381225412))
push(move(14.456837165235465,3.2904687515901734,18.858795380542293))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0351390871349787,0.9382688125008748,-0.3441175381225412,-0.04394460805689075,0.3225518617564224,-0.9455311564936355))
push(move(14.396135784446345,4.409007091460395,17.90779522120557))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04394460805689075,0.3225518617564224,-0.9455311564936355,-0.7741515947557657,-0.043158615868049345,-0.6315272299857378))
push(move(14.31426217287865,4.336964129704879,15.79109029973496))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7741515947557657,-0.043158615868049345,-0.6315272299857378,-0.7997458411586589,-0.0033482790283384046,0.6003293917317204))
push(move(13.005597231330592,4.331485169823626,16.773439926213747))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub131 inherits .../COPOLYFF



DPDPoly_sub132 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.4095132197756868,-0.021087376400843,0.9120604395463489))
push(move(11.553684210526315,4.332631578947368,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4095132197756868,-0.021087376400843,0.9120604395463489,0.4764517308555778,0.025099270023218448,0.878842292342048))
push(move(12.215038823614547,4.29857594170014,18.803483353512608))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4764517308555778,0.025099270023218448,0.878842292342048,0.5027583396908745,-0.6628148020000869,0.5548969184640158))
push(move(13.049735476066846,4.411442909142245,20.090077889477435))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5027583396908745,-0.6628148020000869,0.5548969184640158,0.9455701681830494,-0.3134579596354628,0.08741375511584104))
push(move(13.457775391155367,2.6602059199133334,20.175097978970538))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9455701681830494,-0.3134579596354628,0.08741375511584104,0.22402688990814934,0.9745480141525414,0.008253527089650442))
push(move(14.4737201534858,3.9393898066278066,20.22171893745994))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.22402688990814934,0.9745480141525414,0.008253527089650442,-0.4971255866969635,0.8664534410378464,0.04609322688720025))
push(move(14.182584506694278,5.813226008161276,20.20180116479068))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4971255866969635,0.8664534410378464,0.04609322688720025,-0.5262167549141334,0.5434531963564458,-0.6540294719793605))
push(move(12.880712362334336,6.715885563794828,20.369421794676544))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5262167549141334,0.5434531963564458,-0.6540294719793605,0.476026299550439,-0.5208795403994761,-0.7085784829710441))
push(move(12.960222489560124,7.075626984779109,18.682539801164335))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.476026299550439,-0.5208795403994761,-0.7085784829710441,0.518086902324025,-0.8368771313331796,0.17669926058657934))
push(move(13.817534645098739,5.690791865099708,18.97493558128544))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub132 inherits .../COPOLYFF



DPDPoly_sub133 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0017179304858101047,0.9410422358833587,-0.3382847306611621))
push(move(14.442105263157893,5.776842105263158,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0017179304858101047,0.9410422358833587,-0.3382847306611621,0.012332004362057914,0.07926922569083067,-0.9967769617756975))
push(move(14.445270250870271,7.510548525866491,16.70729561776582))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.012332004362057914,0.07926922569083067,-0.9967769617756975,0.12114568340355111,-0.5691212490405521,-0.8132802267873038))
push(move(14.45936329775502,5.8877754944589045,15.935585900031025))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.12114568340355111,-0.5691212490405521,-0.8132802267873038,0.8643908119249768,-0.030460594841990585,-0.5018970775184405))
push(move(14.807347907633313,5.809570971592212,14.276580873882256))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8643908119249768,-0.030460594841990585,-0.5018970775184405,0.9983475878520515,0.041144259380054046,0.04011538046756153))
push(move(16.99856407343665,5.798295637681783,14.46123259714356))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9983475878520515,0.041144259380054046,0.04011538046756153,0.5345940286279517,0.8450984612014948,0.004220832880187149))
push(move(18.89951548631168,5.978218851681788,14.441011440303408))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5345940286279517,0.8450984612014948,0.004220832880187149,0.4642948910162076,0.8851148295478838,0.03165426812719644))
push(move(18.59848334674537,8.327484598864123,14.473864597339594))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4642948910162076,0.8851148295478838,0.03165426812719644,0.5713695200460971,0.12118617827393818,0.8116962373681732))
push(move(20.300736155127524,8.649454778321807,14.53654256850296))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5713695200460971,0.12118617827393818,0.8116962373681732,-0.05344759798777791,0.006487150187571096,0.998549583722201))
push(move(20.183563481518103,8.663676497542143,16.725653564343407))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub133 inherits .../COPOLYFF



DPDPoly_sub134 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0004615187995951826,0.3162487715349716,0.9486761836912629))
push(move(20.218947368421052,8.665263157894737,18.774736842105263))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0004615187995951826,0.3162487715349716,0.9486761836912629,-3.950827340625564e-06,0.8851271026540898,0.46534934418302054))
push(move(20.21970810697204,9.186547734861046,20.338474973618688))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-3.950827340625564e-06,0.8851271026540898,0.46534934418302054,-5.550507333844195e-05,0.999635105176014,-0.027012097640245727))
push(move(20.218935160679177,11.400235421754118,20.21262925950997))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-5.550507333844195e-05,0.999635105176014,-0.027012097640245727,-0.0006127718349266818,0.9999879737886582,-0.004865880057322532))
push(move(20.21946929533335,13.487496876964368,20.222254907345835))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0006127718349266818,0.9999879737886582,-0.004865880057322532,-0.004749436456333913,0.9985702336160553,-0.05324407374838836))
push(move(20.216400069381507,15.537274145848587,20.192498683191463))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004749436456333913,0.9985702336160553,-0.05324407374838836,0.05134504662297079,0.5782038319587489,-0.8142751469224047))
push(move(20.20068816471295,17.436234409009028,20.011707000657427))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.05134504662297079,0.5782038319587489,-0.8142751469224047,-0.5107473185830903,-0.04633264916858744,-0.858481486219245))
push(move(20.372759390461095,17.298058575056594,17.712814321821956))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5107473185830903,-0.04633264916858744,-0.858481486219245,-0.7638032283335673,0.4009670119557895,0.5057964844781608))
push(move(18.691651683948244,17.29934155553339,17.475267094600063))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7638032283335673,0.4009670119557895,0.5057964844781608,0.07858789800562414,0.5395670326624055,0.8382668784766246))
push(move(18.810886480505307,18.117981155281885,18.747098804725855))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub134 inherits .../COPOLYFF



DPDPoly_sub135 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.004685570636931925,-0.9996582003585294,0.025720184364670905))
push(move(18.774736842105263,18.774736842105263,20.218947368421052))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004685570636931925,-0.9996582003585294,0.025720184364670905,0.00700558652408067,-0.9196234551729139,-0.39273861848981084))
push(move(18.764366626518495,16.562269705426587,20.275871887857537))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.00700558652408067,-0.9196234551729139,-0.39273861848981084,0.1381062302094414,-0.21819891882635034,-0.9660827609477093))
push(move(18.79693345876047,15.860986618416515,18.974587809039512))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.1381062302094414,-0.21819891882635034,-0.9660827609477093,0.9448198087756772,0.10019207009372161,-0.311892734823092))
push(move(19.215138854140125,15.850078716252362,17.122623279457805))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9448198087756772,0.10019207009372161,-0.311892734823092,0.46774916318057314,-0.6688226329940681,0.5778295647842501))
push(move(20.295922131781637,16.019944735934867,18.479759406464805))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.46774916318057314,-0.6688226329940681,0.5778295647842501,-0.4795208991874429,-0.7186985242894863,-0.5035197497880105))
push(move(20.291708174794707,14.310719623133332,18.452553145679207))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4795208991874429,-0.7186985242894863,-0.5035197497880105,-0.45984559971238304,0.03655373752743524,-0.8872462165024623))
push(move(19.256251493315123,14.461702425997693,17.388055790147618))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.45984559971238304,0.03655373752743524,-0.8872462165024623,0.5514270731835972,0.3327942644211155,-0.7649680781108323))
push(move(18.916905338792713,14.42000452669797,15.799948411736862))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5514270731835972,0.3327942644211155,-0.7649680781108323,0.8971068320919912,0.4386389726820005,0.052869494591409466))
push(move(20.34055860157284,15.11609754739767,15.883849041833589))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub135 inherits .../COPOLYFF



DPDPoly_sub136 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.07629301531245165,-0.36541540402826095,-0.9277127563601767))
push(move(20.218947368421052,17.330526315789474,15.886315789473683))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07629301531245165,-0.36541540402826095,-0.9277127563601767,-0.5337055006913575,-0.6190954217414247,-0.5760896608259819))
push(move(20.35053698493044,16.700260587193295,14.286203835052365))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5337055006913575,-0.6190954217414247,-0.5760896608259819,-0.7851481578748393,0.6048149950566853,0.13319606578397178))
push(move(18.894322681720148,15.79396902342526,14.456496187661953))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7851481578748393,0.6048149950566853,0.13319606578397178,-0.0263807426774863,0.9364927280020261,-0.3496933325288139))
push(move(18.80856355412857,17.888072904619175,14.547791144996692))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0263807426774863,0.9364927280020261,-0.3496933325288139,0.14368865156755012,-0.4157205530275428,-0.8980701493765246))
push(move(18.805163400700383,18.959043613237924,13.274633853957356))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.14368865156755012,-0.4157205530275428,-0.8980701493765246,0.6085944730005289,-0.6538380132154556,-0.44956492290621847))
push(move(19.042943907494344,17.209962775134073,13.082887712040678))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6085944730005289,-0.6538380132154556,-0.44956492290621847,0.3720416606824259,0.001324990611303185,-0.9282150866671703))
push(move(20.334089699836326,17.316455357627795,12.145225579163933))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3720416606824259,0.001324990611303185,-0.9282150866671703,-0.32467028389884517,-0.5634363985394292,-0.7596898258855128))
push(move(20.25589813555633,17.214282595019768,10.056660993617019))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.32467028389884517,-0.5634363985394292,-0.7596898258855128,-0.490395459826264,-0.8704822263868361,-0.042106846550223835))
push(move(19.410472023584763,15.71359903556084,9.98407013484571))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub136 inherits .../COPOLYFF



DPDPoly_sub137 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3462499448418091,-0.9373781641270421,-0.037857008794412395))
push(move(18.774736842105263,15.886315789473683,11.553684210526315))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3462499448418091,-0.9373781641270421,-0.037857008794412395,-0.9961086883768477,-0.0753096699526348,0.04578137778377977))
push(move(18.13647422501641,14.158392221107452,11.483900189277398))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9961086883768477,-0.0753096699526348,0.04578137778377977,-0.3067982567316354,0.6348523697465012,-0.7091102158999553))
push(move(17.299545110856233,15.774785588308335,11.621484351956534))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3067982567316354,0.6348523697465012,-0.7091102158999553,0.007915627948424117,0.027853327687117527,-0.9995806795706569))
push(move(17.31969486261024,15.848539744459153,9.596058334539949))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.007915627948424117,0.027853327687117527,-0.9995806795706569,0.002660963160877965,0.004880112066805901,-0.9999845517713122))
push(move(17.331808944319565,15.88831481577483,7.5472270992198185))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.002660963160877965,0.004880112066805901,-0.9999845517713122,-0.00026286177076967045,0.035530322297464376,-0.9993685641949759))
push(move(17.330682302149597,15.86869031890815,5.467000869778867))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00026286177076967045,0.035530322297464376,-0.9993685641949759,0.00014135081314782836,-0.5220068394365063,-0.8529412873120031))
push(move(17.330686724453376,16.040002272713092,3.2806833066351753))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.00014135081314782836,-0.5220068394365063,-0.8529412873120031,-0.004236169790421884,-0.6377602180974632,0.7702233176668849))
push(move(17.33109109161532,14.359035777522971,3.0002770825666722))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004236169790421884,-0.6377602180974632,0.7702233176668849,-0.004967332841660278,0.05473957203839693,0.9984883098251545))
push(move(17.320310420559466,14.477837826569273,5.1673100486410055))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub137 inherits .../COPOLYFF



DPDPoly_sub138 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.38370015433097576,0.005716449662968768,0.9234400434081447))
push(move(17.330526315789474,14.442105263157893,7.221052631578947))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.38370015433097576,0.005716449662968768,0.9234400434081447,0.4899526334039683,-0.007009890554417827,0.8717208718706532))
push(move(17.924364497693535,14.450952395577536,8.650225777029075))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4899526334039683,-0.007009890554417827,0.8717208718706532,-0.48234260531442164,-0.2609969134205303,0.8361974780417916))
push(move(18.88382693830465,14.419881752925297,9.984676052742891))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.48234260531442164,-0.2609969134205303,0.8361974780417916,-0.25637463930925886,-0.9665459097234325,-0.00781336777259066))
push(move(17.09048912290023,13.999740131513553,10.095846540612214))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.25637463930925886,-0.9665459097234325,-0.00781336777259066,0.6086536524778463,-0.4375491455674858,0.6618847909859691))
push(move(18.488739392157143,12.930380869607037,9.972635219418901))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6086536524778463,-0.4375491455674858,0.6618847909859691,-0.4860020436719826,0.010676569425253638,0.8738924558616834))
push(move(18.49101560545946,12.992929175407886,11.618859134729146))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4860020436719826,0.010676569425253638,0.8738924558616834,0.23565693106673158,-0.07625232927055718,0.9688402309571089))
push(move(17.068281697320497,12.961585707924126,12.5267958027975))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.23565693106673158,-0.07625232927055718,0.9688402309571089,0.8160921595811361,-0.5522210756240701,0.17042731795927804))
push(move(18.820092965839837,12.886448474307247,12.971772390411827))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8160921595811361,-0.5522210756240701,0.17042731795927804,0.41963084124270805,-0.9066641081938428,0.04324525397082059))
push(move(19.568262561992853,11.269935928029742,13.048875360496359))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub138 inherits .../COPOLYFF



DPDPoly_sub139 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.339017419421198,-0.10061284672130384,0.935384543598849))
push(move(20.218947368421052,12.997894736842104,12.997894736842104))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.339017419421198,-0.10061284672130384,0.935384543598849,-0.6252901515550042,0.5343930944861793,0.5687145566396249))
push(move(19.636807298427815,12.825128482728802,14.604080119914423))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6252901515550042,0.5343930944861793,0.5687145566396249,0.4316030015556703,0.8433368905962869,-0.32015892617186636))
push(move(18.664965404435318,14.325977753094435,14.41127404799279))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4316030015556703,0.8433368905962869,-0.32015892617186636,0.26146202356158976,-0.00923406979274344,-0.9651695924500219))
push(move(20.45818162416207,14.430064656443063,13.994792600679457))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.26146202356158976,-0.00923406979274344,-0.9651695924500219,-0.6024612801954173,0.6860078288688095,-0.40796282256597943))
push(move(19.06349689291382,14.311902792879994,12.94012168301964))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6024612801954173,0.6860078288688095,-0.40796282256597943,0.5392203008360642,0.7306327890565512,-0.4188283595002966))
push(move(19.078057993655307,16.001577459767756,13.060227757592918))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5392203008360642,0.7306327890565512,-0.4188283595002966,0.44887967083274616,-0.6470153851508716,-0.6163425447680492))
push(move(20.316119120289223,16.009181011453155,11.967172942492255))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.44887967083274616,-0.6470153851508716,-0.6163425447680492,-0.0317498893691908,-0.4436040048523787,-0.8956603326060472))
push(move(20.22447139112433,14.34913660734627,11.486123611950918))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0317498893691908,-0.4436040048523787,-0.8956603326060472,-0.003097314053283156,0.1200308347821631,-0.9927653324664153))
push(move(20.217272569897492,14.628113974975111,9.178724353857879))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub139 inherits .../COPOLYFF



DPDPoly_sub140 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.015029828436986487,0.08261848207850254,0.9964679074993831))
push(move(20.218947368421052,12.997894736842104,8.665263157894737))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.015029828436986487,0.08261848207850254,0.9964679074993831,0.024125707866908243,-0.4203621450755443,0.9070356206938113))
push(move(20.18550836025254,13.181707886052404,10.88224777872595))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.024125707866908243,-0.4203621450755443,0.9070356206938113,-0.6152424556071588,-0.7505765436647134,0.24106342094728003))
push(move(20.296358812952374,11.649091167798762,11.575641498982975))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6152424556071588,-0.7505765436647134,0.24106342094728003,-0.21401397018349586,-0.9745900069640757,0.066123663631567))
push(move(18.522083692426875,11.1523818432144,11.53400845821031))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.21401397018349586,-0.9745900069640757,0.066123663631567,0.6131891438646975,-0.4474546401766032,-0.6509864966578844))
push(move(19.94172123792971,10.034120722576326,11.685213484876266))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6131891438646975,-0.4474546401766032,-0.6509864966578844,-0.8277995244609954,0.07987868084593883,-0.5553083320538804))
push(move(19.988847647812268,10.082059016322019,9.976832278080337))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8277995244609954,0.07987868084593883,-0.5553083320538804,-0.8746459378526493,-0.4828950641592063,0.04250694541525657))
push(move(17.634389950863845,10.256767117070682,10.13739876566565))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8746459378526493,-0.4828950641592063,0.04250694541525657,-0.9100941728415519,-0.41418523139285074,-0.013386211409586993))
push(move(17.227521812595914,8.557521419274472,10.111030039107444))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9100941728415519,-0.41418523139285074,-0.013386211409586993,-0.8709669011038679,0.4913409396072743,-0.000859213225063344))
push(move(15.742015017948473,9.395544429505971,10.109564579188973))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub140 inherits .../COPOLYFF



DPDPoly_sub141 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.06294572233835856,0.9978833387241622,-0.016330288914199843))
push(move(15.886315789473683,11.553684210526315,10.109473684210526))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.06294572233835856,0.9978833387241622,-0.016330288914199843,-0.4122510777662037,0.910707150186707,0.025720332023717377))
push(move(16.02422889647117,13.740031217948113,10.07369427301849))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4122510777662037,0.910707150186707,0.025720332023717377,-0.6394066053255565,0.42744582740310105,-0.6391003502594302))
push(move(14.56019682161681,14.483224219419599,10.192210205703798))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6394066053255565,0.42744582740310105,-0.6391003502594302,0.0031281008694022134,0.872510272193897,-0.4885857549101103))
push(move(14.45535894712802,14.788826941982588,8.505575761596186))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0031281008694022134,0.872510272193897,-0.4885857549101103,-0.5300838384282732,0.8385537528424393,0.12585200765585558))
push(move(14.569677531622675,17.127645615392673,8.711394832833522))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5300838384282732,0.8385537528424393,0.12585200765585558,-0.5405019093706426,0.0693018420080249,0.838483715203214))
push(move(12.864356134336036,17.305676698061543,8.883310156913122))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5405019093706426,0.0693018420080249,0.838483715203214,0.033380150386231114,-0.001351363048976362,0.9994418139031919))
push(move(13.028896827354059,17.325200774930536,11.101616785486526))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.033380150386231114,-0.001351363048976362,0.9994418139031919,-0.05117740310064346,0.22609603873188508,0.9727597106591247))
push(move(13.007929611082917,17.29986426495253,13.18207257613454))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05117740310064346,0.22609603873188508,0.9727597106591247,-0.09875625144232214,0.507933768544944,0.8557163604681121))
push(move(12.845310138215902,18.136266219115164,14.591159509170648))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub141 inherits .../COPOLYFF



DPDPoly_sub142 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.04361774782253355,0.4005085415781173,0.9152542817151195))
push(move(14.442105263157893,18.774736842105263,14.442105263157893))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04361774782253355,0.4005085415781173,0.9152542817151195,0.021950590801966426,0.4708395410610715,0.881945745574434))
push(move(14.372512906100782,19.413750427660634,15.9023985142061))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.021950590801966426,0.4708395410610715,0.881945745574434,-0.7615830513897509,0.3206662897841225,0.5631734958535967))
push(move(14.5108041968705,20.248326993388627,17.20233768058814))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7615830513897509,0.3206662897841225,0.5631734958535967,-0.9991888254200528,0.024509089472426644,0.031953023157874745))
push(move(12.50074150205757,20.201864068534434,17.28653126654376))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9991888254200528,0.024509089472426644,0.031953023157874745,-0.8081899197024537,-0.588726822274651,0.015158575979717908))
push(move(10.358392231817861,20.350181451513762,17.335127512004224))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8081899197024537,-0.588726822274651,0.015158575979717908,0.8088934364069705,-0.5878159478514647,0.012799218304499586))
push(move(10.359596601378032,18.64214474678055,17.326691019677636))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8088934364069705,-0.5878159478514647,0.012799218304499586,0.9990922650013293,0.0320110378909265,0.028105861802467363))
push(move(12.488991308281452,18.801893309646836,17.368840237898198))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9990922650013293,0.0320110378909265,0.028105861802467363,0.8521881572345718,0.004050187368730439,0.5232197823586405))
push(move(14.477081849185735,18.774069475757134,17.442521634529236))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8521881572345718,0.004050187368730439,0.5232197823586405,0.42298146555280575,0.02300823787103372,0.9058461794305204))
push(move(15.22789964989915,18.814910495904538,19.050453640097846))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub142 inherits .../COPOLYFF



DPDPoly_sub143 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.06748699260442449,0.9211202169634274,0.3833836873557076))
push(move(15.886315789473683,18.774736842105263,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.06748699260442449,0.9211202169634274,0.3833836873557076,-0.5216401853937976,0.5950031940187923,0.6114431421561287))
push(move(16.003307082343877,20.371534104995302,17.995136657992603))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5216401853937976,0.5950031940187923,0.6114431421561287,-0.972279197379816,-0.044271388299145314,0.22959356811663273))
push(move(14.627702785116869,20.21036005249989,18.805815819341678))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.972279197379816,-0.044271388299145314,0.22959356811663273,-0.9992458361953906,0.004480531874195278,-0.038570502722920334))
push(move(12.54001910752886,20.213838077827397,18.812955907541543))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9992458361953906,0.004480531874195278,-0.038570502722920334,-0.8128839868770991,0.029594849010990004,0.5816732491621124))
push(move(10.357988138871995,20.22950508355557,18.641006485718517))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8128839868770991,0.029594849010990004,0.5816732491621124,0.6090801232874292,-0.44605795686562205,0.6557847989493482))
push(move(10.390218207221688,20.292106359741407,20.351283264114713))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6090801232874292,-0.44605795686562205,0.6557847989493482,-0.22891270623081045,-0.9701235470601086,-0.080369623400883))
push(move(11.797658580416766,19.175166859137367,20.191071830103795))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.22891270623081045,-0.9701235470601086,-0.080369623400883,-0.4502811049178071,-0.8927918318689111,0.013025801401557202))
push(move(10.008746540230057,18.675443603102153,20.21735127440982))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4502811049178071,-0.8927918318689111,0.013025801401557202,0.48165264971166194,-0.8763611336965914,0.0013741803958166306))
push(move(10.810178640650397,17.21724765104902,20.21963780243294))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub143 inherits .../COPOLYFF



DPDPoly_sub144 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.07345636393083871,0.9972984320513141,-5.10398407293701e-06))
push(move(12.997894736842104,17.330526315789474,20.218947368421052))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07345636393083871,0.9972984320513141,-5.10398407293701e-06,0.40601846254927926,0.9138648740722074,-2.471449011150446e-06))
push(move(12.835746022001103,19.531978312818907,20.2189361018076))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.40601846254927926,0.9138648740722074,-2.471449011150446e-06,0.7300513615239402,-0.6833922770940962,-7.172996010634935e-05))
push(move(14.317864128697241,20.301508606823727,20.218939333719803))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7300513615239402,-0.6833922770940962,-7.172996010634935e-05,0.4097826865591068,-0.9121831482269873,0.00023213595824837796))
push(move(14.29527799002172,18.165728035529987,20.218792697965956))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4097826865591068,-0.9121831482269873,0.00023213595824837796,0.5198953383337243,-0.8542282057461068,0.0017348448488427653))
push(move(15.630644856910228,17.379236639581126,20.21968300499316))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5198953383337243,-0.8542282057461068,0.0017348448488427653,-0.2302877201212485,-0.9730237294688547,-0.013870394798933164))
push(move(15.920849641941798,15.494788226794743,20.22421708706665))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2302877201212485,-0.9730237294688547,-0.013870394798933164,-0.9498076830614143,0.300833185157114,-0.08581817934291895))
push(move(14.8814227877781,14.213584335048841,20.174556821601946))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9498076830614143,0.300833185157114,-0.08581817934291895,0.1517682415884737,0.7576942439538693,-0.6347171287465911))
push(move(14.43542232888088,15.965268554419756,20.090003951263988))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.1517682415884737,0.7576942439538693,-0.6347171287465911,0.5140502508455271,-0.07702451511963772,-0.8542947756344031))
push(move(15.209070407935085,15.849346291830887,18.80428623975915))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub144 inherits .../COPOLYFF



DPDPoly_sub145 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9364310922137548,0.07646581289683642,-0.3424175652523981))
push(move(15.886315789473683,15.886315789473683,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9364310922137548,0.07646581289683642,-0.3424175652523981,-0.5668141741989148,-0.5530778811854619,-0.6105952417687207))
push(move(14.264070173474112,16.01878290934738,16.737332221006948))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5668141741989148,-0.5530778811854619,-0.6105952417687207,-0.6793452854608834,-0.704292772745727,-0.20606230460762723))
push(move(14.534737083443293,14.567491523931688,15.874550857969561))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6793452854608834,-0.704292772745727,-0.20606230460762723,-0.6414950725244116,-0.490992793549278,0.5894150902458947))
push(move(12.876764049818656,14.580530966797191,16.316527803643876))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6414950725244116,-0.490992793549278,0.5894150902458947,0.7021018941930217,-0.5577561494161585,0.4426748332117276))
push(move(12.87367829840564,13.296136640556226,17.400756055203477))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7021018941930217,-0.5577561494161585,0.4426748332117276,0.876398512963668,0.4800247174214507,-0.03875457572375407))
push(move(14.508033651386882,13.284635514647636,17.345042332332856))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.876398512963668,0.4800247174214507,-0.03875457572375407,0.9625852825003105,-0.2546839138480466,-0.09255094781166898))
push(move(15.423506596575187,14.692739430493635,17.28800196856107))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9625852825003105,-0.2546839138480466,-0.09255094781166898,-0.07863327076928356,-0.7235901595846016,-0.6857361662333811))
push(move(15.884955274475555,12.920325157523394,17.21265364574477))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07863327076928356,-0.7235901595846016,-0.6857361662333811,-0.3928677380742557,0.06845011336488833,-0.9170439042710834))
push(move(15.243050357112466,13.032165505062132,15.714299531775266))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub145 inherits .../COPOLYFF



DPDPoly_sub146 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.321783970430326,-0.01867242051251416,-0.9466289754102708))
push(move(12.997894736842104,12.997894736842104,15.886315789473683))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.321783970430326,-0.01867242051251416,-0.9466289754102708,-0.9959242593352425,0.05115459611453811,-0.07428375975882605))
push(move(12.410590449439795,12.963814752657333,14.158575109618761))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9959242593352425,0.05115459611453811,-0.07428375975882605,-0.4925171178651112,-0.6129455285448435,0.6178387068213891))
push(move(11.496472488852907,13.075013702439483,15.774328066993029))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4925171178651112,-0.6129455285448435,0.6178387068213891,-0.9642933573673254,-0.24009306328411492,0.11177496097114883))
push(move(11.06979741802068,11.29517611350751,15.840534583916654))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9642933573673254,-0.24009306328411492,0.11177496097114883,-0.8215321855994813,0.560413172900768,0.10498544500754949))
push(move(10.1852254016107,12.748534911008349,15.926319772504902))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8215321855994813,0.560413172900768,0.10498544500754949,-0.8572907407291045,0.03463935206840248,0.5136659431463456))
push(move(8.595157309904812,12.983266901776183,16.15677440694257))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8572907407291045,0.03463935206840248,0.5136659431463456,-0.5944353902895338,0.6367653789149607,0.4910971583980262))
push(move(7.66306072241515,12.850444503806285,17.437534156562695))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5944353902895338,0.6367653789149607,0.4910971583980262,-0.8711236544015301,0.48444734941851786,-0.08033893441847482))
push(move(7.1569134584660175,14.523928689405386,17.344990115601835))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8711236544015301,0.48444734941851786,-0.08033893441847482,-0.996668515068164,-0.03751511303997494,-0.07241883294709209))
push(move(4.812513855142287,14.4356842883835,17.17464392660567))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub146 inherits .../COPOLYFF



DPDPoly_sub147 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.057499314480790126,0.998343210671052,-0.002159291840976537))
push(move(4.332631578947368,14.442105263157893,18.774736842105263))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.057499314480790126,0.998343210671052,-0.002159291840976537,-0.4180674203013423,0.9080597675847633,-0.025437975086207647))
push(move(4.461368079712491,16.67731819856336,18.769902355324888))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4180674203013423,0.9080597675847633,-0.025437975086207647,-0.7103227556765689,0.08330552482281085,0.69892901807125))
push(move(3.003175768333145,17.329738395465593,18.693843995290646))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7103227556765689,0.08330552482281085,0.69892901807125,0.4454989596210705,-0.6029952240373405,0.6617608607077795))
push(move(2.833062955534323,16.86828323784629,20.37208909715078))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4454989596210705,-0.6029952240373405,0.6617608607077795,0.42209816947570655,-0.9057781441820825,-0.03740439609618767))
push(move(4.02220894309259,15.95044867043861,20.207554086537954))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.42209816947570655,-0.9057781441820825,-0.03740439609618767,-0.5812130203418612,-0.7132975387942498,-0.39166062622525244))
push(move(4.0274810397068075,14.305188029442316,20.266245266602237))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5812130203418612,-0.7132975387942498,-0.39166062622525244,-0.364832480016668,0.0032577599205478175,-0.931067477965581))
push(move(2.7816267860459574,14.42793598004338,19.371565959109276))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.364832480016668,0.0032577599205478175,-0.931067477965581,0.3371245880210949,-0.5391366022603381,-0.771802264997185))
push(move(2.8535759787368957,14.315670377006276,17.27039132169483))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3371245880210949,-0.5391366022603381,-0.771802264997185,0.5287402575024901,-0.8473909680130088,0.04860336846532583))
push(move(3.6667720293852244,13.012393430026316,17.345142708076683))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub147 inherits .../COPOLYFF



DPDPoly_sub148 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9176749929803572,0.10867922733908025,0.3821798435337506))
push(move(4.332631578947368,11.553684210526315,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9176749929803572,0.10867922733908025,0.3821798435337506,-0.5947763956428133,-0.5581435930615237,0.5785471188334758))
push(move(2.7474918788443645,11.74141053972725,17.990682086839747))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5947763956428133,-0.5581435930615237,0.5785471188334758,0.03588273637553606,-0.632210904520693,0.773964987215398))
push(move(2.894682122321275,10.204299328675463,18.7292393804868))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03588273637553606,-0.632210904520693,0.773964987215398,0.07789523136048467,-0.979918766836844,0.18355256285940366))
push(move(2.8632675320051226,9.701581981497807,20.48788020965381))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07789523136048467,-0.979918766836844,0.18355256285940366,-0.6387720336610574,-0.34008902376038125,-0.690151972343938))
push(move(3.0205524870732767,8.620855381532175,19.025840695288185))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6387720336610574,-0.34008902376038125,-0.690151972343938,-0.5318762215581174,0.8409959487040715,-0.09916400155499641))
push(move(1.3113065370360812,8.875301443403252,18.811086478500762))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5318762215581174,0.8409959487040715,-0.09916400155499641,0.03407902761553642,0.9989756203714388,-0.029771291209459247))
push(move(1.4750945361252874,11.064513930192703,18.73770261270567))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03407902761553642,0.9989756203714388,-0.029771291209459247,-0.06103213484743116,0.620794509316482,-0.7815940479036885))
push(move(1.454283473201152,13.066456047802635,18.686182445122004))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06103213484743116,0.620794509316482,-0.7815940479036885,-0.07053090821343089,-0.054974024833496456,-0.9959935981622545))
push(move(1.290804796434758,12.939035586845186,16.377638295900923))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub148 inherits .../COPOLYFF



DPDPoly_sub149 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.014335769032562819,-0.9991255929886703,0.039275121403794654))
push(move(2.888421052631579,12.997894736842104,15.886315789473683))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.014335769032562819,-0.9991255929886703,0.039275121403794654,-0.005823656633293109,-0.9206486251066681,-0.3903488108251635))
push(move(2.8565173668244728,10.774380328361811,15.973721015552343))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.005823656633293109,-0.9206486251066681,-0.3903488108251635,-0.12423006684797046,-0.21819549426899654,-0.9679657105350671))
push(move(2.8700042954252054,10.086431498429437,14.651875002964184))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.12423006684797046,-0.21819549426899654,-0.9679657105350671,-0.49524281538087206,0.004402173984025108,-0.8687434458330272))
push(move(2.474488217605861,10.103391081121613,12.997057424756392))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.49524281538087206,0.004402173984025108,-0.8687434458330272,0.3118884460022151,-0.03530214519781568,-0.9494626668778271))
push(move(1.2453156737784277,10.100873226325792,11.801883952635364))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3118884460022151,-0.03530214519781568,-0.9494626668778271,0.5864860231216825,0.39482525094814724,-0.7072108355339628))
push(move(3.024674147601622,10.041116431850483,11.322160495843793))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5864860231216825,0.39482525094814724,-0.7072108355339628,0.6123810920564948,0.6070858402269472,-0.5063952810677014))
push(move(2.7507079908986563,11.114310675727872,9.986615188462073))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6123810920564948,0.6070858402269472,-0.5063952810677014,0.9532266859328914,0.0925570352041087,0.2877361299170167))
push(move(4.536350538589789,11.53972137553419,10.072112444348368))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9532266859328914,0.0925570352041087,0.2877361299170167,0.8352584104119195,-0.08101970302685524,0.5438558591737278))
push(move(5.834802371633698,11.41377211169378,10.917564137444806))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub149 inherits .../COPOLYFF



DPDPoly_sub150 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9185956623903976,-0.10175753900007989,0.38187355537428064))
push(move(5.776842105263158,12.997894736842104,11.553684210526315))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9185956623903976,-0.10175753900007989,0.38187355537428064,-0.5945497914462169,0.5510499170893561,0.5855378163424408))
push(move(4.178140100614693,12.820798340409977,12.21828784789864))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5945497914462169,0.5510499170893561,0.5855378163424408,0.04566015040545266,0.5048716889537568,0.8619859212063341))
push(move(4.340778461267436,14.32888965660143,12.967980510569822))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.04566015040545266,0.5048716889537568,0.8619859212063341,0.008890722304521533,-0.29656018990303695,0.9549727790997912))
push(move(4.328009870614011,14.477932695657977,15.047574011143865))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.008890722304521533,-0.29656018990303695,0.9549727790997912,0.08843367040519486,-0.9551151637572503,0.2827269175363862))
push(move(4.368463446164317,13.40542538707787,15.941687939589922))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08843367040519486,-0.9551151637572503,0.2827269175363862,0.5849048528499353,-0.7292361226604505,-0.3551070127718519))
push(move(4.607651476531384,11.457703669707444,15.941602370406667))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5849048528499353,-0.7292361226604505,-0.3551070127718519,0.3345552263290317,0.028113630199068748,-0.9419566998185004))
push(move(5.839803790537158,11.571016726222354,15.048408849982168))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3345552263290317,0.028113630199068748,-0.9419566998185004,-0.4961700959272025,0.04065170622376635,-0.8672731257733558))
push(move(5.662943255056898,11.546382848745004,12.970376447700975))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4961700959272025,0.04065170622376635,-0.8672731257733558,-0.8751461036063455,0.0950418915787243,-0.47443264662939194))
push(move(4.195977836654084,11.705697010884373,12.175107768450017))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub150 inherits .../COPOLYFF



DPDPoly_sub151 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0001865529390913406,0.019276044294776716,-0.9998141823930818))
push(move(4.332631578947368,10.109473684210526,11.553684210526313))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0001865529390913406,0.019276044294776716,-0.9998141823930818,0.0013958764780763041,-0.000616137439065099,-0.9999988359510796))
push(move(4.3330284720325665,10.150483644856726,9.42657038746028))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0013958764780763041,-0.000616137439065099,-0.9999988359510796,0.02457646253706015,-0.01110922039239338,-0.9996362251896626))
push(move(4.338460815722982,10.106900669280451,7.377648521372577))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.02457646253706015,-0.01110922039239338,-0.9996362251896626,-0.37024169253034006,0.008744437008699106,-0.928894301809237))
push(move(4.437278280385363,10.10335993471701,5.186257741106533))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.37024169253034006,0.008744437008699106,-0.928894301809237,-0.530482001186676,0.07027839767096564,-0.8447779549904111))
push(move(3.156052975982895,10.134826997086853,4.411121717643869))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.530482001186676,0.07027839767096564,-0.8447779549904111,-0.040802390783825415,0.8653571986458424,-0.4994918254167371))
push(move(2.905648646934484,10.3062706389888,2.74717979566267))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.040802390783825415,0.8653571986458424,-0.4994918254167371,-0.48181136696193294,0.8746257058752352,0.05373714998509113))
push(move(3.034913963563433,12.704002832625997,2.928170712072797))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.48181136696193294,0.8746257058752352,0.05373714998509113,-0.6333311866407316,0.6995230175142373,-0.330997214483776))
push(move(1.3611544931627,13.109970140685174,2.919439563039408))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6333311866407316,0.6995230175142373,-0.330997214483776,0.07163593815821112,0.850718433820991,-0.5207172348994733))
push(move(1.4723033736924427,14.42992774850469,2.1115051767569906))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub151 inherits .../COPOLYFF



DPDPoly_sub152 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.2953364279078419,-0.0033597259183792564,0.9553874117824609))
push(move(1.4442105263157892,15.886315789473683,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2953364279078419,-0.0033597259183792564,0.9553874117824609,0.8921871828440768,-0.027479499993402733,0.4508291337622961))
push(move(1.9374002807824777,15.880705298372064,3.039636076680299))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8921871828440768,-0.027479499993402733,0.4508291337622961,0.8214687793460038,0.5302775759974578,-0.20974922396530293))
push(move(4.2426875681652705,15.800122273884387,2.858302776115756))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8214687793460038,0.5302775759974578,-0.20974922396530293,0.07729356184471946,0.8704062444383626,-0.4862290354761448))
push(move(4.2725600258442915,17.38810628586188,2.4433895038626767))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07729356184471946,0.8704062444383626,-0.4862290354761448,-0.6979664654973394,0.5263717954961993,-0.48556724142723906))
push(move(4.478231746763471,18.452595765853303,1.3765698084734057))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6979664654973394,0.5263717954961993,-0.48556724142723906,-0.8870733708976413,-0.461180560026513,0.02033041312732089))
push(move(2.8245609870137076,18.480115560838904,1.4360332286965594))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8870733708976413,-0.461180560026513,0.02033041312732089,-0.9413149120392047,0.33715839577107076,-0.01582569220294531))
push(move(1.9142644308382744,17.119614840666113,1.4353321572123379))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9413149120392047,0.33715839577107076,-0.01582569220294531,-0.13948537722262014,0.9614027971713698,0.23716764351852307))
push(move(1.4680650435995233,18.96598271358666,1.4132273780715958))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13948537722262014,0.9614027971713698,0.23716764351852307,-0.020269440712072664,0.867591665014897,0.496864018187973))
push(move(1.4338393193635826,20.43094435204541,2.252201235852208))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub152 inherits .../COPOLYFF



DPDPoly_sub153 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0015966073954995271,-0.9441638054957933,0.32947254701496276))
push(move(1.4442105263157894,18.774736842105263,2.888421052631579))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0015966073954995271,-0.9441638054957933,0.32947254701496276,-0.0017960159799382581,-0.4738463090840708,0.8806057288559977))
push(move(1.4468277983247164,17.226996610579512,3.4285158044427244))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0017960159799382581,-0.4738463090840708,0.8806057288559977,-0.025197353301518587,-0.09259640736275665,0.9953848495582543))
push(move(1.4386700648980404,17.312986377327487,5.604968187776287))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.025197353301518587,-0.09259640736275665,0.9953848495582543,0.4786295571950952,-0.5703830038880625,0.667515524804373))
push(move(1.3476618727050884,16.862577048917593,7.345921683267686))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4786295571950952,-0.5703830038880625,0.667515524804373,0.4319529132356741,-0.8997818330914958,-0.0617197989766777))
push(move(2.5820557493409093,15.950413273574723,7.199578641166211))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4319529132356741,-0.8997818330914958,-0.0617197989766777,-0.572026279550838,-0.708708595067911,0.412938328058918))
push(move(2.5778397863901548,14.300048346627538,7.170147122634579))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.572026279550838,-0.708708595067911,0.412938328058918,-0.32370131084257675,0.0456647939667492,0.9450567114997767))
push(move(1.3887940826700238,14.472028749005762,8.060978711734265))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.32370131084257675,0.0456647939667492,0.9450567114997767,0.515340154432746,-0.00968066954940774,0.8569310414883503))
push(move(1.5586981119171348,14.443819449891222,10.145565037757722))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.515340154432746,-0.00968066954940774,0.8569310414883503,0.9182183863708798,-0.0015503065912820988,0.39607144744342615))
push(move(3.0220075202048773,14.4413488195331,10.776760278455082))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub153 inherits .../COPOLYFF



DPDPoly_sub154 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.058962242894235135,0.00031925737778647944,0.9982601624765))
push(move(2.888421052631579,14.442105263157893,12.997894736842104))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.058962242894235135,0.00031925737778647944,0.9982601624765,-0.42193871990719817,-0.0005119574949156915,0.9066242080060506))
push(move(3.019763700738871,14.442816431990149,15.221591238260281))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.42193871990719817,-0.0005119574949156915,0.9066242080060506,-0.5090838492829477,-0.009494975540952341,0.860664557094536))
push(move(1.5637762296565414,14.440498011172647,15.844173134290905))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5090838492829477,-0.009494975540952341,0.860664557094536,-0.020706667534343748,0.032355220602824294,0.9992619144245241))
push(move(1.4774367611534631,14.414050332676368,17.829071585992676))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.020706667534343748,0.032355220602824294,0.9992619144245241,0.08844322319713553,-0.5342427599855734,0.8406916614749421))
push(move(1.4775113065208905,14.575291338670196,20.007143930883014))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08844322319713553,-0.5342427599855734,0.8406916614749421,0.6064768453920297,-0.7131431329397072,-0.3515859894026939))
push(move(1.733010306829692,12.870254081413222,20.2584103298406))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6064768453920297,-0.7131431329397072,-0.3515859894026939,0.8767420562169356,0.003298611638961092,-0.48094956702522856))
push(move(2.830095923913909,12.984816056814713,19.22302528798645))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8767420562169356,0.003298611638961092,-0.48094956702522856,0.7968121748921444,-0.5802612793990796,-0.16848503071131885))
push(move(4.396450672527381,12.880274879808452,18.797341499394463))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7968121748921444,-0.5802612793990796,-0.16848503071131885,0.3771113300094585,-0.9259443755413541,-0.020348419639594845))
push(move(4.996360038690829,11.407280940804574,18.764971197690425))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub154 inherits .../COPOLYFF



DPDPoly_sub155 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9325001431941499,0.3611695267897524,-0.00023635007183187907))
push(move(7.221052631578947,11.553684210526315,18.774736842105263))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9325001431941499,0.3611695267897524,-0.00023635007183187907,0.07965608304748456,0.9968218558610458,0.0010469533288505022))
push(move(8.923021783847556,12.212879169178056,18.77430546358556))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07965608304748456,0.9968218558610458,0.0010469533288505022,-0.5215796327245653,0.853162556883259,0.008266695792604736))
push(move(7.333636705900786,12.962569277583825,18.77621658184236))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5215796327245653,0.853162556883259,0.008266695792604736,-0.01973264565382066,0.9993496068902603,-0.030182543030417366))
push(move(7.2524218771013675,14.945526685575956,18.80078337866074))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01973264565382066,0.9993496068902603,-0.030182543030417366,0.08320658491856488,0.8200979257121536,0.566141374984034))
push(move(7.251815322455719,17.106370814161526,18.65106471574371))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08320658491856488,0.8200979257121536,0.566141374984034,0.9099987288235647,0.22947633482073304,0.34531568932896656))
push(move(7.489626463442653,17.283454500042644,20.41473413502463))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9099987288235647,0.22947633482073304,0.34531568932896656,0.49659750873252806,-0.6091260000923845,-0.6183497637519554))
push(move(8.777649146355058,17.49114360819233,19.230070314336597))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.49659750873252806,-0.6091260000923845,-0.6183497637519554,-0.3690531099972266,-0.7614432864698736,0.5329201849164027))
push(move(8.694354402333385,15.805736433173923,18.91463954474005))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3690531099972266,-0.7614432864698736,0.5329201849164027,-0.4344645008098079,0.048485169508171166,0.8993830028824473))
push(move(7.998415505594477,15.88340150204105,20.3552995148989))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub155 inherits .../COPOLYFF



DPDPoly_sub156 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.015031274053505302,-0.9355699627896724,-0.35282135072308146))
push(move(5.776842105263158,15.886315789473683,20.218947368421052))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.015031274053505302,-0.9355699627896724,-0.35282135072308146,0.0031515771688873638,-0.13154334485743158,-0.9913054100452935))
push(move(5.804096880369046,14.189936038769169,19.5792100758746))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0031515771688873638,-0.13154334485743158,-0.9913054100452935,0.02477853198205244,0.9932969544970265,-0.112903430150489))
push(move(5.78146273558695,15.693455790949228,18.765562097384908))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.02477853198205244,0.9932969544970265,-0.112903430150489,-0.4919047924429984,0.609595393040593,0.6216294168998889))
push(move(5.886007238936618,17.473476394019468,19.205985364506148))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4919047924429984,0.609595393040593,0.6216294168998889,-0.6966924729861262,0.5861990170005568,0.41350974662280504))
push(move(4.576389619208225,17.1868484785325,20.288435852966472))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6966924729861262,0.5861990170005568,0.41350974662280504,-0.8914905953364293,0.4524177333558876,-0.023721571866551643))
push(move(4.162561825700992,18.92358823857927,20.228906529551505))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8914905953364293,0.4524177333558876,-0.023721571866551643,-0.8848192387676179,0.46590130831264603,-0.005557483176584623))
push(move(1.8047527467983742,18.593411461990623,20.214685682632883))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8848192387676179,0.46590130831264603,-0.005557483176584623,0.787763226835783,0.6142694472245694,0.04584915104662768))
push(move(1.5477009494608742,20.30044245910078,20.212482784799917))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.787763226835783,0.6142694472245694,0.04584915104662768,0.9973339483104614,-0.05067647718640938,0.05250609685970957))
push(move(3.8442647227432984,20.183749588211306,20.333388726213766))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub156 inherits .../COPOLYFF



DPDPoly_sub157 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.36311054677048993,-0.0011126978312858149,-0.9317454012376836))
push(move(4.332631578947368,20.218947368421052,18.774736842105263))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.36311054677048993,-0.0011126978312858149,-0.9317454012376836,-0.9953808995196124,0.0045586142122482,-0.09589621425265568))
push(move(3.6774901036914254,20.216939785592114,17.09363707191427))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9953808995196124,0.0045586142122482,-0.09589621425265568,-0.8890729538954956,0.04232442468591474,0.4558047012993002))
push(move(2.9394534571082827,20.225327801870673,18.64051635653188))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8890729538954956,0.04232442468591474,0.4558047012993002,-0.604567893964559,-0.4992567228092996,-0.6206773608864559))
push(move(1.2791538864270748,20.33111286908807,18.32320200056912))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.604567893964559,-0.4992567228092996,-0.6206773608864559,0.0895698310503133,-0.9583029728841184,0.27135338127076863))
push(move(1.4639833126569188,19.006873437562444,17.125730466531383))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0895698310503133,-0.9583029728841184,0.27135338127076863,-0.010276050779910173,-0.535160530547442,0.8446878768660937))
push(move(1.4482564477352513,18.521893343677593,18.835501189419276))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.010276050779910173,-0.535160530547442,0.8446878768660937,-0.01192012494591869,-0.911418765600252,0.4113073599304862))
push(move(1.4325899383099532,17.371955974518976,19.706255153762708))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01192012494591869,-0.911418765600252,0.4113073599304862,0.44508554629010144,-0.7567937218242311,-0.47870880406680455))
push(move(1.4125888674643952,15.794732166265439,20.066221365832988))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.44508554629010144,-0.7567937218242311,-0.47870880406680455,0.5578582869346552,0.11074455488144871,-0.8225143009470666))
push(move(2.261119206643588,15.963180169847416,18.81513600041275))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub157 inherits .../COPOLYFF



DPDPoly_sub158 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.004672758118973253,0.9407737191085516,-0.33900291262203874))
push(move(2.888421052631579,15.886315789473683,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.004672758118973253,0.9407737191085516,-0.33900291262203874,0.003537789388007922,0.0965148563163346,-0.9953252566656207))
push(move(2.8969626508270974,17.606009147642755,16.71084376578318))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.003537789388007922,0.0965148563163346,-0.9953252566656207,0.03249732244490558,-0.44496411592925483,-0.8949585798064671))
push(move(2.8933803571470333,16.021611170357723,15.935270550576371))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03249732244490558,-0.44496411592925483,-0.8949585798064671,-0.5127416299331036,0.5550426959306272,-0.6549989516232875))
push(move(2.9854339147344726,16.394631262697644,14.274393290995219))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5127416299331036,0.5550426959306272,-0.6549989516232875,-0.4431008491591642,0.8924937350063997,0.08435976795104233))
push(move(1.7473684322731424,17.26216881424094,14.471303972637072))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4431008491591642,0.8924937350063997,0.08435976795104233,0.615904866805426,0.641711755276986,-0.45701993193373985))
push(move(1.7316359409052795,18.920031154685482,14.513097654415937))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.615904866805426,0.641711755276986,-0.45701993193373985,-0.2341989450879136,-0.1560263516795908,-0.9595866983765798))
push(move(3.138924859928553,18.712032528404173,13.438727258074518))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2341989450879136,-0.1560263516795908,-0.9595866983765798,-0.597818183033492,-0.788111798078969,-0.14660564028463757))
push(move(1.3666733079967293,18.676888351071558,13.017731021521513))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.597818183033492,-0.788111798078969,-0.14660564028463757,0.05148023993195442,-0.9986540658950713,0.006312017727399168))
push(move(1.4777525260982012,16.522086568094146,13.031350499494593))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub158 inherits .../COPOLYFF



DPDPoly_sub159 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.0003688542388711493,0.3983962994077457,0.9172133081049164))
push(move(1.4442105263157894,14.442105263157893,12.997894736842104))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0003688542388711493,0.3983962994077457,0.9172133081049164,-8.613733536029183e-05,0.48746248939814596,0.8731439251407077))
push(move(1.44360884662663,15.091974334267235,14.49406465968873))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-8.613733536029183e-05,0.48746248939814596,0.8731439251407077,-0.0014269856921147223,0.38577569690079644,0.9225914997400201))
push(move(1.4439458457480538,15.939967344728151,15.680868720822788))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0014269856921147223,0.38577569690079644,0.9225914997400201,0.018257166853982605,0.9437167334211392,0.33025051539611633))
push(move(1.4388910137430615,16.367407773142794,17.544293221633023))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.018257166853982605,0.9437167334211392,0.33025051539611633,0.06720961714580748,0.8399163092824881,-0.5385382630458098))
push(move(1.4695301941262873,17.262427607665828,16.143659267984944))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.06720961714580748,0.8399163092824881,-0.5385382630458098,0.8400845161135692,0.5349049953920012,-0.09019230394503566))
push(move(1.6414396223113072,18.898650874704735,15.92130858828739))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8400845161135692,0.5349049953920012,-0.09019230394503566,0.8593079310898872,-0.5110449365803099,-0.020565805640543198))
push(move(4.034989559764258,18.895926385269092,15.868229014925765))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8593079310898872,-0.5110449365803099,-0.020565805640543198,0.7652575642615618,-0.5519690460418042,0.331226557739808))
push(move(4.433973301226771,17.237883942145782,15.85447491573836))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7652575642615618,-0.5519690460418042,0.331226557739808,0.8639321847638509,0.15357448776405055,0.4796207427094547))
push(move(5.958098885556116,17.50881586253192,16.700608741552866))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub159 inherits .../COPOLYFF



DPDPoly_sub160 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.923050708536629,0.37694579814274426,0.07674147986947465))
push(move(5.776842105263158,15.886315789473683,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.923050708536629,0.37694579814274426,0.07674147986947465,0.5659442801651314,0.6184602390982566,-0.5451733709590908))
push(move(7.406593849089205,16.551856768067342,17.466022187776126))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5659442801651314,0.6184602390982566,-0.5451733709590908,0.7081933831650019,0.4368990830085668,-0.5546001472300404))
push(move(7.129291287708801,17.36426348513644,16.027713820485832))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7081933831650019,0.4368990830085668,-0.5546001472300404,0.6638458352681076,-0.4610823621828303,0.5888223520562801))
push(move(8.80926718681673,17.41719483755752,16.367561148585523))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6638458352681076,-0.4610823621828303,0.5888223520562801,0.032132178336272375,-0.9468752167285664,0.3199919484308884))
push(move(8.68016574719707,16.287084385351818,17.403318664961635))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.032132178336272375,-0.9468752167285664,0.3199919484308884,0.6315295300881784,-0.6636940082764906,-0.40084999189783))
push(move(8.913693496449568,14.339946742798276,17.407502416717293))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6315295300881784,-0.6636940082764906,-0.40084999189783,-0.19525335446957204,0.14587677275425287,-0.9698433351522213))
push(move(10.376284521647586,14.50458045751349,16.326743200784502))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.19525335446957204,0.14587677275425287,-0.9698433351522213,-0.8363633432470405,0.5240893949100115,-0.1607067646849105))
push(move(8.611925037104411,14.565402582406678,15.908587686928806))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8363633432470405,0.5240893949100115,-0.1607067646849105,-0.3843713100200672,0.9229117205988644,-0.022195765693053073))
push(move(8.023141255236164,15.979127902218819,15.874587993076695))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub160 inherits .../COPOLYFF



DPDPoly_sub161 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.3829518338938643,-0.9220377878906774,0.05651734794726704))
push(move(5.776842105263158,15.886315789473683,15.886315789473683))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3829518338938643,-0.9220377878906774,0.05651734794726704,0.609034094525831,-0.5989867501070101,-0.5198964751768793))
push(move(6.4423008773905845,14.284082610575071,15.984526482412447))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.609034094525831,-0.5989867501070101,-0.5198964751768793,0.12040475037537533,0.0848581692958306,-0.9890913947612747))
push(move(7.230440831754111,14.456697341234943,14.645464314955461))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.12040475037537533,0.0848581692958306,-0.9890913947612747,-0.6297778860312536,-0.4504930158640964,-0.6328000133720577))
push(move(6.818651408318657,14.549324778915645,12.892911987184661))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6297778860312536,-0.4504930158640964,-0.6328000133720577,0.2975055657626213,-0.9489058387067002,-0.10520526416770526))
push(move(5.568029215909803,13.267540276434413,12.975075252288475))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2975055657626213,-0.9489058387067002,-0.10520526416770526,0.8536390938024899,-0.09207191155591657,-0.5126627162516338))
push(move(7.2943362419373114,13.032109076251713,12.724698164182264))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8536390938024899,-0.09207191155591657,-0.5126627162516338,0.9381927494518701,-0.0015545460811437662,-0.3461097344230903))
push(move(8.040371385503017,13.000878087193795,11.490281899489691))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9381927494518701,-0.0015545460811437662,-0.3461097344230903,0.7688029155462364,-0.2762840370893338,0.5767228172157108))
push(move(10.160346160595886,13.02736021788527,11.667395246012836))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7688029155462364,-0.2762840370893338,0.5767228172157108,0.045111235259261764,-0.48463429932685376,0.8735528446346867))
push(move(10.236266462697253,12.211741177481684,13.137547758685574))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub161 inherits .../COPOLYFF



DPDPoly_sub162 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.020087234905412983,0.9978390906520983,-0.062559189256642))
push(move(8.665263157894737,11.553684210526315,12.997894736842104))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.020087234905412983,0.9978390906520983,-0.062559189256642,-0.0025406727749151406,0.9135144124649446,0.40679843067627214))
push(move(8.709275796314385,13.740024505975677,12.860822860621004))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0025406727749151406,0.9135144124649446,0.40679843067627214,-0.07361112755101161,-0.6466235259060596,0.7592492460618477))
push(move(8.656991555619557,14.527789324399869,14.322297807534177))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07361112755101161,-0.6466235259060596,0.7592492460618477,0.3543255632932536,-0.9342600858370799,0.0401433333021875))
push(move(8.560147585145911,12.430034930676788,14.398980007008308))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3543255632932536,-0.9342600858370799,0.0401433333021875,0.8383450916949167,0.541701559589807,0.06113041443514587))
push(move(9.840078664837764,11.408310577403153,14.456335723707786))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8383450916949167,0.541701559589807,0.06113041443514587,0.07508614136094979,0.9441478232919501,-0.3208534854861264))
push(move(10.078898211816561,13.411384486182842,14.509724205491432))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07508614136094979,0.9441478232919501,-0.3208534854861264,-0.030230041402500026,0.8691077144334922,-0.4936982127869155))
push(move(10.07553654047899,14.369003945503508,13.450191597570333))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.030230041402500026,0.8691077144334922,-0.4936982127869155,-0.6461067425511716,0.5586674829591376,-0.5200353071802103))
push(move(9.989473884280622,15.9823162253992,13.049301770194544))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6461067425511716,0.5586674829591376,-0.5200353071802103,-0.8541011575225957,-0.16901175313109304,-0.49188031066725635))
push(move(8.541168763735023,15.69572185032288,12.215216994216354))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub162 inherits .../COPOLYFF



DPDPoly_sub163 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.37688408116461075,-0.019420392416828733,0.9260568220811742))
push(move(8.665263157894737,17.330526315789474,11.553684210526315))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.37688408116461075,-0.019420392416828733,0.9260568220811742,-0.4904462747986921,-0.0062922821051132815,0.8714487126170969))
push(move(8.07418884324364,17.300068953136847,13.00603634953993))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4904462747986921,-0.0062922821051132815,0.8714487126170969,0.5051425449531002,-0.24654669440802035,0.8270705754376609))
push(move(7.11220236592239,17.31060100055797,14.313237901368213))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5051425449531002,-0.24654669440802035,0.8270705754376609,0.23147116243773697,-0.9617695516452628,0.14635720169432354))
push(move(8.912279418148309,16.891019145470285,14.378243186957754))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.23147116243773697,-0.9617695516452628,0.14635720169432354,-0.6207123418160911,-0.40356265731596,-0.6722003944786592))
push(move(7.473653910565524,15.80875910210367,14.54178056761196))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6207123418160911,-0.40356265731596,-0.6722003944786592,-0.07119935145021146,0.34405121017859813,-0.9362475191570397))
push(move(7.249655918389555,15.810046990614365,12.577705164566606))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07119935145021146,0.34405121017859813,-0.9362475191570397,0.027916932325430098,0.49690631571021016,-0.8673550358975511))
push(move(7.252286890327095,16.878454115546596,11.630878722300286))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.027916932325430098,0.49690631571021016,-0.8673550358975511,0.6523992176105816,0.5056748065478593,-0.5645070866551506))
push(move(7.331933310232997,17.27454012225862,10.021417484959397))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6523992176105816,0.5056748065478593,-0.5645070866551506,0.8668254580567529,0.49322149046297015,0.07311762174870533))
push(move(8.954191957238717,18.19760118415491,10.158256675626735))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub163 inherits .../COPOLYFF



DPDPoly_sub164 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.03365334089435775,0.9316218515145397,-0.3618676255583929))
push(move(7.221052631578947,18.774736842105263,10.109473684210526))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03365334089435775,0.9316218515145397,-0.3618676255583929,0.5173401390363019,0.5917313878267945,-0.618233891987875))
push(move(7.1626313259566246,20.392007623113802,9.481281101074885))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5173401390363019,0.5917313878267945,-0.618233891987875,0.9446024343424207,-0.19793757583493382,-0.2618147381393235))
push(move(8.455972733824645,20.187233052660805,8.63371450084693))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9446024343424207,-0.19793757583493382,-0.2618147381393235,0.8792352512398881,-0.4762596212585024,0.011051974295966362))
push(move(10.14708808537233,19.766626918315847,8.654081491433283))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8792352512398881,-0.4762596212585024,0.011051974295966362,0.9676088234853822,-0.2523925083163154,0.00558448377499741))
push(move(11.128203536225206,18.73975283838154,8.667304403093652))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9676088234853822,-0.2523925083163154,0.00558448377499741,0.8523251041013995,0.5228295974786823,-0.013824938293441192))
push(move(13.02486831082342,19.0159824927427,8.670690390181386))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8523251041013995,0.5228295974786823,-0.013824938293441192,0.9748897927224573,-0.20210086958805218,-0.0935154027811305))
push(move(13.980045264310812,20.489117318663848,8.621046777073108))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9748897927224573,-0.20210086958805218,-0.0935154027811305,0.16133950225941945,-0.8600120583578874,-0.48409588357030314))
push(move(14.419352547346723,18.72689701976717,8.53692577799251))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.16133950225941945,-0.8600120583578874,-0.48409588357030314,0.01434119221891659,-0.47054281715822677,-0.8822606119659541))
push(move(14.440439964786504,18.03500664850373,7.239641875008255))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub164 inherits .../COPOLYFF



DPDPoly_sub165 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.41687317478215297,0.9087053075315866,0.021712213405665183))
push(move(14.442105263157893,17.330526315789474,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.41687317478215297,0.9087053075315866,0.021712213405665183,0.4488916756220736,0.8935657237952199,0.006046554021232036))
push(move(15.107722299972474,18.781446573378453,5.8115097692530915))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4488916756220736,0.8935657237952199,0.006046554021232036,0.8450382821953609,0.5152375745540053,0.14297042838300256))
push(move(15.828992862655339,20.091270809324943,5.795523429170795))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8450382821953609,0.5152375745540053,0.14297042838300256,0.8565349025847303,0.043028787688025934,0.5142922166281203))
push(move(17.39326574593219,20.174990376594984,6.1981965412510505))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8565349025847303,0.043028787688025934,0.5142922166281203,0.8381263709189355,0.02961669470439158,-0.5446714952749425))
push(move(18.475291101288274,20.224209939681128,7.384449441290882))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8381263709189355,0.02961669470439158,-0.5446714952749425,0.4008340371448622,-0.0024764072489409142,-0.9161473364439197))
push(move(18.667034728366907,20.220001282331467,5.370414860146229))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4008340371448622,-0.0024764072489409142,-0.9161473364439197,0.5018765606352472,-0.0028620972346860506,-0.8649345213854944))
push(move(19.795855847285367,20.216051310905545,4.366163161850641))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5018765606352472,-0.0028620972346860506,-0.8649345213854944,-0.1288680003881253,0.048004624255182746,-0.990499164323769))
push(move(20.228898472165486,20.21109429951397,2.6786974625417774))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1288680003881253,0.048004624255182746,-0.990499164323769,-0.5343096807637274,0.0971934693974946,-0.8396824367275059))
push(move(19.408586957957155,20.360312861189023,1.389555236742072))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub165 inherits .../COPOLYFF



DPDPoly_sub166 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.07230263076199835,0.3962097937648717,0.9153087615169494))
push(move(18.774736842105263,18.774736842105263,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07230263076199835,0.3962097937648717,0.9153087615169494,-0.5343345444077536,0.5852949757600351,0.6098494781522882))
push(move(18.89840148168969,19.45240431878448,3.0097320973642576))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5343345444077536,0.5852949757600351,0.6098494781522882,-0.641202110718526,0.14131274911267228,-0.7542483411637881))
push(move(17.449407948459186,20.22646469836886,2.956841784446517))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.641202110718526,0.14131274911267228,-0.7542483411637881,0.005476898532559393,-0.9806642245283871,-0.19562127264845483))
push(move(17.344045965636116,19.79496440615824,1.1813381323967338))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.005476898532559393,-0.9806642245283871,-0.19562127264845483,-0.5891919621116624,-0.4882118036748544,0.6438183490205561))
push(move(17.458115528524463,18.667331878677345,2.6458285560780546))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5891919621116624,-0.4882118036748544,0.6438183490205561,-0.7233780403955024,-0.6025387254377771,-0.33715173886750455))
push(move(15.753129059215503,18.476710827822377,2.9197554258873977))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7233780403955024,-0.6025387254377771,-0.33715173886750455,0.04475400414257401,-0.891393610439739,-0.4510149780000808))
push(move(15.914316187189186,17.38142211156407,1.9262951954729697))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.04475400414257401,-0.891393610439739,-0.4510149780000808,-0.011421816756518391,-0.6262485694515445,0.7795397817699072))
push(move(15.887762754549959,15.79512695459619,1.562964803401506))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.011421816756518391,-0.6262485694515445,0.7795397817699072,0.00034323646926554837,0.07996554029038798,0.9967975694968324))
push(move(15.888494698726088,15.965651699917764,3.6886135648348457))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub166 inherits .../COPOLYFF



DPDPoly_sub167 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.0753873661565292,0.9158971119304916,-0.39427049773140005))
push(move(15.886315789473683,15.886315789473683,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0753873661565292,0.9158971119304916,-0.39427049773140005,0.5476992753615741,0.5966080830228735,-0.5865869918777422))
push(move(15.754954437563603,17.48225273445086,5.089831691705008))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5476992753615741,0.5966080830228735,-0.5865869918777422,0.4551508683194384,-0.050104784565435316,-0.8890034857252882))
push(move(17.20430066276291,17.321994936916642,4.365277736015616))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4551508683194384,-0.050104784565435316,-0.8890034857252882,0.39602682327166194,0.00544218764419446,-0.9182228149218474))
push(move(17.178163440155263,17.325580331012983,2.3100110821316235))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.39602682327166194,0.00544218764419446,-0.9182228149218474,0.9325315559337581,0.0375670787084032,0.35912896260964633))
push(move(18.542591716916334,17.340385688783098,1.2623329183446919))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9325315559337581,0.0375670787084032,0.35912896260964633,0.7073165844600289,-0.3706222616038531,0.6019488255254294))
push(move(18.99314217136171,17.3986968367392,3.0089809183256118))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7073165844600289,-0.3706222616038531,0.6019488255254294,-0.21422013021835223,-0.976781704021771,0.0026904456057306636))
push(move(20.473226312785194,16.328764901186545,2.9053641338352936))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.21422013021835223,-0.976781704021771,0.0026904456057306636,-0.4873985883073109,-0.26592702056796064,0.8317003281518458))
push(move(18.666473672171005,15.909183162349713,3.0130836318627683))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4873985883073109,-0.26592702056796064,0.8317003281518458,0.5812729065529082,-0.02636923278090787,0.8132812992256002))
push(move(19.62454554721615,15.865720582193129,4.353558872501394))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub167 inherits .../COPOLYFF



DPDPoly_sub168 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.01122906402455912,0.3551044962035217,0.9347591694640793))
push(move(20.218947368421052,15.886315789473683,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.01122906402455912,0.3551044962035217,0.9347591694640793,-0.01537381701799445,0.9916260365199635,0.12822421552111374))
push(move(20.23881435010669,16.51458315949966,7.430661449387365))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01537381701799445,0.9916260365199635,0.12822421552111374,-0.13421148466267357,0.23176545471039536,-0.9634687599437383))
push(move(20.196091981621773,17.360510298122517,5.967465815649391))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13421148466267357,0.23176545471039536,-0.9634687599437383,-0.9601328327764542,0.06491369056763403,-0.2719028433127369))
push(move(19.776004003384102,17.313795318745434,4.108268347435814))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9601328327764542,0.06491369056763403,-0.2719028433127369,-0.3807598007243112,-0.5995760417487538,0.7039393044242377))
push(move(18.708979260267107,17.461052610329524,5.546325986388892))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3807598007243112,-0.5995760417487538,0.7039393044242377,-0.02368048626520532,-0.47564120657228565,0.8793205770256394))
push(move(18.78217369535034,15.748827480419793,5.9456372462066005))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02368048626520532,-0.47564120657228565,0.8793205770256394,0.4972776952038519,0.0822654644665619,0.8636823995016026))
push(move(18.633982721838343,15.954688102966545,8.331150533805507))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4972776952038519,0.0822654644665619,0.8636823995016026,0.40953069103230744,0.8680232382683,0.28074948072759587))
push(move(20.33376497494576,16.005509769831264,8.640473737630943))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.40953069103230744,0.8680232382683,0.28074948072759587,-0.5394637128878209,0.8351854323016519,0.10697754974007277))
push(move(19.36532975887954,17.504819112171774,8.832517843697268))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub168 inherits .../COPOLYFF



DPDPoly_sub169 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.015571553289525626,0.962995476409998,-0.26906735056864967))
push(move(18.774736842105263,17.330526315789474,7.221052631578947))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.015571553289525626,0.962995476409998,-0.26906735056864967,-0.026081237374696843,0.45344892224696026,-0.8909005802950601))
push(move(18.80051736897502,18.92487790637493,6.775580177281458))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.026081237374696843,0.45344892224696026,-0.8909005802950601,0.4953681946425515,-0.055107747321297106,-0.8669333814785027))
push(move(18.692218994000164,18.765183297428564,4.402352057469923))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4953681946425515,-0.055107747321297106,-0.8669333814785027,0.4794931086633193,0.03613076429215795,-0.8768015320561723))
push(move(20.372816031517193,18.749965914959112,4.023933602160933))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4794931086633193,0.03613076429215795,-0.8768015320561723,-0.04866588743612068,-0.5696084754519107,-0.8204741410266413))
push(move(20.201350772701854,18.87889939385814,1.6427523223892628))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.04866588743612068,-0.5696084754519107,-0.8204741410266413,-0.005954907688412558,-0.9986238158162564,-0.052105791990929476))
push(move(20.221314225400505,16.97671739619715,1.4697150152557654))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.005954907688412558,-0.9986238158162564,-0.052105791990929476,-0.03055314533598418,-0.9995125276079612,-0.0064196935147182695))
push(move(20.178046547625243,14.970836433296933,1.4388389843681655))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.03055314533598418,-0.9995125276079612,-0.0064196935147182695,-0.4986008609722101,-0.8668298534095301,0.0017851262654423096))
push(move(20.098478041490687,12.958266814062865,1.4439052125481582))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4986008609722101,-0.8668298534095301,0.0017851262654423096,-0.9144041202640527,-0.4048024726264105,0.00025099734688794473))
push(move(18.652116282084684,12.317969156227768,1.4443022284366542))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub169 inherits .../COPOLYFF



DPDPoly_sub170 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.4133265939951927,-0.9105820594498817,0.0011998768041814843))
push(move(18.774736842105263,10.109473684210526,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4133265939951927,-0.9105820594498817,0.0011998768041814843,-0.45611736702673283,-0.8899185146202148,-0.001408840924751559))
push(move(18.124141436743773,8.676174901385084,1.4460991885677261))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.45611736702673283,-0.8899185146202148,-0.001408840924751559,-0.8959061145427882,-0.4435623928544733,-0.02458937921254827))
push(move(17.35924766884476,7.347750247235686,1.4398384080409874))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8959061145427882,-0.4435623928544733,-0.02458937921254827,-0.9411643991211002,-0.042240867666413405,0.33529879648726324))
push(move(15.273142926240988,7.264647844235215,1.367849601505872))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9411643991211002,-0.042240867666413405,0.33529879648726324,-0.19748977393449946,-0.0140590933420019,0.9802041272539619))
push(move(14.422066060007408,7.2159251380762415,2.4862373787493643))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.19748977393449946,-0.0140590933420019,0.9802041272539619,0.8028856916506047,0.000770357617096751,0.5961325126948469))
push(move(14.65553888931037,7.220681249759875,4.433213513507127))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8028856916506047,0.000770357617096751,0.5961325126948469,0.9989706419339597,-0.0019281576808426227,-0.04532040116780112))
push(move(16.84069607671395,7.218245779825976,4.282039700465038))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9989706419339597,-0.0019281576808426227,-0.04532040116780112,0.6231511031862322,0.05169528065828886,-0.7803911202438445))
push(move(18.84341917682701,7.2125980356954535,4.243221529052465))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6231511031862322,0.05169528065828886,-0.7803911202438445,-0.05634290469529132,0.0695271127468249,-0.9959876794838316))
push(move(18.712975036423437,7.373566031684481,1.9373276919234994))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub170 inherits .../COPOLYFF



DPDPoly_sub171 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9997594742464694,0.019574347585244366,0.00989133818223434))
push(move(18.774736842105263,5.776842105263158,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9997594742464694,0.019574347585244366,0.00989133818223434,-0.999878737230032,-0.0005645452992947006,-0.015562523056431542))
push(move(16.684724561530565,5.8177625745272605,1.4648885181775506))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.999878737230032,-0.0005645452992947006,-0.015562523056431542,-0.7501591795505349,-0.015078343421468092,0.6610853567397575))
push(move(14.540373852693227,5.774451325629417,1.3783051627968281))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7501591795505349,-0.015078343421468092,0.6610853567397575,-0.05591035033275401,0.003057099349158649,0.9984311127309877))
push(move(14.502562262336108,5.773900693681719,3.387941093354145))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05591035033275401,0.003057099349158649,0.9984311127309877,0.5916451421683833,0.02929639109816437,0.8056660270963254))
push(move(14.308386068069256,5.787136091529931,5.521076949480054))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5916451421683833,0.02929639109816437,0.8056660270963254,0.6397374486496721,-0.4863222300853614,-0.5951694593307094))
push(move(16.037750828441403,5.849918362781842,5.478466620809162))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6397374486496721,-0.4863222300853614,-0.5951694593307094,0.5602149318196481,-0.6728970959329065,-0.4830825275782264))
push(move(15.69445005822532,4.733463632372639,4.231574580406301))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5602149318196481,-0.6728970959329065,-0.4830825275782264,0.7660019021109717,-0.6376438768863806,0.08155594540975909))
push(move(17.38268153548679,4.234467014381902,4.318710804828484))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7660019021109717,-0.6376438768863806,0.08155594540975909,0.4198250383425669,-0.9019509847098913,0.10115017726884921))
push(move(18.071407414694256,2.75481018543527,4.484648370264099))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub171 inherits .../COPOLYFF



DPDPoly_sub172 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9332136021205998,-0.3443909962529744,0.10250470485289197))
push(move(18.774736842105263,2.888421052631579,2.888421052631579))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9332136021205998,-0.3443909962529744,0.10250470485289197,-0.5696734993977818,-0.6262263857824629,-0.5322711882430979))
push(move(17.182507758645897,2.300828502469984,3.063312387142047))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5696734993977818,-0.6262263857824629,-0.5322711882430979,0.2760821475571372,0.39114231206715966,-0.8779443829258182))
push(move(17.35503182311463,1.327778432148838,1.5619277574165602))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.2760821475571372,0.39114231206715966,-0.8779443829258182,0.8423953106100869,0.5371824876712618,-0.04248665203861052))
push(move(17.67827954203265,3.0032184372317796,1.4867524527571698))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8423953106100869,0.5371824876712618,-0.04248665203861052,0.7998855056873805,-0.5987677364082094,-0.04074770702545948))
push(move(19.983636386800164,3.003998991356352,1.4293526990825713))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7998855056873805,-0.5987677364082094,-0.04074770702545948,-0.6183418070241888,-0.6483083550500369,0.44424057272875905))
push(move(19.940986470794773,1.3094311436043118,1.3714858072658953))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6183418070241888,-0.6483083550500369,0.44424057272875905,0.21739061653939232,0.08203737997852707,0.9726310647552245))
push(move(18.522299255096172,1.4718414350236078,2.479233585290526))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.21739061653939232,0.08203737997852707,0.9726310647552245,0.5276444269122975,0.0037529029816522727,0.8494570468644094))
push(move(20.29654591051194,1.4436097264951882,2.9623003600790114))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5276444269122975,0.0037529029816522727,0.8494570468644094,-0.0521068206051719,0.01825985876712191,0.9984745649260302))
push(move(20.182290976811185,1.4836482268026818,5.151661443572027))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub172 inherits .../COPOLYFF



DPDPoly_sub173 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.08230115480882333,0.9236665172719096,-0.37425483936472365))
push(move(20.218947368421052,1.4442105263157894,7.221052631578947))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08230115480882333,0.9236665172719096,-0.37425483936472365,-0.5580597893812917,0.5624921098433472,-0.6100589298089883))
push(move(20.364177533096633,3.0741298235640806,6.5606355076901215))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5580597893812917,0.5624921098433472,-0.6100589298089883,-0.7621496737349411,0.5737936408333704,-0.2998144969225271))
push(move(18.870592702810253,2.803274331141081,5.7470603820792086))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7621496737349411,0.5737936408333704,-0.2998144969225271,-0.97933981933661,0.2009851818026005,0.022326552745815367))
push(move(18.343918500724037,4.5951063791674125,5.765905855080401))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.97933981933661,0.2009851818026005,0.022326552745815367,-0.7938975631565672,-0.6079825162626366,0.009160738672024374))
push(move(17.398829268265146,3.105317233535104,5.7806129889496125))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7938975631565672,-0.6079825162626366,0.009160738672024374,-0.8071443153338083,-0.5880766420516518,-0.0518065372088441))
push(move(15.80689402143567,2.6522026617095333,5.795180435754112))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8071443153338083,-0.5880766420516518,-0.0518065372088441,-0.5302772279342834,-0.5371036624356098,0.6559921625542384))
push(move(14.955398335358664,1.3250598113980054,5.623781437096945))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5302772279342834,-0.5371036624356098,0.6559921625542384,0.5290516388911405,0.38869093079080086,0.754336611671195))
push(move(14.585295100281527,1.4148776927772584,7.306388679003702))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5290516388911405,0.38869093079080086,0.754336611671195,0.895895140170406,0.4326124428915126,-0.10108596378571373))
push(move(16.021811508317306,2.108546901001665,7.144303141211112))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub173 inherits .../COPOLYFF



DPDPoly_sub174 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3841056128130066,0.05492344902041857,-0.9216541070017787))
push(move(15.886315789473683,4.332631578947368,7.221052631578947))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3841056128130066,0.05492344902041857,-0.9216541070017787,-0.5842375605660207,-0.5464624544334497,-0.6000377144133819))
push(move(15.220114492716291,4.427892027478237,5.622515300271382))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5842375605660207,-0.5464624544334497,-0.6000377144133819,-0.905315509500908,-0.41287612254979367,0.09968518287769211))
push(move(14.494171642021177,3.0304994342680285,5.791259258550902))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.905315509500908,-0.41287612254979367,0.09968518287769211,-0.6185647582276915,0.6163044469687932,-0.48738739060957215))
push(move(12.840569269386235,3.342682070363931,5.884529369691406))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6185647582276915,0.6163044469687932,-0.48738739060957215,-0.06788267024458165,-0.31678542729631354,-0.9460649745832246))
push(move(12.981941160059952,4.537204041146716,4.5997234350178795))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.06788267024458165,-0.31678542729631354,-0.9460649745832246,-0.5093326702711978,-0.8597995097066489,-0.036401017878867986))
push(move(12.73035462322159,2.828347651081629,4.348493500053879))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5093326702711978,-0.8597995097066489,-0.036401017878867986,-0.5157480326685702,-0.5457945013804356,-0.6603880140200769))
push(move(11.449738929405749,1.9507084095461247,4.490219913945124))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5157480326685702,-0.5457945013804356,-0.6603880140200769,0.024372909869313515,0.45324755212283324,-0.8910514114006901))
push(move(11.549967137579296,1.5791931059282809,2.8370699016270917))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.024372909869313515,0.45324755212283324,-0.8910514114006901,-0.0198450222944202,0.906399832071721,-0.42195440453974387))
push(move(11.515185964037512,3.167785418389156,2.0975358686951404))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub174 inherits .../COPOLYFF



DPDPoly_sub175 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9376277184094386,-0.05827523396225691,0.3427218387803074))
push(move(11.553684210526315,1.4442105263157894,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9376277184094386,-0.05827523396225691,0.3427218387803074,-0.5803424097230769,0.5281437759931648,0.6198926030825777))
push(move(9.967216539178908,1.3456087327615638,2.0240964520561673))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5803424097230769,0.5281437759931648,0.6198926030825777,-0.18096041027811183,0.8953475637908204,-0.4069472569336475))
push(move(10.094090775469011,2.772521494617828,3.0032748971785947))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.18096041027811183,0.8953475637908204,-0.4069472569336475,-0.5955821281506058,-0.4634760855860688,-0.6561035335352267))
push(move(9.642419056964302,2.9526267207253913,1.2936856166527038))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5955821281506058,-0.4634760855860688,-0.6561035335352267,-0.8485216383706142,-0.5087916240931726,0.14540327530520236))
push(move(8.72859098723951,1.7099031472835733,1.4990168045441743))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8485216383706142,-0.5087916240931726,0.14540327530520236,-0.6839570894585032,0.3455139794311836,0.6425128713084903))
push(move(7.07410898963047,1.4126133713393911,1.7337930681335745))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6839570894585032,0.3455139794311836,0.6425128713084903,0.08678330747120963,0.4676886707483826,0.8796226263563077))
push(move(7.292038143929883,2.4356052376706416,2.8485220679109116))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08678330747120963,0.4676886707483826,0.8796226263563077,0.8574655654335317,0.3478104955163601,0.37918420761473903))
push(move(7.3421829109625705,2.8573052087841653,4.450950245140277))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8574655654335317,0.3478104955163601,0.37918420761473903,0.838330769539782,0.11029162299834931,-0.5338888261981392))
push(move(8.806651679664396,3.049972164595876,3.5183070208491403))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub175 inherits .../COPOLYFF



DPDPoly_sub176 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.2989755411900174,0.04622242066019882,0.9531406578246717))
push(move(8.665263157894737,1.4442105263157894,2.888421052631579))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2989755411900174,0.04622242066019882,0.9531406578246717,-0.8873946497977445,-0.027026954505130506,0.46021764333901405))
push(move(8.16984735750407,1.5208031379930522,4.467817614643264))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8873946497977445,-0.027026954505130506,0.46021764333901405,-0.8417343058830465,0.5349496982001358,0.0728846945192838))
push(move(5.863566039859464,1.3588805769369499,4.341427835246033))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8417343058830465,0.5349496982001358,0.0728846945192838,0.016974905417172056,0.49614325849091007,0.8680747200789227))
push(move(5.777153904842111,3.0414381310555774,4.674997873493006))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.016974905417172056,0.49614325849091007,0.8680747200789227,-0.5537183200987272,-0.0569367135864404,0.8307552182400175))
push(move(5.91527744919742,2.8703038514452577,6.9858824629886085))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5537183200987272,-0.0569367135864404,0.8307552182400175,-0.872664598449364,0.005354655933045125,-0.48829071901178794))
push(move(4.2677961270125815,2.886236707558476,6.9395190291222235))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.872664598449364,0.005354655933045125,-0.48829071901178794,-0.9492306968968957,-0.004381263139607761,0.3145502958223618))
push(move(3.358472284517768,2.8859923667912675,5.555247790225586))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9492306968968957,-0.004381263139607761,0.3145502958223618,-0.11679459880874456,0.03859672058247136,0.9924058216523031))
push(move(2.9116770946789177,2.879977413217588,7.388901507149293))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11679459880874456,0.03859672058247136,0.9924058216523031,-0.010470994169158778,0.07456260806295276,0.9971613589384419))
push(move(2.8890472425812654,3.041121690945267,9.543960874552582))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub176 inherits .../COPOLYFF



DPDPoly_sub177 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.3490424789933037,0.017770297051377733,-0.9369383994697383))
push(move(2.888421052631579,1.4442105263157894,10.109473684210526))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3490424789933037,0.017770297051377733,-0.9369383994697383,-0.99075370415026,0.012348106974761049,-0.13510966644425826))
push(move(2.2612790499527127,1.4761393039051016,8.426029806763575))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.99075370415026,0.012348106974761049,-0.13510966644425826,-0.2538017216743197,0.11695167742267096,0.9601598779490708))
push(move(1.412610035687594,1.462604070781399,9.908216466196812))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.2538017216743197,0.11695167742267096,0.9601598779490708,0.01012849509726962,0.49779863166407745,0.8672334956056741))
push(move(1.4331240915957653,1.8577525999332158,11.55903126354361))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.01012849509726962,0.49779863166407745,0.8672334956056741,0.007383570854097935,-0.31488511628915766,0.9491010728162761))
push(move(1.4457050666732472,3.089169614953857,12.741916747752287))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.007383570854097935,-0.31488511628915766,0.9491010728162761,-0.003995521081377195,-0.5143904306277439,0.8575468037896778))
push(move(1.445704589111035,1.3212355810882566,13.17615716701863))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.003995521081377195,-0.5143904306277439,0.8575468037896778,-0.007628450060298407,0.028671575259582558,0.9995597768627004))
push(move(1.4331287508371808,1.470072534280999,15.441134003527807))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.007628450060298407,0.028671575259582558,0.9995597768627004,0.22642081334732322,-0.006645204459671437,0.974006907850671))
push(move(1.4126234074296813,1.4455714006525984,17.51080159916358))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.22642081334732322,-0.006645204459671437,0.974006907850671,0.49436330927106287,0.00011822581984538609,0.8692553735636145))
push(move(2.2610380616262624,1.4457742970168312,19.002597174077746))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub177 inherits .../COPOLYFF



DPDPoly_sub178 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.005297712782567578,-0.045869363805948624,-0.998933399032844))
push(move(2.888421052631579,1.4442105263157894,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.005297712782567578,-0.045869363805948624,-0.998933399032844,-0.0007012595078536709,0.39615776954414855,-0.918182187730141))
push(move(2.900063719930496,1.3434044305676494,15.13519227333518))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0007012595078536709,0.39615776954414855,-0.918182187730141,-0.012368838124945158,0.9968384157233428,-0.07848684464045666))
push(move(2.8862130441022487,2.6915657839879605,14.439507970537775))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.012368838124945158,0.9968384157233428,-0.07848684464045666,0.08686100615809757,0.28590514586811505,0.9543130582651244))
push(move(2.860258520997663,4.5514140302513235,14.882607153135172))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.08686100615809757,0.28590514586811505,0.9543130582651244,-0.6397639683920746,-0.7020399891189011,0.3127969284138796))
push(move(3.0211360320912273,3.1356681294263655,15.921862078475165))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6397639683920746,-0.7020399891189011,0.3127969284138796,-0.6433490276574791,0.3095322136970084,-0.7002084241824043))
push(move(1.313018461850848,2.8535622474793474,15.639092297549299))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6433490276574791,0.3095322136970084,-0.7002084241824043,0.06594871271645678,0.9545856073030822,0.2905461850048081))
push(move(1.4610767104614892,3.886253883913271,14.223924206078149))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.06594871271645678,0.9545856073030822,0.2905461850048081,0.24307221798006765,0.09241015694204209,0.9655963233878833))
push(move(1.4142197606713764,4.318417273684401,16.08494863164115))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.24307221798006765,0.09241015694204209,0.9655963233878833,0.5395195241630824,-0.08178475922600585,0.8379916086722977))
push(move(2.260417286450799,4.190143767714684,17.399278130619713))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub178 inherits .../COPOLYFF



DPDPoly_sub179 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.0039397603637107296,-0.024130383388958898,-0.9997010567593586))
push(move(2.888421052631579,5.776842105263158,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0039397603637107296,-0.024130383388958898,-0.9997010567593586,0.0012890531429211748,0.006270962913538245,-0.9999795064730737))
push(move(2.8968070859692157,5.725479032165185,15.202598316189357))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0012890531429211748,0.006270962913538245,-0.9999795064730737,0.0250474025827174,0.13652486921182605,-0.9903199420947522))
push(move(2.893774761964491,5.802886735665653,13.1774007088855))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0250474025827174,0.13652486921182605,-0.9903199420947522,-0.4929972161099693,0.5691793662209372,-0.6580186881663409))
push(move(2.9923367756027757,6.246178866808605,11.425561699565732))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4929972161099693,0.5691793662209372,-0.6580186881663409,-0.4958836487031999,0.8583971044922071,0.13135378924186414))
push(move(1.7145965138961567,7.164281700921071,11.603514896647708))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4958836487031999,0.8583971044922071,0.13135378924186414,-0.1770745361216106,0.35513229366966215,0.9178919667641946))
push(move(1.481036885422775,8.86230757591708,11.825887396480923))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1770745361216106,0.35513229366966215,0.9178919667641946,-0.019828649699553797,-0.9408273440035365,0.3383056804523734))
push(move(1.425630464095009,7.74381830909869,13.101413022428455))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.019828649699553797,-0.9408273440035365,0.3383056804523734,0.23894143402276596,-0.9706617463977146,-0.0268842925754602))
push(move(1.4120336307539514,5.588249594090423,13.003183550171613))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.23894143402276596,-0.9706617463977146,-0.0268842925754602,0.5630051255168723,-0.8264494247539176,0.002564559542992047))
push(move(2.2641727284428033,4.337373118589902,13.00706515152103))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub179 inherits .../COPOLYFF



DPDPoly_sub180 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.07245376480538779,-0.917934893233124,-0.3900589490713149))
push(move(2.888421052631579,2.888421052631579,12.997894736842104))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07245376480538779,-0.917934893233124,-0.3900589490713149,0.554100316659966,-0.594447219887503,-0.5827566746467553))
push(move(2.7651887870368728,1.3271606148145405,12.334466850952953))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.554100316659966,-0.594447219887503,-0.5827566746467553,0.5320478871790272,0.16893483916451138,-0.8296903433599755))
push(move(4.212275994457909,1.4681694013661855,11.605574103885631))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5320478871790272,0.16893483916451138,-0.8296903433599755,0.03932347478137828,0.8579760175115897,-0.5121824066737072))
push(move(4.29316988268937,1.8123222832671613,9.951690430918246))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03932347478137828,0.8579760175115897,-0.5121824066737072,-0.006555155403661975,0.9997005271524184,-0.023577233697157276))
push(move(4.328218115725525,3.9978430891589483,10.095445229572023))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.006555155403661975,0.9997005271524184,-0.023577233697157276,0.3817060347390139,0.673704432967231,-0.6327897281436548))
push(move(4.266475863330974,5.883320387979997,9.855678804347537))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3817060347390139,0.673704432967231,-0.6327897281436548,0.9541810389810693,-0.0705613254043763,0.29079141013136006))
push(move(5.323460205398479,5.754427860334191,8.445539506200701))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9541810389810693,-0.0705613254043763,0.29079141013136006,0.3579353881363747,0.006221514247732529,0.9337256292295548))
push(move(5.723139777699958,5.775600644799645,10.299604366103777))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3579353881363747,0.006221514247732529,0.9337256292295548,0.5106146290587504,0.0005970079877598257,0.8598094813228435))
push(move(6.600592964434308,5.776626558534884,11.777122882880022))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub180 inherits .../COPOLYFF



DPDPoly_sub181 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.061710469843034035,0.01607439311685923,-0.9979646445629609))
push(move(7.221052631578947,5.776842105263158,10.109473684210526))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.061710469843034035,0.01607439311685923,-0.9979646445629609,-0.40870239093490485,-0.025562085859494658,-0.9123096707865176))
push(move(7.356340848924878,5.812082089583956,7.921630064147251))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.40870239093490485,-0.025562085859494658,-0.9123096707865176,-0.5416638993245845,0.7844940318162535,-0.3019426008584502))
push(move(5.918253374789797,5.695359179793719,7.201351815034739))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5416638993245845,0.7844940318162535,-0.3019426008584502,0.6127148953857657,0.6127881184127092,-0.49907031458965956))
push(move(6.258122177629737,7.4026366647264,7.309444163747305))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6127148953857657,0.6127881184127092,-0.49907031458965956,0.48530422209711604,0.6528305749565013,-0.5816287926303829))
push(move(7.293698763430683,7.070968942233105,6.081020045757745))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.48530422209711604,0.6528305749565013,-0.5816287926303829,-0.4593636130882281,0.6564551138411854,0.5983742595418732))
push(move(7.296984702943778,8.800113111089999,6.064385232060448))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4593636130882281,0.6564551138411854,0.5983742595418732,-0.957155353944699,-0.1665558391628438,-0.23688136451768196))
push(move(6.226063557674224,8.596676618171955,7.471738438558822))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.957155353944699,-0.1665558391628438,-0.23688136451768196,-0.4583950940292114,-0.5954498049205235,-0.6597828942842191))
push(move(5.824265984024463,8.543843425014977,5.69990979110868))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4583950940292114,-0.5954498049205235,-0.6597828942842191,-0.46181129486861666,-0.8849136346872166,0.060482948641999705))
push(move(5.064215430782502,7.087449644506166,5.7994528275996675))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub181 inherits .../COPOLYFF



DPDPoly_sub182 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9360124071204459,0.005528770324406897,0.3519235803626813))
push(move(2.888421052631579,7.221052631578947,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9360124071204459,0.005528770324406897,0.3519235803626813,-0.13159778076535955,-0.010830974261052728,0.9912440234847263))
push(move(1.2236314320254333,7.230886090388648,6.402772615775027))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.13159778076535955,-0.010830974261052728,0.9912440234847263,0.9613251958363498,-0.10212921118797896,0.25578016356301925))
push(move(2.6922724193255645,7.204908888224596,7.254307449651882))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9613251958363498,-0.10212921118797896,0.25578016356301925,0.5159596756872985,-0.8549236267195968,-0.05376993157210837))
push(move(4.447502079954272,6.888388704830576,7.260549115553392))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5159596756872985,-0.8549236267195968,-0.05376993157210837,-0.036190550503350905,-0.8733812658273473,0.4856906510898525))
push(move(4.319482505500981,4.508689757427819,7.084730292540628))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.036190550503350905,-0.8733812658273473,0.4856906510898525,-0.005161312671621261,-0.8485772648967896,0.5290462988735385))
push(move(4.3343078494812595,4.156688884853583,8.77965779816273))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.005161312671621261,-0.8485772648967896,0.5290462988735385,-0.028412089861334706,-0.8526560984636524,-0.5216994641577216))
push(move(4.302861539104617,1.776017838108129,8.788417186777146))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.028412089861334706,-0.8526560984636524,-0.5216994641577216,-0.8576053054364026,-0.10791300044301363,-0.5028597462739692))
push(move(4.244379595328978,1.4579125997806077,7.1284057349440015))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8576053054364026,-0.10791300044301363,-0.5028597462739692,-0.993030232028209,0.008808260960827952,0.11753030595062465))
push(move(1.9374396151718027,1.4783753497662642,7.401444110748353))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub182 inherits .../COPOLYFF



DPDPoly_sub183 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.00475787156335999,0.9416699904161253,0.3365040739840765))
push(move(1.4442105263157894,1.4442105263157894,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.00475787156335999,0.9416699904161253,0.3365040739840765,0.0001467650514321384,0.47251764788624434,0.8813211962139973))
push(move(1.4361910549522396,3.031410899737241,6.344025298230098))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0001467650514321384,0.47251764788624434,0.8813211962139973,0.002088037661019307,0.07489798503933454,0.9971890151499734))
push(move(1.4446634195137336,2.9023235208471116,8.49645669384862))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.002088037661019307,0.07489798503933454,0.9971890151499734,-0.0007228969499449094,0.9433503760488571,0.331797446386315))
push(move(1.4445071584100078,3.3297098260417677,10.315566220001049))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0007228969499449094,0.9433503760488571,0.331797446386315,-0.0014265819892874331,0.2642634653942649,-0.9644494728712553))
push(move(1.443522163010028,4.391615669639538,9.020274083907012))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0014265819892874331,0.2642634653942649,-0.9644494728712553,0.011425574293901812,0.2615308817907294,-0.9651274807619034))
push(move(1.439409349807233,4.274040104569173,6.869161557202408))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.011425574293901812,0.2615308817907294,-0.9651274807619034,0.07880590457496241,0.9533145163069846,0.2915151152213239))
push(move(1.4846330082288897,5.332641067985568,5.547607812833919))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07880590457496241,0.9533145163069846,0.2915151152213239,0.8244817454696444,0.2354152954027944,0.5145964341867747))
push(move(1.5618032735899643,5.75463860640934,7.32191543378501))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8244817454696444,0.2354152954027944,0.5145964341867747,0.8851335899895124,0.01697397287093681,-0.465027324054463))
push(move(3.063422393344478,5.783434759317169,6.533001840508391))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub183 inherits .../COPOLYFF



DPDPoly_sub184 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9401631767520109,0.08313852429337111,-0.33042576603208107))
push(move(2.888421052631579,5.776842105263157,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9401631767520109,0.08313852429337111,-0.33042576603208107,0.5722383045336595,-0.5340552833346016,-0.6223570335160045))
push(move(4.482017219178334,5.917763635570249,3.772553023333088))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5722383045336595,-0.5340552833346016,-0.6223570335160045,-0.07204264095209856,-0.9388458660570533,0.33671693998405905))
push(move(4.3247899927598885,4.436315937728134,2.770460180195434))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07204264095209856,-0.9388458660570533,0.33671693998405905,-0.009140393990796808,-0.8580397852126114,0.513501879441535))
push(move(4.337745275905482,4.037639368335305,4.4468593316857845))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.009140393990796808,-0.8580397852126114,0.513501879441535,-0.0934016632942209,-0.837470156681924,-0.5384420729855967))
push(move(4.294921700680209,1.6324780565033565,4.448443003919087))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0934016632942209,-0.837470156681924,-0.5384420729855967,-0.6184825675595123,0.35074293748848306,-0.7031775774489283))
push(move(4.04424164687553,1.40598890814873,2.7548690943613754))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6184825675595123,0.35074293748848306,-0.7031775774489283,-0.8936135302033928,0.4475150808137114,0.0344254423606618))
push(move(2.9380710132182553,2.401951313820153,2.9057851677665707))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8936135302033928,0.4475150808137114,0.0344254423606618,-0.7102322875517705,-0.5862840532027064,0.3896679441257462))
push(move(1.3552039633752038,2.7526391943959228,2.8584612051006992))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7102322875517705,-0.5862840532027064,0.3896679441257462,0.07161617678036813,-0.8758118646981937,0.47730985834909784))
push(move(1.482155384585976,1.2001189966523989,3.7045712265999353))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub184 inherits .../COPOLYFF



DPDPoly_sub185 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.012400084085510552,0.9999102786983587,0.005066800572634974))
push(move(1.4442105263157894,2.8884210526315783,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.012400084085510552,0.9999102786983587,0.005066800572634974,-0.014362724290314753,0.9998968380147268,0.00015962177622949903))
push(move(1.4696875764401436,4.942823596564503,4.34304176094847))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.014362724290314753,0.9998968380147268,0.00015962177622949903,0.6851357950346998,0.7284043009691681,0.004014559974345708))
push(move(1.3834205818102674,7.120464505220204,4.3333071749361745))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6851357950346998,0.7284043009691681,0.004014559974345708,0.9194782526979769,0.3917685436555254,-0.03281997893820079))
push(move(3.4841043337743214,7.084457183103747,4.354845255882252))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9194782526979769,0.3917685436555254,-0.03281997893820079,0.34799029006456716,0.6195781803854922,0.7035805827415796))
push(move(4.384395955585351,8.399111116252277,4.226189961155035))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.34799029006456716,0.6195781803854922,0.7035805827415796,-0.040819191684078826,0.06435084532114066,0.9970921533623224))
push(move(4.3530570321348625,8.631581189326432,6.111728316538746))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.040819191684078826,0.06435084532114066,0.9970921533623224,0.540680647230881,0.0010362084398854987,0.8412272962654413))
push(move(4.2177705816593205,8.661793526699748,8.296355146653053))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.540680647230881,0.0010362084398854987,0.8412272962654413,0.9558691549045695,0.24621038385333582,0.16029536981715153))
push(move(5.977424769519043,8.634694272007634,8.639028834615178))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9558691549045695,0.24621038385333582,0.16029536981715153,0.8501013575573086,0.5142862563477579,0.11330193471882609))
push(move(7.360142754444679,9.471197883877448,8.82331818019716))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub185 inherits .../COPOLYFF



DPDPoly_sub186 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9272994974543202,0.36516914742473455,0.08226260262146849))
push(move(7.221052631578947,10.109473684210526,7.221052631578947))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9272994974543202,0.36516914742473455,0.08226260262146849,0.5925477093033981,0.6187680701378736,-0.5157647599217569))
push(move(8.815780972330003,10.737475306302219,7.362524188658983))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5925477093033981,0.6187680701378736,-0.5157647599217569,-0.045538781297405476,0.3705525065214194,-0.9276944859751192))
push(move(8.65657644351999,11.608519726926582,5.971545490460898))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.045538781297405476,0.3705525065214194,-0.9276944859751192,0.02676192348880949,0.9462851895674285,-0.3222237412986745))
push(move(8.656362786970256,12.034673133893541,4.114932415033208))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.02676192348880949,0.9462851895674285,-0.3222237412986745,0.07518049976140496,0.839656868707127,0.5378886829898618))
push(move(8.694012911097232,12.932250244012875,5.520796176840387))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07518049976140496,0.839656868707127,0.5378886829898618,0.8461443276130457,0.5270197718041699,0.07930912290365834))
push(move(8.884618106005874,14.583953160701544,5.748014841076461))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8461443276130457,0.5270197718041699,0.07930912290365834,0.9991955502413026,-0.03416352907832409,-0.021002515537308673))
push(move(11.070059776973546,14.412167601117476,5.743503091915062))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9991955502413026,-0.03416352907832409,-0.021002515537308673,0.6110150663187299,0.016851271487654047,-0.7914395892175015))
push(move(13.088358153789791,14.44022294160129,5.659654644068912))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6110150663187299,0.016851271487654047,-0.7914395892175015,-0.4672167191864207,0.003363381565899268,-0.8841364289390634))
push(move(12.294532334247645,14.4459375040695,4.15746027373094))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub186 inherits .../COPOLYFF



DPDPoly_sub187 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.36195249701619153,-0.0823593937375063,-0.9285511941551388))
push(move(10.109473684210526,14.442105263157893,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.36195249701619153,-0.0823593937375063,-0.9285511941551388,0.6215403159911013,0.5347241705729567,-0.5725012637564614))
push(move(10.730759650920884,14.30073661401829,2.738787549533403))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6215403159911013,0.5347241705729567,-0.5725012637564614,-0.3622306747103772,0.9289806026348786,0.076052470222885))
push(move(11.668247060844674,15.783150694141385,2.8968442211957384))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3622306747103772,0.9289806026348786,0.076052470222885,-0.5184710476826058,0.8550750457542653,-0.00586846174412956))
push(move(9.99403034657426,16.190160345671945,2.893468219595229))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5184710476826058,0.8550750457542653,-0.00586846174412956,0.5918401439117281,0.8055941865259602,-0.027262624417345237))
push(move(9.993936526584923,18.544464297066867,2.877893062086635))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5918401439117281,0.8055941865259602,-0.027262624417345237,0.6494163228180543,-0.6161565125470001,0.4456563605552993))
push(move(11.688210661659342,18.496225297161317,2.8154272112240344))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6494163228180543,-0.6161565125470001,0.4456563605552993,-0.07670163991117154,0.23263141802935663,0.9695357042319729))
push(move(11.528272898519564,17.088708852080718,3.9308181878623687))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07670163991117154,0.23263141802935663,0.9695357042319729,-0.05833214851132263,0.38410249570785965,0.9214459469990883))
push(move(11.56063972147173,18.883140215141577,4.427968761542523))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05833214851132263,0.38410249570785965,0.9214459469990883,-0.08890371105236765,-0.5237543327642521,0.8472175216978166))
push(move(11.399726092208304,17.935157172252666,5.9614125804586795))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub187 inherits .../COPOLYFF



DPDPoly_sub188 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.03327186129657074,-0.36622493796871836,0.9299313297527244))
push(move(12.997894736842104,17.330526315789474,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03327186129657074,-0.36622493796871836,0.9299313297527244,-0.5135349586963628,-0.6202822976581192,0.5929011025531067))
push(move(13.055003525697048,16.701927198071164,7.373003242359472))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5135349586963628,-0.6202822976581192,0.5929011025531067,-0.923196901628012,-0.37625045713664884,-0.07837776680220826))
push(move(11.759345904784483,15.834523166830099,7.206807009613548))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.923196901628012,-0.37625045713664884,-0.07837776680220826,-0.6460122428417615,-0.6104489484473204,0.4582796781858405))
push(move(10.005679389868014,15.459169994228445,7.114121073668383))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6460122428417615,-0.6104489484473204,0.4582796781858405,-0.11124440922334147,0.37574164877218774,0.9200233120929641))
push(move(10.084702372915338,14.252069592023728,8.39479548408117))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.11124440922334147,0.37574164877218774,0.9200233120929641,-0.8922622853551658,0.40186178849224763,0.20585217288770347))
push(move(9.822960623953858,16.0763250570808,8.625257906265352))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8922622853551658,0.40186178849224763,0.20585217288770347,-0.8612023074479329,-0.5059322432929958,0.048612249926053695))
push(move(8.713926371525735,14.869446908741095,8.711044666703572))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8612023074479329,-0.5059322432929958,0.048612249926053695,-0.5616177560049661,-0.49430073568678795,0.6635150931512007))
push(move(7.13028944794093,14.494456131801623,8.777251001319774))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5616177560049661,-0.49430073568678795,0.6635150931512007,0.0866706831508076,-0.4756730450252831,0.8753418457485893))
push(move(7.2902706451811214,13.616434400905376,10.39300192638899))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub188 inherits .../COPOLYFF



DPDPoly_sub189 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9968872821087247,-0.008195497319373192,0.07841288537968814))
push(move(7.221052631578947,12.997894736842104,8.665263157894737))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9968872821087247,-0.008195497319373192,0.07841288537968814,0.9142194810327925,0.0052896570543061955,-0.40518484674081734))
push(move(9.40905555527551,12.97990697391468,8.837366489480353))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9142194810327925,0.0052896570543061955,-0.40518484674081734,-0.4930224042507551,0.19549041090240207,-0.8477690771383533))
push(move(10.214125838405094,13.015212603209005,7.338724034902237))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4930224042507551,0.19549041090240207,-0.8477690771383533,-0.46894134493182815,0.8823812220974198,-0.03869617427333395))
push(move(8.491769794712276,13.343623853109941,7.260061896423101))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.46894134493182815,0.8823812220974198,-0.03869617427333395,-0.530122850567848,0.8479119530674453,0.0038837032803136625))
push(move(8.814434164518284,15.648935696964733,7.223224061340442))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.530122850567848,0.8479119530674453,0.0038837032803136625,-0.6979765911674568,-0.6014069918572806,-0.3887651068800202))
push(move(7.086419477252049,15.591429868536824,7.270357554556049))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6979765911674568,-0.6014069918572806,-0.3887651068800202,0.07651277374640901,-0.36648585662583333,-0.9272722967644725))
push(move(7.2867102771763275,14.332582341993255,6.372299047720376))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.07651277374640901,-0.36648585662583333,-0.9272722967644725,0.6072768177576268,0.33486260140224866,-0.7204733893741593))
push(move(7.334016108645314,14.40547543098658,4.269688701220235))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6072768177576268,0.33486260140224866,-0.7204733893741593,0.8841529904562966,0.461947122414607,0.06984515416299096))
push(move(8.951284638529705,15.250456505094846,4.397447551794764))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub189 inherits .../COPOLYFF



DPDPoly_sub190 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.019545392317003887,0.35038291471282357,0.9364025794050979))
push(move(7.221052631578947,15.886315789473683,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.019545392317003887,0.35038291471282357,0.9364025794050979,0.002286941724940167,0.9932560573696672,0.11591882675394488))
push(move(7.256618453179472,16.52389092915032,6.036558854759591))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.002286941724940167,0.9932560573696672,0.11591882675394488,0.0157533885228982,0.2224712828922124,-0.9748119608613447))
push(move(7.224452890072417,17.36310346116232,4.504981390455364))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0157533885228982,0.2224712828922124,-0.9748119608613447,-0.342200008789862,-0.04991700271360117,-0.9383002967197169))
push(move(7.316477904688349,17.369233437592055,2.3324853332669813))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.342200008789862,-0.04991700271360117,-0.9383002967197169,-0.5569327720807509,0.7048854834521312,-0.4392747916747621))
push(move(6.085112400940647,17.196906907021873,1.3809501468629526))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5569327720807509,0.7048854834521312,-0.4392747916747621,0.5047869953220147,0.7184185075917725,0.4786072892292625))
push(move(6.100451591090534,18.908304828109234,1.3733575312146744))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5047869953220147,0.7184185075917725,0.4786072892292625,0.8873765664646523,-0.05502775496379616,0.4577496864805579))
push(move(7.166824125158709,18.736411152890014,2.406561188457351))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8873765664646523,-0.05502775496379616,0.4577496864805579,0.6926211575545647,0.4362096098340003,-0.5744537478302708))
push(move(8.762172373325956,18.743246920877773,2.7463956523600377))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6926211575545647,0.4362096098340003,-0.5744537478302708,-0.17060984017737638,0.4903228480548651,-0.8546787625242691))
push(move(8.477360190182525,19.561780720888503,1.319614383543501))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub190 inherits .../COPOLYFF



DPDPoly_sub191 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.07971741078021244,-0.9968145561168705,0.002423867163324011))
push(move(10.109473684210526,20.218947368421052,1.4442105263157894))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.07971741078021244,-0.9968145561168705,0.002423867163324011,0.4079741544729293,-0.9129915253996307,-0.0018878110482177524))
push(move(9.93457153124492,18.031909301505166,1.4495285563573928))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4079741544729293,-0.9129915253996307,-0.0018878110482177524,0.7677466806522533,0.638596336780821,-0.05253335128814376))
push(move(11.437763821188824,17.246411914796944,1.4380641546196071))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7677466806522533,0.638596336780821,-0.05253335128814376,-0.006788049206265323,0.9297801918023002,0.36805260129504747))
push(move(11.543269685379666,19.369992257909157,1.3394527886888803))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.006788049206265323,0.9297801918023002,0.36805260129504747,0.6788283163283472,0.2621905407946528,0.6858922927607723))
push(move(11.415950390912668,20.23426523903485,2.6208030406160554))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6788283163283472,0.2621905407946528,0.6858922927607723,0.8553276316500722,-0.5165384116255722,0.04003388378872575))
push(move(13.059242147108481,19.955521220107343,2.871200658550019))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8553276316500722,-0.5165384116255722,0.04003388378872575,0.5980887642366188,-0.4861493494683183,0.6371409891895555))
push(move(14.0028259789247,18.67203275891854,2.741882581173602))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5980887642366188,-0.4861493494683183,0.6371409891895555,0.8728896413406926,-0.014707958380353662,0.4876959606152163))
push(move(14.50894169846023,18.777150155548537,4.4155583883843885))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8728896413406926,-0.014707958380353662,0.4876959606152163,0.9966924457067753,-0.06615037364945302,-0.047204838068618124))
push(move(16.80387185167564,18.62483588068018,4.306867079718452))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub191 inherits .../COPOLYFF



DPDPoly_sub192 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.9244908043469122,-0.0259550730001577,-0.38031971663793046))
push(move(17.330526315789474,20.218947368421052,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9244908043469122,-0.0259550730001577,-0.38031971663793046,-0.8730675585477402,0.0007179500684535701,-0.4875987312936608))
push(move(15.872938693847521,20.17802560591812,3.733004942592097))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8730675585477402,0.0007179500684535701,-0.4875987312936608,-0.7397357093693557,0.02414762143880928,0.6724641051109449))
push(move(14.576420437484748,20.221212153642423,2.7944934143091427))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7397357093693557,0.02414762143880928,0.6724641051109449,-0.3936251438144387,-0.0005385841662804191,0.9192708828654143))
push(move(14.598311123100851,20.21963401235844,4.891717815116032))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.3936251438144387,-0.0005385841662804191,0.9192708828654143,-0.9266346976227811,0.0014748210454320811,-0.37596005381479125))
push(move(13.224791464379798,20.21936276476308,5.951083329709468))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9266346976227811,0.0014748210454320811,-0.37596005381479125,-0.9395122501082587,-0.01797651929442424,-0.3420432379839922))
push(move(12.744235334797718,20.22258493789515,4.139470532626607))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9395122501082587,-0.01797651929442424,-0.3420432379839922,-0.8607548351310346,-0.029565758094338385,0.5081603878175202))
push(move(11.595992694451757,20.1881975165069,5.358095207174254))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8607548351310346,-0.029565758094338385,0.5081603878175202,-0.5155752921448662,-0.8317703585470991,0.2057673170650914))
push(move(10.019972717003366,20.12901022154645,5.74778255351047))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5155752921448662,-0.8317703585470991,0.2057673170650914,0.05640899682875757,-0.9950231622536405,0.08213970815347808))
push(move(10.148961383018085,17.853722278694537,5.935608821964052))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub192 inherits .../COPOLYFF



DPDPoly_sub193 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.01655877213782978,0.9970863486528272,0.07446220783363962))
push(move(10.109473684210526,17.330526315789474,4.332631578947368))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.01655877213782978,0.9970863486528272,0.07446220783363962,0.025998068481475917,0.9124922711108961,-0.4082670150748298))
push(move(10.072701411417592,19.544768465242573,4.4979907370075995))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.025998068481475917,0.9124922711108961,-0.4082670150748298,-0.7532680566076455,0.36494412465736553,-0.5471773211424339))
push(move(10.192561073783422,20.2467660689876,3.0278484734079876))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.7532680566076455,0.36494412465736553,-0.5471773211424339,-0.6502426859148347,-0.45793414014748157,0.6062019240332781))
push(move(8.510885163165636,20.301438894307168,3.3634803547621432))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6502426859148347,-0.45793414014748157,0.6062019240332781,0.05423995551460287,-0.9214145672543571,0.38477684763670456))
push(move(8.686266452684766,19.185956394287263,4.432122165754568))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.05423995551460287,-0.9214145672543571,0.38477684763670456,-0.05899677839888005,-0.8941181078067475,0.44392813543481874))
push(move(8.68747709385102,17.30154009554657,4.616218963460085))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05899677839888005,-0.8941181078067475,0.44392813543481874,0.6443087953178478,-0.6095911373529331,0.4618060432008455))
push(move(8.49907378170326,16.348981879481336,5.840675236806006))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6443087953178478,-0.6095911373529331,0.4618060432008455,0.7963780082352023,-0.1541035053851215,-0.5848368812133429))
push(move(10.158663121128086,15.909626823303945,5.670686329118244))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.7963780082352023,-0.1541035053851215,-0.5848368812133429,0.43123376916544076,-0.017462200308699945,-0.9020712321606018))
push(move(10.931252944673524,15.878341893366008,4.054553493721021))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub193 inherits .../COPOLYFF



DPDPoly_sub194 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.9211878915266705,-0.05649868365516576,-0.3849945028826788))
push(move(11.553684210526315,15.886315789473683,5.776842105263158))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9211878915266705,-0.05649868365516576,-0.3849945028826788,0.5995264032827833,0.5193311792023274,-0.6089854005435018))
push(move(13.162283969331641,15.787656471720496,5.104555734399018))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5995264032827833,0.5193311792023274,-0.6089854005435018,-0.05468585783990415,0.9885674878108719,-0.14051255814202301))
push(move(12.988468831263807,17.129177463136294,4.319420243325005))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05468585783990415,0.9885674878108719,-0.14051255814202301,0.011520989789057913,0.48517279574584443,0.8743423957823624))
push(move(12.989271577264317,18.91523702987608,4.660009104613664))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.011520989789057913,0.48517279574584443,0.8743423957823624,0.0714139678003021,0.48928056117821744,0.8691976631676744))
push(move(13.024081542588874,18.628902663316794,7.022113667273501))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0714139678003021,0.48928056117821744,0.8691976631676744,0.851247765095787,0.5238594880298718,0.03079738983272068))
push(move(13.198666297419486,20.349869068131817,7.20860578737286))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.851247765095787,0.5238594880298718,0.03079738983272068,0.8513448681892449,-0.043865174788849486,0.5227693199190067))
push(move(15.559268827188584,20.189061723259584,7.113834496747853))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8513448681892449,-0.043865174788849486,0.5227693199190067,-0.1538549659195667,0.048627330115049335,0.9868961608131683))
push(move(15.901606056267903,20.21060127032645,8.868349132652687))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1538549659195667,0.048627330115049335,0.9868961608131683,-0.5219288252398416,0.08289125547179109,0.848951907442388))
push(move(15.076519996055172,20.341639097892074,10.210406422360421))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub194 inherits .../COPOLYFF



DPDPoly_sub195 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.0050542226136888755,-0.9980706044021667,-0.0618831436019945))
push(move(14.442105263157893,18.774736842105263,10.109473684210526))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0050542226136888755,-0.9980706044021667,-0.0618831436019945,5.756293982149989e-05,-0.914301780093007,0.405033642559808))
push(move(14.431186237532156,16.618528194657397,9.97578277218752))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(5.756293982149989e-05,-0.914301780093007,0.405033642559808,0.0019042804082701735,0.6633641986860915,0.748294269400539))
push(move(14.442292646406226,15.79843233017887,11.427969922629869))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.0019042804082701735,0.6633641986860915,0.748294269400539,0.01031794573521131,0.9244805292037686,0.38108961035290034))
push(move(14.434831494950016,17.8883691568925,11.408200615919004))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.01031794573521131,0.9244805292037686,0.38108961035290034,0.1627752561922439,-0.37181897696380767,0.9139227890479243))
push(move(14.477633862544373,18.964979919841024,12.733285014714717))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.1627752561922439,-0.37181897696380767,0.9139227890479243,0.5235852874267539,-0.8482004850708338,0.08008984901874643))
push(move(14.712630220727618,17.25380810359281,12.967937594350024))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.5235852874267539,-0.8482004850708338,0.08008984901874643,0.3808693717475603,-0.9241774908026704,-0.028887491381194584))
push(move(15.987520636767423,16.51898549438233,12.964243765250355))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.3808693717475603,-0.9241774908026704,-0.028887491381194584,0.015174422550703495,-0.8756791067941117,-0.4826549894329481))
push(move(15.883805345740653,14.411957934967422,12.87910842130718))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.015174422550703495,-0.8756791067941117,-0.4826549894329481,0.09285005696397629,-0.4362364486107493,-0.8950288418957613))
push(move(16.03646134716924,13.694735844859697,11.407579715405834))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub195 inherits .../COPOLYFF



DPDPoly_sub196 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,0.019676507103048187,0.9079219426550375,0.41867718007281757))
push(move(14.442105263157893,12.997894736842104,11.553684210526315))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.019676507103048187,0.9079219426550375,0.41867718007281757,0.006362803935599688,0.8937072263053981,0.4486055153200738))
push(move(14.473537990475403,14.448277302182607,12.22251052031654))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.006362803935599688,0.8937072263053981,0.4486055153200738,0.14879332388631414,0.5234047468224964,0.8389922632364025))
push(move(14.461772092520675,15.760259835300364,12.940281724814053))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.14879332388631414,0.5234047468224964,0.8389922632364025,0.49655386094872417,-0.0012481153288628902,0.8680050146082341))
push(move(14.877938334227462,15.87082136537055,14.502779223214482))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.49655386094872417,-0.0012481153288628902,0.8680050146082341,0.509235857802474,0.6545673124319068,0.5587669233444736))
push(move(15.98123538117132,15.756440581093809,15.596391882817784))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.509235857802474,0.6545673124319068,0.5587669233444736,0.8126090435503273,0.573434912195528,0.10411024836935848))
push(move(16.102792019488454,17.445237566820747,15.846768879036986))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8126090435503273,0.573434912195528,0.10411024836935848,0.8397968902250145,-0.5423825335339035,0.023714351893712758))
push(move(18.393208160995872,17.4585006433026,15.90541020738694))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8397968902250145,-0.5423825335339035,0.023714351893712758,-0.5371448623704134,-0.7524418394217187,-0.3811911267549786))
push(move(18.637815127300176,15.807993762055636,15.918353366592344))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.5371448623704134,-0.7524418394217187,-0.3811911267549786,-0.858726574060753,0.00022451829417745398,-0.5124340158434231))
push(move(17.215228072457354,15.808365704450946,15.069442875849337))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub196 inherits .../COPOLYFF



DPDPoly_sub197 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.36406659092495436,0.931316215301517,-0.010277377522516076))
push(move(17.330526315789474,17.330526315789474,14.442105263157893))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.36406659092495436,0.931316215301517,-0.010277377522516076,-0.9966000859274885,0.08133377654857621,0.01315619708231661))
push(move(16.670194928376276,19.019715447393217,14.42346451136254))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9966000859274885,0.08133377654857621,0.01315619708231661,-0.8171109983327227,-0.5615540297729715,0.13033298910651048))
push(move(15.93719037811885,17.444238200237223,14.460498801806658))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.8171109983327227,-0.5615540297729715,0.13033298910651048,-0.4914830473801516,-0.04053097043118111,0.8699434778040619))
push(move(14.269175677873424,17.369631140079395,14.806438203380925))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4914830473801516,-0.04053097043118111,0.8699434778040619,0.11144180770702716,-0.009876674826497874,0.9937218799993093))
push(move(14.499737764519727,17.325696269465507,17.004843988316665))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.11144180770702716,-0.009876674826497874,0.9937218799993093,0.862531880464363,0.010707789406620472,0.5058894132403181))
push(move(14.733281787794054,17.328499133815395,18.94485273163353))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.862531880464363,0.010707789406620472,0.5058894132403181,0.8755276789109965,0.01149876264860774,-0.4830311189957373))
push(move(15.836034238424054,17.342285547556507,17.788604281019836))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8755276789109965,0.01149876264860774,-0.4830311189957373,0.6907503656646334,-0.4064550723203735,0.5980453214591811))
push(move(17.419368454902745,17.363776914041704,17.462931051959327))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6907503656646334,-0.4064550723203735,0.5980453214591811,-0.06834208971827369,-0.4833713502170613,0.8727436602819149))
push(move(17.29495456150642,16.483819747313984,19.051724095312824))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub197 inherits .../COPOLYFF



DPDPoly_sub198 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.05944170606362526,-0.9978115406018291,0.028962268938222423))
push(move(17.330526315789474,15.886315789473683,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.05944170606362526,-0.9978115406018291,0.028962268938222423,0.4147140056364352,-0.9097303840893733,-0.020072911935843245))
push(move(17.197229065572106,13.648736429705435,17.395473825966732))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4147140056364352,-0.9097303840893733,-0.020072911935843245,0.6032050693953107,-0.21845725913504568,0.767085438648787))
push(move(18.654851894441567,12.981231319327437,17.266426549798034))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6032050693953107,-0.21845725913504568,0.767085438648787,0.03716531164069055,-0.3468356189559677,0.9371893048013732))
push(move(18.73389865500161,13.092214868904449,19.349629926225372))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03716531164069055,-0.3468356189559677,0.9371893048013732,0.016243391763639467,-0.8283170544039895,-0.5600241152017573))
push(move(18.777765479332295,11.834172209321261,20.36591077552067))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.016243391763639467,-0.8283170544039895,-0.5600241152017573,0.03249257250865958,-0.3805893896334167,-0.9241731164831798))
push(move(18.762053448779987,11.656486654673916,18.37893589237719))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.03249257250865958,-0.3805893896334167,-0.9241731164831798,-0.665613062692005,-0.6114873204906895,-0.4278346732709793))
push(move(18.88718997828928,10.55246996004932,17.253593946998272))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.665613062692005,-0.6114873204906895,-0.4278346732709793,-0.9398523097891459,-0.3413867056540552,0.011521848231878991))
push(move(17.12757194245621,10.15491648919177,17.32834373843524))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.9398523097891459,-0.3413867056540552,0.011521848231878991,-0.8783105842576638,-0.47748223911319965,-0.024108689562197735))
push(move(15.788343915416846,9.426862417551076,17.291583356247457))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub198 inherits .../COPOLYFF



DPDPoly_sub199 inherits .../COPOLYFF {



create_var {$mol}
# The line above forces all monomer subunits to share the same molecule-ID
# (Note: Setting the molecule-ID number is optional and is usually ignored.)




# ------------ List of Monomers: ------------
#
# (Note: move(), rot(), and rotvv() commands control the position
#  of each monomer.  (See the moltemplate manual for an explanation
#  of what they do.)  Commands enclosed in push() are cumulative
#  and remain in effect until removed by pop().)



push(move(0,0,0))
pop()
push(rotvv(1.0,0.0,0.0,-0.004522451440580702,0.33157893357323126,-0.9434166408556753))
push(move(15.886315789473683,7.221052631578947,17.330526315789474))
mon[0] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.004522451440580702,0.33157893357323126,-0.9434166408556753,0.00734634016162752,0.8836811519026998,-0.46803167954546326))
push(move(15.878661611795357,7.782244742827673,15.733808542547562))
mon[1] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.00734634016162752,0.8836811519026998,-0.46803167954546326,0.11869579132850143,0.9921311320169571,0.03983875002622733))
push(move(15.908853522964225,9.932085588673413,15.89465851949213))
mon[2] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.11869579132850143,0.9921311320169571,0.03983875002622733,0.4819457957689643,0.8762008918159381,0.0004971132411098922))
push(move(16.335461911337422,11.600457614723576,15.887127819850297))
mon[3] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4819457957689643,0.8762008918159381,0.0004971132411098922,0.24813140160755165,0.968434099449921,0.02379501121858316))
push(move(17.36572594257892,12.580750489446558,15.896161241534228))
mon[4] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.24813140160755165,0.968434099449921,0.02379501121858316,-0.6355190763450626,0.6694220883137779,-0.3846941269101195))
push(move(17.088149460627758,14.538128075784519,15.959308158829636))
mon[5] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.6355190763450626,0.6694220883137779,-0.3846941269101195,0.1931157755526048,-0.0743506617046712,-0.9783548826150935))
push(move(15.62611156840111,14.413168005408702,14.84313316142784))
mon[6] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.1931157755526048,-0.0743506617046712,-0.9783548826150935,0.6214794254618525,0.272473638632688,-0.7345212318087675))
push(move(17.40690072837781,14.415407041686693,14.34446411902686))
mon[7] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.6214794254618525,0.272473638632688,-0.7345212318087675,-0.02377776959229272,0.9075688058942021,-0.41922962710308076))
push(move(17.308388408226214,15.150724347509655,12.854864514057237))
mon[8] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02377776959229272,0.9075688058942021,-0.41922962710308076,-0.1676511826181473,0.9853660910643403,0.030769263028531682))
push(move(17.330526315789474,17.330526315789474,12.997894736842104))
mon[9] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1676511826181473,0.9853660910643403,0.030769263028531682,-0.4653318909341715,0.8847928031451135,0.024656171281054743))
push(move(16.69374994403961,18.76324822843447,12.967669996706801))
mon[10] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.4653318909341715,0.8847928031451135,0.024656171281054743,-0.1605885607936098,0.6364030279592191,-0.7544551014782621))
push(move(15.878119020807462,20.092167086327894,13.074852288500638))
mon[11] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.1605885607936098,0.6364030279592191,-0.7544551014782621,0.9695622147942334,0.09638587732002044,-0.22507526362652724))
push(move(16.337937444582455,20.173312251184477,11.296040622493841))
mon[12] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9695622147942334,0.09638587732002044,-0.22507526362652724,0.8641359635293878,0.03511825003118376,0.502031617579893))
push(move(17.302984341231568,20.233815442541008,12.74408244956378))
mon[13] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.8641359635293878,0.03511825003118376,0.502031617579893,0.9390913957930316,-0.322793126367176,0.11794892079879242))
push(move(19.187117045968233,20.289102133619814,12.951310515691258))
mon[14] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.9390913957930316,-0.322793126367176,0.11794892079879242,0.4253389928037725,-0.6252649956302423,-0.6543167630744189))
push(move(20.293161288304628,19.206004337614758,13.119645622099146))
mon[15] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(0.4253389928037725,-0.6252649956302423,-0.6543167630744189,-0.02345774513410874,0.11245629097554659,-0.9933797445152818))
push(move(20.223198898603556,18.76602118872401,11.35746246609744))
mon[16] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.02345774513410874,0.11245629097554659,-0.9933797445152818,-0.0028998462537757415,0.9909990893503612,0.1338371988591341))
push(move(20.217068785317153,19.570791345406683,9.897309001717154))
mon[17] = new ABEADALCHEMICAL.rot(0.0,1,0,0)
pop()
push(rotvv(-0.0028998462537757415,0.9909990893503612,0.1338371988591341,0.001056169319862434,0.3644036319559249,0.9312405046623018))
push(move(20.218947368421052,20.218947368421052,11.553684210526315))
mon[18] = new ABEADALCHEMICAL.rot(0.0,1,0,0)


write("Data Bonds") {
  $bond:genpoly1 @bond:COPOLYFF/Backbone $atom:mon[0]/monomer $atom:mon[1]/monomer
  $bond:genpoly2 @bond:COPOLYFF/Backbone $atom:mon[1]/monomer $atom:mon[2]/monomer
  $bond:genpoly3 @bond:COPOLYFF/Backbone $atom:mon[2]/monomer $atom:mon[3]/monomer
  $bond:genpoly4 @bond:COPOLYFF/Backbone $atom:mon[3]/monomer $atom:mon[4]/monomer
  $bond:genpoly5 @bond:COPOLYFF/Backbone $atom:mon[4]/monomer $atom:mon[5]/monomer
  $bond:genpoly6 @bond:COPOLYFF/Backbone $atom:mon[5]/monomer $atom:mon[6]/monomer
  $bond:genpoly7 @bond:COPOLYFF/Backbone $atom:mon[6]/monomer $atom:mon[7]/monomer
  $bond:genpoly8 @bond:COPOLYFF/Backbone $atom:mon[7]/monomer $atom:mon[8]/monomer
  $bond:genpoly9 @bond:COPOLYFF/Backbone $atom:mon[8]/monomer $atom:mon[9]/monomer
  $bond:genpoly10 @bond:COPOLYFF/Backbone $atom:mon[9]/monomer $atom:mon[10]/monomer
  $bond:genpoly11 @bond:COPOLYFF/Backbone $atom:mon[10]/monomer $atom:mon[11]/monomer
  $bond:genpoly12 @bond:COPOLYFF/Backbone $atom:mon[11]/monomer $atom:mon[12]/monomer
  $bond:genpoly13 @bond:COPOLYFF/Backbone $atom:mon[12]/monomer $atom:mon[13]/monomer
  $bond:genpoly14 @bond:COPOLYFF/Backbone $atom:mon[13]/monomer $atom:mon[14]/monomer
  $bond:genpoly15 @bond:COPOLYFF/Backbone $atom:mon[14]/monomer $atom:mon[15]/monomer
  $bond:genpoly16 @bond:COPOLYFF/Backbone $atom:mon[15]/monomer $atom:mon[16]/monomer
  $bond:genpoly17 @bond:COPOLYFF/Backbone $atom:mon[16]/monomer $atom:mon[17]/monomer
  $bond:genpoly18 @bond:COPOLYFF/Backbone $atom:mon[17]/monomer $atom:mon[18]/monomer
}  # write("Data Bonds") {...


}  # DPDPoly_sub199 inherits .../COPOLYFF





# Now instantiate all the polymers (once each)

polymers[0] = new DPDPoly_sub1
polymers[1] = new DPDPoly_sub2
polymers[2] = new DPDPoly_sub3
polymers[3] = new DPDPoly_sub4
polymers[4] = new DPDPoly_sub5
polymers[5] = new DPDPoly_sub6
polymers[6] = new DPDPoly_sub7
polymers[7] = new DPDPoly_sub8
polymers[8] = new DPDPoly_sub9
polymers[9] = new DPDPoly_sub10
polymers[10] = new DPDPoly_sub11
polymers[11] = new DPDPoly_sub12
polymers[12] = new DPDPoly_sub13
polymers[13] = new DPDPoly_sub14
polymers[14] = new DPDPoly_sub15
polymers[15] = new DPDPoly_sub16
polymers[16] = new DPDPoly_sub17
polymers[17] = new DPDPoly_sub18
polymers[18] = new DPDPoly_sub19
polymers[19] = new DPDPoly_sub20
polymers[20] = new DPDPoly_sub21
polymers[21] = new DPDPoly_sub22
polymers[22] = new DPDPoly_sub23
polymers[23] = new DPDPoly_sub24
polymers[24] = new DPDPoly_sub25
polymers[25] = new DPDPoly_sub26
polymers[26] = new DPDPoly_sub27
polymers[27] = new DPDPoly_sub28
polymers[28] = new DPDPoly_sub29
polymers[29] = new DPDPoly_sub30
polymers[30] = new DPDPoly_sub31
polymers[31] = new DPDPoly_sub32
polymers[32] = new DPDPoly_sub33
polymers[33] = new DPDPoly_sub34
polymers[34] = new DPDPoly_sub35
polymers[35] = new DPDPoly_sub36
polymers[36] = new DPDPoly_sub37
polymers[37] = new DPDPoly_sub38
polymers[38] = new DPDPoly_sub39
polymers[39] = new DPDPoly_sub40
polymers[40] = new DPDPoly_sub41
polymers[41] = new DPDPoly_sub42
polymers[42] = new DPDPoly_sub43
polymers[43] = new DPDPoly_sub44
polymers[44] = new DPDPoly_sub45
polymers[45] = new DPDPoly_sub46
polymers[46] = new DPDPoly_sub47
polymers[47] = new DPDPoly_sub48
polymers[48] = new DPDPoly_sub49
polymers[49] = new DPDPoly_sub50
polymers[50] = new DPDPoly_sub51
polymers[51] = new DPDPoly_sub52
polymers[52] = new DPDPoly_sub53
polymers[53] = new DPDPoly_sub54
polymers[54] = new DPDPoly_sub55
polymers[55] = new DPDPoly_sub56
polymers[56] = new DPDPoly_sub57
polymers[57] = new DPDPoly_sub58
polymers[58] = new DPDPoly_sub59
polymers[59] = new DPDPoly_sub60
polymers[60] = new DPDPoly_sub61
polymers[61] = new DPDPoly_sub62
polymers[62] = new DPDPoly_sub63
polymers[63] = new DPDPoly_sub64
polymers[64] = new DPDPoly_sub65
polymers[65] = new DPDPoly_sub66
polymers[66] = new DPDPoly_sub67
polymers[67] = new DPDPoly_sub68
polymers[68] = new DPDPoly_sub69
polymers[69] = new DPDPoly_sub70
polymers[70] = new DPDPoly_sub71
polymers[71] = new DPDPoly_sub72
polymers[72] = new DPDPoly_sub73
polymers[73] = new DPDPoly_sub74
polymers[74] = new DPDPoly_sub75
polymers[75] = new DPDPoly_sub76
polymers[76] = new DPDPoly_sub77
polymers[77] = new DPDPoly_sub78
polymers[78] = new DPDPoly_sub79
polymers[79] = new DPDPoly_sub80
polymers[80] = new DPDPoly_sub81
polymers[81] = new DPDPoly_sub82
polymers[82] = new DPDPoly_sub83
polymers[83] = new DPDPoly_sub84
polymers[84] = new DPDPoly_sub85
polymers[85] = new DPDPoly_sub86
polymers[86] = new DPDPoly_sub87
polymers[87] = new DPDPoly_sub88
polymers[88] = new DPDPoly_sub89
polymers[89] = new DPDPoly_sub90
polymers[90] = new DPDPoly_sub91
polymers[91] = new DPDPoly_sub92
polymers[92] = new DPDPoly_sub93
polymers[93] = new DPDPoly_sub94
polymers[94] = new DPDPoly_sub95
polymers[95] = new DPDPoly_sub96
polymers[96] = new DPDPoly_sub97
polymers[97] = new DPDPoly_sub98
polymers[98] = new DPDPoly_sub99
polymers[99] = new DPDPoly_sub100
polymers[100] = new DPDPoly_sub101
polymers[101] = new DPDPoly_sub102
polymers[102] = new DPDPoly_sub103
polymers[103] = new DPDPoly_sub104
polymers[104] = new DPDPoly_sub105
polymers[105] = new DPDPoly_sub106
polymers[106] = new DPDPoly_sub107
polymers[107] = new DPDPoly_sub108
polymers[108] = new DPDPoly_sub109
polymers[109] = new DPDPoly_sub110
polymers[110] = new DPDPoly_sub111
polymers[111] = new DPDPoly_sub112
polymers[112] = new DPDPoly_sub113
polymers[113] = new DPDPoly_sub114
polymers[114] = new DPDPoly_sub115
polymers[115] = new DPDPoly_sub116
polymers[116] = new DPDPoly_sub117
polymers[117] = new DPDPoly_sub118
polymers[118] = new DPDPoly_sub119
polymers[119] = new DPDPoly_sub120
polymers[120] = new DPDPoly_sub121
polymers[121] = new DPDPoly_sub122
polymers[122] = new DPDPoly_sub123
polymers[123] = new DPDPoly_sub124
polymers[124] = new DPDPoly_sub125
polymers[125] = new DPDPoly_sub126
polymers[126] = new DPDPoly_sub127
polymers[127] = new DPDPoly_sub128
polymers[128] = new DPDPoly_sub129
polymers[129] = new DPDPoly_sub130
polymers[130] = new DPDPoly_sub131
polymers[131] = new DPDPoly_sub132
polymers[132] = new DPDPoly_sub133
polymers[133] = new DPDPoly_sub134
polymers[134] = new DPDPoly_sub135
polymers[135] = new DPDPoly_sub136
polymers[136] = new DPDPoly_sub137
polymers[137] = new DPDPoly_sub138
polymers[138] = new DPDPoly_sub139
polymers[139] = new DPDPoly_sub140
polymers[140] = new DPDPoly_sub141
polymers[141] = new DPDPoly_sub142
polymers[142] = new DPDPoly_sub143
polymers[143] = new DPDPoly_sub144
polymers[144] = new DPDPoly_sub145
polymers[145] = new DPDPoly_sub146
polymers[146] = new DPDPoly_sub147
polymers[147] = new DPDPoly_sub148
polymers[148] = new DPDPoly_sub149
polymers[149] = new DPDPoly_sub150
polymers[150] = new DPDPoly_sub151
polymers[151] = new DPDPoly_sub152
polymers[152] = new DPDPoly_sub153
polymers[153] = new DPDPoly_sub154
polymers[154] = new DPDPoly_sub155
polymers[155] = new DPDPoly_sub156
polymers[156] = new DPDPoly_sub157
polymers[157] = new DPDPoly_sub158
polymers[158] = new DPDPoly_sub159
polymers[159] = new DPDPoly_sub160
polymers[160] = new DPDPoly_sub161
polymers[161] = new DPDPoly_sub162
polymers[162] = new DPDPoly_sub163
polymers[163] = new DPDPoly_sub164
polymers[164] = new DPDPoly_sub165
polymers[165] = new DPDPoly_sub166
polymers[166] = new DPDPoly_sub167
polymers[167] = new DPDPoly_sub168
polymers[168] = new DPDPoly_sub169
polymers[169] = new DPDPoly_sub170
polymers[170] = new DPDPoly_sub171
polymers[171] = new DPDPoly_sub172
polymers[172] = new DPDPoly_sub173
polymers[173] = new DPDPoly_sub174
polymers[174] = new DPDPoly_sub175
polymers[175] = new DPDPoly_sub176
polymers[176] = new DPDPoly_sub177
polymers[177] = new DPDPoly_sub178
polymers[178] = new DPDPoly_sub179
polymers[179] = new DPDPoly_sub180
polymers[180] = new DPDPoly_sub181
polymers[181] = new DPDPoly_sub182
polymers[182] = new DPDPoly_sub183
polymers[183] = new DPDPoly_sub184
polymers[184] = new DPDPoly_sub185
polymers[185] = new DPDPoly_sub186
polymers[186] = new DPDPoly_sub187
polymers[187] = new DPDPoly_sub188
polymers[188] = new DPDPoly_sub189
polymers[189] = new DPDPoly_sub190
polymers[190] = new DPDPoly_sub191
polymers[191] = new DPDPoly_sub192
polymers[192] = new DPDPoly_sub193
polymers[193] = new DPDPoly_sub194
polymers[194] = new DPDPoly_sub195
polymers[195] = new DPDPoly_sub196
polymers[196] = new DPDPoly_sub197
polymers[197] = new DPDPoly_sub198
polymers[198] = new DPDPoly_sub199


}  # DPDPoly

